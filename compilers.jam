import common ;
import errors ;
import feature ;
import os ;
import path ;
import property ;
import regex ;

local .root-dir ;

local .gcc-versions ;
local .gcc-current-version ;
local .gcc-previous-version ;
local .gcc-oldest-version ;
local .gcc-snapshot-version ;
local .gcc-current-latest-version ;
local .gcc-previous-snapshot-version ;
local .gcc-oldest-snapshot-version ;

local .clang-versions ;
local .clang-latest-version ;

local .icc-system-version ;

rule init ( root-dir )
{
  if "$(.root-dir)" {
    errors.error "an internal error." ;
  }

  .root-dir = [ path.make "$(root-dir)" ] ;

  .gcc-versions = [ SHELL "\"$(.root-dir)/gcc-release-versions.sh\" || echo -n error" ] ;
  if "$(.gcc-versions)" = "error" {
    errors.error "failed to extract GCC release versions." ;
  }
  .gcc-versions = [ regex.split "$(.gcc-versions)" " +" ] ;

  .clang-versions = [ SHELL "\"$(.root-dir)/clang/versions.sh\" || echo -n error" ] ;
  if "$(.clang-versions)" = "error" {
    errors.error "failed to extract Clang versions." ;
  }
  .clang-versions = [ regex.split "$(.clang-versions)" " +" ] ;
}

rule .init-gcc-release-aliases ( )
{
  if ! "$(.gcc-current-version)" {
    if "$(.gcc-previous-version)" || "$(.gcc-oldest-version)" {
      errors.error "an internal error." ;
    }

    local gcc-recent-majors
      = [ SHELL "echo -n \"$(.gcc-versions:J= )\" \\
                   | grep -Eo \"[[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+\" \\
                   | grep -Eo \"^[[:digit:]]+\\.[[:digit:]]+\" \\
                   | sort -u -t '.' -k 1,1n -k 2,2n \\
                   | tail --lines=3 \\
                   | tr '\\n' ' '" ] ;

    local gcc-current-major
      = [ SHELL "echo -n $(gcc-recent-majors) | tr ' ' '\\n' | tail --lines=1 | tr --delete '\\n'" ] ;
    local gcc-current-version
      = [ SHELL "echo -n $(.gcc-versions:J= ) | grep -Eo \"$(gcc-current-major)\\.[[:digit:]]+\" | sort -u -t '.' -k 1,1n -k 2,2n -k 3,3n | tail --lines=1 | tr --delete '\\n'" ] ;
    .gcc-current-version = $(gcc-current-version) ;

    local gcc-previous-major
      = [ SHELL "echo -n $(gcc-recent-majors) | tr ' ' '\\n' | tail --lines=2 | head --lines=1 | tr --delete '\\n'" ] ;
    local gcc-previous-version
      = [ SHELL "echo -n $(.gcc-versions:J= ) | grep -Eo \"$(gcc-previous-major)\\.[[:digit:]]+\" | sort -u -t '.' -k 1,1n -k 2,2n -k 3,3n | tail --lines=1 | tr --delete '\\n'" ] ;
    .gcc-previous-version = $(gcc-previous-version) ;

    local gcc-oldest-major
      = [ SHELL "echo -n $(gcc-recent-majors) | tr ' ' '\\n' | tail --lines=3 | head --lines=1 | tr --delete '\\n'" ] ;
    local gcc-oldest-version
      = [ SHELL "echo -n $(.gcc-versions:J= ) | grep -Eo \"$(gcc-oldest-major)\\.[[:digit:]]+\" | sort -u -t '.' -k 1,1n -k 2,2n -k 3,3n | tail --lines=1 | tr --delete '\\n'" ] ;
    .gcc-oldest-version = $(gcc-oldest-version) ;
  }
}

rule .init-gcc-snapshot-aliases-impl ( major )
{
  return [ SHELL "echo -n \"$(.gcc-versions:J= )\" | grep -Eo \"$(major)(\\.0-RC)?-[[:digit:]]{8}\" | grep -Eo \"[[:digit:]]{8}\" | sort --numeric-sort | tail --lines=1 | tr --delete '\\n'" ] ;
}

rule .init-gcc-snapshot-aliases ( )
{
  if ! "$(.gcc-snapshot-version)" {
    if "$(.gcc-current-snapshot-version)" || "$(.gcc-previous-snapshot-version)" || "$(.gcc-oldest-snapshot-version)" {
      errors.error "an internal error." ;
    }

    local gcc-snapshot-major
      = [ SHELL "{ echo -n \"$(.gcc-versions:J= )\"                                      || echo -n error; } \\
                   | { grep -Eo \"[[:digit:]]+\\.[[:digit:]]+(\\.0-RC)?-[[:digit:]]{8}\" || echo -n error; } \\
                   | { grep -Eo \"^[[:digit:]]+\\.[[:digit:]]+\"                         || echo -n error; } \\
                   | { sort -u -t '.' -k 1,1n -k 2,2n                                    || echo -n error; } \\
                   | { tail --lines=1                                                    || echo -n error; } \\
                   | { tr --delete '\\n'                                                 || echo -n error; }" ] ;
    local gcc-snapshot-date = [ .init-gcc-snapshot-aliases-impl $(gcc-snapshot-major) ] ;
    .gcc-snapshot-version
      = [ SHELL "{ echo -n \"$(.gcc-versions:J= )\"                                      || echo -n error; } \\
                   | { grep -Eo \"$(gcc-snapshot-major)(\\.0-RC)?-$(gcc-snapshot-date)\" || echo -n error; } \\
                   | { tail --lines=1                                                    || echo -n error; } \\
                   | { tr --delete '\\n'                                                 || echo -n error; }" ] ;
    if "$(.gcc-snapshot-version)" = "error" {
      errors.error "failed to extract GCC snapshot versions." ;
    }

    local gcc-current-snapshot-major = [ regex.match "^([0-9]+\\.[0-9]+)\\.[0-9]+$" : [ get-gcc-current-version ] : 1 ] ;
    local gcc-current-snapshot-date = [ .init-gcc-snapshot-aliases-impl $(gcc-current-snapshot-major) ] ;
    .gcc-current-snapshot-version
      = [ SHELL "{ echo -n \"$(.gcc-versions:J= )\"                                                      || echo -n error; } \\
                   | { grep -Eo \"$(gcc-current-snapshot-major)(\\.0-RC)?-$(gcc-current-snapshot-date)\" || echo -n error; } \\
                   | { tail --lines=1                                                                    || echo -n error; } \\
                   | { tr --delete '\\n'                                                                 || echo -n error; }" ] ;
    if "$(.gcc-current-snapshot-version)" = "error" {
      errors.error "failed to extract GCC snapshot versions." ;
    }

    local gcc-previous-snapshot-major = [ regex.match "^([0-9]+\\.[0-9]+)\\.[0-9]+$" : [ get-gcc-previous-version ] : 1 ] ;
    local gcc-previous-snapshot-date = [ .init-gcc-snapshot-aliases-impl $(gcc-previous-snapshot-major) ] ;
    .gcc-previous-snapshot-version
      = [ SHELL "{ echo -n \"$(.gcc-versions:J= )\"                                                        || echo -n error; } \\
                   | { grep -Eo \"$(gcc-previous-snapshot-major)(\\.0-RC)?-$(gcc-previous-snapshot-date)\" || echo -n error; } \\
                   | { tail --lines=1                                                                      || echo -n error; } \\
                   | { tr --delete '\\n'                                                                   || echo -n error; }" ] ;
    if "$(.gcc-previous-snapshot-version)" = "error" {
      errors.error "failed to extract GCC snapshot versions." ;
    }

    local gcc-oldest-snapshot-major = [ regex.match "^([0-9]+\\.[0-9]+)\\.[0-9]+$" : [ get-gcc-oldest-version ] : 1 ] ;
    local gcc-oldest-snapshot-date = [ .init-gcc-snapshot-aliases-impl $(gcc-oldest-snapshot-major) ] ;
    .gcc-oldest-snapshot-version
      = [ SHELL "{ echo -n \"$(.gcc-versions:J= )\"                                                    || echo -n error; } \\
                   | { grep -Eo \"$(gcc-oldest-snapshot-major)(\\.0-RC)?-$(gcc-oldest-snapshot-date)\" || echo -n error; } \\
                   | { tail --lines=1                                                                  || echo -n error; } \\
                   | { tr --delete '\\n'                                                               || echo -n error; }" ] ;
    if "$(.gcc-oldest-snapshot-version)" = "error" {
      errors.error "failed to extract GCC snapshot versions." ;
    }
  }
}

rule get-gcc-current-version ( )
{
  .init-gcc-release-aliases ;
  return $(.gcc-current-version) ;
}

rule get-gcc-previous-version ( )
{
  .init-gcc-release-aliases ;
  return $(.gcc-previous-version) ;
}

rule get-gcc-oldest-version ( )
{
  .init-gcc-release-aliases ;
  return $(.gcc-oldest-version) ;
}

rule get-gcc-snapshot-version ( )
{
  .init-gcc-snapshot-aliases ;
  return $(.gcc-snapshot-version) ;
}

rule get-gcc-current-snapshot-version ( )
{
  .init-gcc-snapshot-aliases ;
  return $(.gcc-current-snapshot-version) ;
}

rule get-gcc-previous-snapshot-version ( )
{
  .init-gcc-snapshot-aliases ;
  return $(.gcc-previous-snapshot-version) ;
}

rule get-gcc-oldest-snapshot-version ( )
{
  .init-gcc-snapshot-aliases ;
  return $(.gcc-oldest-snapshot-version) ;
}

rule get-clang-latest-version ( )
{
  if ! $(.clang-latest-version) {
    local clang-latest-version
      = [ SHELL "echo -n $(.clang-versions:J= ) | grep -Eo \"[[:digit:]]+\\.[[:digit:]]+\" | sort -u -t '.' -k 1,1n -k 2,2n | tail --lines=1 | tr --delete '\\n'" ] ;
    .clang-latest-version = $(clang-latest-version) ;
  }
  return $(.clang-latest-version) ;
}

rule get-icc-system-version ( )
{
  if ! $(.icc-system-version)
  {
    local icc-system-version
      = [ SHELL "/opt/intel/bin/icpc --version                                         \\
                   | grep -Eo '^icpc \\(ICC\\) [[:digit:]]+.[[:digit:]]+.[[:digit:]]+' \\
                   | grep -Eo '[[:digit:]]+.[[:digit:]]+.[[:digit:]]+'                 \\
                   | grep -Eo '^[[:digit:]]+.[[:digit:]]+'                             \\
                   | tr --delete '\\n'" ] ;
    if ! [ regex.match "^([0-9]+\\.[0-9]+)$" : "$(icc-system-version)" : 1 ]
    {
      errors.error "an internal error." ;
    }
    .icc-system-version = $(icc-system-version) ;
  }
  return $(.icc-system-version) ;
}

rule is-valid ( compiler )
{
  local result ;
  if "$(compiler)" in gcc-current gcc-previous gcc-oldest gcc-snapshot gcc-current-snapshot gcc-previous-snapshot gcc-oldest-snapshot gcc-$(.gcc-versions) {
    result = "yes" ;
  }
  else if [ regex.match "^(clang-.+)" : "$(compiler)" : 1 ] {
    local tmp = [ regex.match "^clang-(.+)-libstdc\\+\\+-(.+)" : "$(compiler)" : 1 2 ] ;
    local frontend = "clang-$(tmp[1])" ;
    local backend = "gcc-$(tmp[2])" ;
    if "$(frontend)" in clang-latest clang-trunk clang-$(.clang-versions) {
      if [ is-valid "$(backend)" ] {
        result = "yes" ;
      }
    }
  }
  else if [ regex.match "^(icc-.+)" : "$(compiler)" : 1 ] {
    local tmp = [ regex.match "^icc-(.+)-libstdc\\+\\+-(.+)" : "$(compiler)" : 1 2 ] ;
    local frontend = "icc-$(tmp[1])" ;
    local backend = "gcc-$(tmp[2])" ;
    if "$(frontend)" in icc-system {
      if [ is-valid "$(backend)" ] {
        result = "yes" ;
      }
    }
  }
  else if [ regex.match "^(icc-system-.+)$" : $(compiler) : 1 ]
  {
    local backend = [ regex.match "^icc-system-(.+)$" : $(compiler) : 1 ] ;
    if [ is-valid $(backend) ]
    {
      result = yes ;
    }
  }
  return $(result) ;
}

rule is-gcc ( compiler )
{
  if ! [ is-valid "$(compiler)" ] {
    errors.error "an internal error." ;
  }
  local result ;
  if "$(compiler)" in gcc-current gcc-previous gcc-oldest gcc-snapshot gcc-current-snapshot gcc-previous-snapshot gcc-oldest-snapshot gcc-$(.gcc-versions) {
    result = yes ;
  }
  return $(result) ;
}

rule is-builtin-gcc ( compiler )
{
  if ! [ is-valid "$(compiler)" ] {
    errors.error "an internal error." ;
  }
  local result ;
  if [ is-gcc "$(compiler)" ] {
    if [ get-frontend-version "$(compiler)" ] = [ SHELL "gcc -dumpversion | tr --delete '\\n'" ] {
      result = yes ;
    }
  }
  return "$(result)" ;
}

rule is-gcc-release ( compiler )
{
  if ! [ is-valid "$(compiler)" ] {
    errors.error "an invalid argument." ;
  }
  local result ;
  if $(compiler) in gcc-current gcc-previous gcc-oldest {
    result = yes ;
  }
  else if [ regex.match "^(gcc-[0-9]+\\.[0-9]+\\.[0-9]+)$" : $(compiler) : 1 ] {
    result = yes ;
  }
  return $(result) ;
}

rule is-gcc-snapshot ( compiler )
{
  if ! [ is-valid "$(compiler)" ] {
    errors.error "an invalid argument." ;
  }
  local result ;
  if $(compiler) in gcc-snapshot gcc-current-snapshot gcc-previous-snapshot gcc-oldest-snapshot {
    result = yes ;
  }
  else if [ regex.match "^(gcc-[0-9]+\\.[0-9]+(\\.0-RC)?-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9])$" : $(compiler) : 1 ] {
    result = yes ;
  }
  return $(result) ;
}

rule get-gccs ( compilers * )
{
  local result ;
  for local compiler in $(compilers) {
    if ! [ is-valid "$(compiler)" ] {
      errors.error "an internal error." ;
    }
    if [ is-gcc $(compiler) ] {
      result += $(compiler) ;
    }
  }
  return $(result) ;
}

rule get-gcc-versions ( compilers * )
{
  local results ;
  for local gcc in [ get-gccs $(compilers) ] {
    local version = [ get-frontend-version "$(gcc)" ] ;
    if ! "$(version)" in $(results) {
      results += "$(version)" ;
    }
  }
  return $(results) ;
}

rule get-version-deprecated ( compiler )
{
  if ! [ is-valid "$(compiler)" ] {
    errors.error "an internal error." ;
  }
  local result ;
  if $(compiler) in gcc-current gcc-previous gcc-oldest gcc-snapshot gcc-current-snapshot gcc-previous-snapshot gcc-oldest-snapshot {
    result = [ get-$(compiler)-version ] ;
  }
  else if [ is-gcc "$(compiler)" ] {
    result = [ regex.match "gcc-(.+)" : "$(compiler)" : 1 ] ;
  }
  else if [ is-clang "$(compiler)" ] {
    if "$(compiler)" = "clang-latest" {
      result = [ get-clang-latest-version ] ;
    }
    else if "$(compiler)" = "clang-trunk" {
      errors.error "this rule cannot be called for Clang trunk." ;
    }
    else {
      result = [ regex.match "^clang-(.+)" : "$(compiler)" : 1 ] ;
    }
  }
  else if [ is-icc "$(compiler)" ] {
    if [ regex.match "^(icc-system-.+)" : "$(compiler)" : 1 ] {
      result = [ get-icc-system-version ] ;
    }
    else {
      errors.error "an internal error." ;
    }
  }
  else
  {
    errors.error "an internal error." ;
  }
  return $(result) ;
}

rule get-frontend-version ( compiler )
{
  if ! [ is-valid "$(compiler)" ] {
    errors.error "an internal error." ;
  }
  local result ;
  if "$(compiler)" in gcc-current gcc-previous gcc-oldest gcc-snapshot gcc-current-snapshot gcc-previous-snapshot gcc-oldest-snapshot {
    result = [ get-$(compiler)-version ] ;
  }
  else if [ is-gcc "$(compiler)" ] {
    result = [ regex.match "^gcc-(.+)" : "$(compiler)" : 1 ] ;
  }
  else if [ is-clang "$(compiler)" ] {
    local frontend-and-backend = [ split-frontend-and-backend "$(compiler)" ] ;
    local frontend = "$(frontend-and-backend[1])" ;
    if "$(frontend)" = "clang-latest" {
      result = [ get-clang-latest-version ] ;
    }
    else if "$(frontend)" = "clang-trunk" {
      errors.error "this rule cannot be called for Clang trunk." ;
    }
    else {
      result = [ regex.match "^clang-(.+)" : "$(frontend)" : 1 ] ;
    }
  }
  else if [ is-icc "$(compiler)" ] {
    local frontend-and-backend = [ split-frontend-and-backend "$(compiler)" ] ;
    local frontend = "$(frontend-and-backend[1])" ;
    if "$(frontend)" = "icc-system" {
      result = [ get-icc-system-version ] ;
    }
    else {
      result = [ regex.match "^icc-(.+)" : "$(frontend)" : 1 ] ;
    }
  }
  else {
    errors.error "an internal error." ;
  }
  return "$(result)" ;
}

rule get-backend-version ( compiler )
{
  if ! [ is-valid "$(compiler)" ] {
    errors.error "an internal error." ;
  }
  local result ;
  if "$(compiler)" in gcc-current gcc-previous gcc-oldest gcc-snapshot gcc-current-snapshot gcc-previous-snapshot gcc-oldest-snapshot {
    errors.error "an internal error." ;
  }
  else if [ is-gcc "$(compiler)" ] {
    errors.error "an internal error." ;
  }
  else if [ is-clang "$(compiler)" ] || [ is-icc "$(compiler)" ] {
    local frontend-and-backend = [ split-frontend-and-backend "$(compiler)" ] ;
    local backend = "$(frontend-and-backend[2])" ;
    if "$(backend)" in gcc-current gcc-previous gcc-oldest gcc-snapshot gcc-current-snapshot gcc-previous-snapshot gcc-oldest-snapshot {
      result = [ get-$(backend)-version ] ;
    }
    else if [ is-gcc "$(backend)" ] {
      result = [ regex.match "^gcc-(.+)" : "$(backend)" : 1 ] ;
    }
    else {
      errors.error "an internal error." ;
    }
  }
  else {
    errors.error "an internal error." ;
  }
  return "$(result)" ;
}

rule is-clang ( compiler )
{
  if ! [ is-valid "$(compiler)" ] {
    errors.error "an internal error." ;
  }
  local result ;
  if [ regex.match "^(clang-.+)" : "$(compiler)" : 1 ] {
    local tmp = [ regex.match "^clang-(.+)-libstdc\\+\\+-(.+)" : "$(compiler)" : 1 2 ] ;
    local frontend = "clang-$(tmp[1])" ;
    local backend = "gcc-$(tmp[2])" ;
    if ! "$(frontend)" || ! "$(backend)" {
      errors.error "an internal error." ;
    }
    if "$(frontend)" in clang-latest clang-trunk clang-$(.clang-versions) {
      if [ is-gcc "$(backend)" ] {
        result = yes ;
      }
      else {
        errors.error "an internal error." ;
      }
    }
    else {
      errors.error "an internal error." ;
    }
  }
  return $(result) ;
}

rule is-icc ( compiler )
{
  if ! [ is-valid "$(compiler)" ] {
    errors.error "an internal error." ;
  }
  local result ;
  if [ regex.match "^(icc-.+)" : "$(compiler)" : 1 ] {
    local tmp = [ regex.match "^icc-(.+)-libstdc\\+\\+-(.+)" : "$(compiler)" : 1 2 ] ;
    local frontend = "icc-$(tmp[1])" ;
    local backend = "gcc-$(tmp[2])" ;
    if ! "$(frontend)" || ! "$(backend)" {
      errors.error "an internal error." ;
    }
    if "$(frontend)" in icc-system {
      if [ is-gcc "$(backend)" ] {
        result = yes ;
      }
      else {
        errors.error "an internal error." ;
      }
    }
    else {
      errors.error "an internal error." ;
    }
  }
  return $(result) ;
}

rule split-frontend-and-backend ( compiler )
{
  if ! [ is-valid "$(compiler)" ] {
    errors.error "an internal error." ;
  }
  local result ;
  if [ is-gcc "$(compiler)" ] {
    result += "$(compiler)" ;
  }
  else if [ is-clang "$(compiler)" ] {
    local tmp = [ regex.match "^clang-(.+)-libstdc\\+\\+-(.+)" : "$(compiler)" : 1 2 ] ;
    result += "clang-$(tmp[1])" ;
    result += "gcc-$(tmp[2])" ;
  }
  else if [ is-icc "$(compiler)" ] {
    local tmp = [ regex.match "^icc-(.+)-libstdc\\+\\+-(.+)" : "$(compiler)" : 1 2 ] ;
    result += "icc-$(tmp[1])" ;
    result += "gcc-$(tmp[2])" ;
  }
  else {
    errors.error "an internal error." ;
  }
  return $(result) ;
}

rule get-prefix-leaf ( properties * )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  if ! [ is-valid "$(compiler)" ] {
    errors.error "an internal error." ;
  }
  return "$(compiler)" ;
}

rule get-compiler-prefix ( prefix : properties * )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  if ! [ is-valid "$(compiler)" ] {
    errors.error "an internal error" ;
  }
  local prefix-leaf = [ get-prefix-leaf $(properties) ] ;
  return "$(prefix)/$(prefix-leaf)" ;
}

rule get-backend-gcc ( compiler )
{
  if ! [ is-clang "$(compiler)" ] && ! [ is-icc "$(compiler)" ] {
    errors.error "an internal error." ;
  }
  local frontend-and-backend = [ split-frontend-and-backend "$(compiler)" ] ;
  local backend = "$(frontend-and-backend[2])" ;
  if ! "$(backend)" {
    errors.error "an internal error." ;
  }
  return "$(backend)" ;
}

rule get-gcc-path ( prefix : compiler : gcc-for-clang ? )
{
  local result ;
  if [ is-gcc $(compiler) ]
  {
    if $(gcc-for-clang)
    {
      errors.error "an internal error." ;
    }
    local prefix-leaf = [ get-prefix-leaf $(compiler) : $(gcc-for-clang) ] ;
    local compiler-prefix = "$(prefix)/$(prefix-leaf)" ;
    result = "$(compiler-prefix)/bin/gcc-wrapper" ;
  }
  else if [ is-clang $(compiler) ]
  {
    if ! $(gcc-for-clang)
    {
      errors.error "an internal error." ;
    }
    local prefix-leaf = [ get-prefix-leaf $(compiler) : $(gcc-for-clang) ] ;
    local compiler-prefix = "$(prefix)/$(prefix-leaf)" ;
    result = "$(compiler-prefix)/bin/gcc-wrapper" ;
  }
  else
  {
    errors.error "`<compiler-hidden>$(compiler)' is not valid." ;
  }
  return $(result) ;
}

rule get-compiler-description ( compiler )
{
  if ! [ is-valid "$(compiler)" ] {
    errors.error "an internal error." ;
  }
  local result ;
  if [ is-gcc "$(compiler)" ] {
    local version = [ get-frontend-version "$(compiler)" ] ;
    result = "GCC $(version)" ;
  }
  else if [ is-clang "$(compiler)" ] {
    if [ regex.match "^(clang-trunk-.+)" : "$(compiler)" : 1 ] {
      local backend-version = [ get-backend-version "$(compiler)" ] ;
      result = "Clang trunk + libstdc++ $(backend-version)" ;
    }
    else if [ regex.match "^(clang-.+)" : "$(compiler)" : 1 ] {
      local frontend-version = [ get-frontend-version "$(compiler)" ] ;
      local backend-version = [ get-backend-version "$(compiler)" ] ;
      result = "Clang $(frontend-version) + libstdc++ $(backend-version)" ;
    }
    else {
      errors.error "an internal error." ;
    }
  }
  else if [ is-icc "$(compiler)" ] {
    if [ regex.match "^(icc-system-.+)" : "$(compiler)" : 1 ] {
      local frontend-version = [ get-frontend-version "$(compiler)" ] ;
      local backend-version = [ get-backend-version "$(compiler)" ] ;
      result = "ICC $(frontend-version) + libstdc++ $(backend-version)" ;
    }
    else {
      errors.error "an internal error." ;
    }
  }
  else {
    errors.error "an internal error." ;
  }
  return "$(result)" ;
}

rule get-default-bits ( )
{
  local bits = [ SHELL "{ file --dereference /bin/sh | grep -Fq '64-bit'; } && echo -n 64 || echo -n 32" ] ;
  if "$(bits)" != "64" && "$(bits)" != "32" {
    errors.error "an internal error." ;
  }
  return $(bits) ;
}

rule get-default-bindir ( prefix : properties * )
{
  local compiler-prefix = [ get-compiler-prefix "$(prefix)" : $(properties) ] ;
  return "$(compiler-prefix)/bin" ;
}

rule get-default-libdir ( prefix : properties * )
{
  local build-os = [ feature.get-values <host-os> : [ feature.defaults <host-os> ] ] ;
  local system-bits = [ get-default-bits ] ;
  local host-os = [ feature.get-values <host-os> : $(properties) ] ;
  local target-os = [ feature.get-values <target-os> : $(properties) ] ;
  local multitarget = [ feature.get-values <multitarget-hidden> : $(properties) ] ;
  local address-model = [ feature.get-values <intro-address-model-hidden> : $(properties) ] ;
  local result ;
  if "$(multitarget)" = "yes" {
    if "$(build-os)" != "linux" {
      errors.error "an internal error." ;
    }
    if "$(system-bits)" != "64" {
      errors.error "an internal error." ;
    }
    if "$(host-os)" != "linux" {
      errors.error "an internal error." ;
    }
    if "$(target-os)" != "linux" {
      errors.error "an internal error." ;
    }
    if "$(address-model)" = "unspecified" {
      result = "lib64" ;
    }
    else if "$(address-model)" = "32" {
      result = "lib" ;
    }
    else {
      errors.error "an internal error." ;
    }
  }
  else {
    result = "lib" ;
  }
  local compiler-prefix = [ get-compiler-prefix "$(prefix)" : $(properties) ] ;
  result = "$(compiler-prefix)/$(result)" ;
  return "$(result)" ;
}

rule get-default-debug-libdir ( prefix : properties * )
{
  local default-libdir = [ get-default-libdir "$(prefix)" : $(properties) ] ;
  return "$(default-libdir)/debug" ;
}

rule get-default-includedir ( prefix : properties * )
{
  local compiler-prefix = [ get-compiler-prefix "$(prefix)" : $(properties) ] ;
  return "$(compiler-prefix)/include" ;
}

rule get-compiler-triplets ( properties * )
{
  local build-os = [ feature.get-values <host-os> : [ feature.defaults <host-os> ] ] ;
  local default-bits = [ get-default-bits ] ;
  local host-os = [ feature.get-values <host-os> : $(properties) ] ;
  local target-os = [ feature.get-values <target-os> : $(properties) ] ;
  local multitarget = [ feature.get-values <multitarget> : $(properties) ] ;
  local address-model = [ feature.get-values <intro-address-model> : $(properties) ] ;
  local build-triplet ;
  local host-triplet ;
  local target-triplet ;
  local enabled-targets ;
  if "$(build-os)" = "linux" {
    if "$(default-bits)" = "64" {
      build-triplet = "x86_64-unknown-linux-gnu" ;
      if "$(host-os)" = "linux" {
        host-triplet = "x86_64-unknown-linux-gnu" ;
        if "$(target-os)" = "linux" {
          if "$(multitarget)" = "yes" {
            if "$(address-model)" = "unspecified" {
              target-triplet = "x86_64-unknown-linux-gnu" ;
              enabled-targets = "x86_64-unknown-linux-gnu,i686-pc-linux-gnu" ;
            }
            else { # `$(address-model)' is other than `unspecified'.
              errors.error "an internal error." ;
            }
          }
          else if "$(multitarget)" = "no" {
            if "$(address-model)" = "unspecified" {
              target-triplet = "x86_64-unknown-linux-gnu" ;
              enabled-targets = "x86_64-unknown-linux-gnu" ;
            }
            else { # `$(address-model)' is other than `unspecified'.
              errors.error "an internal error." ;
            }
          }
          else { # `$(multitarget)' is neither `yes' nor `no'.
            errors.error "an internal error." ;
          }
        }
        else if "$(target-os)" = "windows" {
          if "$(multitarget)" = "no" {
            if "$(address-model)" = "64" {
              target-triplet = "x86_64-w64-mingw32" ;
              enabled-targets = "x86_64-w64-mingw32" ;
            }
            else if "$(address-model)" = "32" {
              target-triplet = "i686-w64-mingw32" ;
              enabled-targets = "i686-w64-mingw32" ;
            }
            else { # `$(address-model)' is neither `64' nor `32'.
              errors.error "an internal error." ;
            }
          }
          else { # `$(multitarget)' is other than `no'.
            errors.error "an internal error." ;
          }
        }
        else if "$(target-os)" = "cygwin" {
          if "$(multitarget)" = "no" {
            if "$(address-model)" = "unspecified" {
              target-triplet = "i686-pc-cygwin" ;
              enabled-targets = "i686-pc-cygwin" ;
            }
            else { # `$(address-model)' is other than `unspecified'.
              errors.error "an internal error." ;
            }
          }
          else { # `$(multitarget)' is other than `no'.
            errors.error "an internal error." ;
          }
        }
        else { # `$(target-os)' is neither `linux', `windows' nor `cygwin'.
          errors.error "an internal error." ;
        }
      }
      else if "$(host-os)" = "windows" {
        if "$(target-os)" = "windows" {
          if "$(multitarget)" = "no" {
            if "$(address-model)" = "64" {
              host-triplet = "x86_64-w64-mingw32" ;
              target-triplet = "x86_64-w64-mingw32" ;
              enabled-targets = "x86_64-w64-mingw32" ;
            }
            else if "$(address-model)" = "32" {
              host-triplet = "i686-w64-mingw32" ;
              target-triplet = "i686-w64-mingw32" ;
              enabled-targets = "i686-w64-mingw32" ;
            }
            else { # `$(address-model)' is neither `64' nor `32'.
              errors.error "an internal error." ;
            }
          }
          else { # `$(multitarget)' is other than `no'.
            errors.error "an internal error." ;
          }
        }
        else { # `$(target-os)' is other than `windows'.
          errors.error "an internal error." ;
        }
      }
      else if "$(host-os)" = "cygwin" {
        host-triplet = "i686-pc-cygwin" ;
        if "$(target-os)" = "cygwin" {
          if "$(multitarget)" = "no" {
            if "$(address-model)" = "unspecified" {
              target-triplet = "i686-pc-cygwin" ;
              enabled-targets = "i686-pc-cygwin" ;
            }
            else { # `$(address-model)' is other than `unspecified'.
              errors.error "an internal error." ;
            }
          }
          else { # `$(multitarget)' is other than `no'.
            errors.error "an internal error." ;
          }
        }
        else { # `$(target-os)' is other than `cygwin'.
          errors.error "an internal error." ;
        }
      }
      else { # `$(host-os)' is neither `linux', `windows' nor `cygwin'.
        errors.error "an internal error." ;
      }
    }
    else if "$(default-bits)" = "32" {
      build-triplet = "i686-pc-linux-gnu" ;
      if "$(host-os)" = "linux" {
        host-triplet = "i686-pc-linux-gnu" ;
        if "$(target-os)" = "linux" {
          if "$(multitarget)" = "no" {
            if "$(address-model)" = "unspecified" {
              target-triplet = "i686-pc-linux-gnu" ;
              enabled-targets = "i686-pc-linux-gnu" ;
            }
            else { # `$(address-model)' is other than `unspecified'.
              errors.error "an internal error." ;
            }
          }
          else { # `$(multitarget)' is other than `no'.
            errors.error "an internal error." ;
          }
        }
        else if "$(target-os)" = "windows" {
          if "$(multitarget)" = "no" {
            if "$(address-model)" = "32" {
              target-triplet = "i686-w64-mingw32" ;
              enabled-targets = "i686-w64-mingw32" ;
            }
            else if "$(address-model)" = "64" {
              target-triplet = "x86_64-w64-mingw32" ;
              enabled-targets = "x86_64-w64-mingw32" ;
            }
            else { # `$(address-model)' is neither `32' nor `64'.
              errors.error "an internal error." ;
            }
          }
          else { # `$(multitarget)' is other than `no'.
            errors.error "an internal error." ;
          }
        }
        else if "$(target-os)" = "cygwin" {
          if "$(multitarget)" = "no" {
            if "$(address-model)" = "unspecified" {
              target-triplet = "i686-pc-cygwin" ;
              enabled-targets = "i686-pc-cygwin" ;
            }
            else { # `$(address-model)' is other than `unspecified'.
              errors.error "an internal error." ;
            }
          }
          else { # `$(multitarget)' is other than `no'.
            errors.error "an internal error." ;
          }
        }
        else { # `$(target-os)' is neither `linux', `windows' nor `cygwin'.
          errors.error "an internal error." ;
        }
      }
      else if "$(host-os)" = "windows" {
        if "$(target-os)" = "windows" {
          if "$(multitarget)" = "no" {
            if "$(address-model)" = "32" {
              host-triplet = "i686-w64-mingw32" ;
              target-triplet = "i686-w64-mingw32" ;
              enabled-targets = "i686-w64-mingw32" ;
            }
            else if "$(address-model)" = "64" {
              host-triplet = "x86_64-w64-mingw32" ;
              target-triplet = "x86_64-w64-mingw32" ;
              enabled-targets = "x86_64-w64-mingw32" ;
            }
            else { # `$(address-model)' is neither `32' nor `64'.
              errors.error "an internal error." ;
            }
          }
          else { # `$(multitarget)' is other than `no'.
            errors.error "an internal error." ;
          }
        }
        else { # `$(target-os)' is other than `windows'.
          errors.error "an internal error." ;
        }
      }
      else if "$(host-os)" = "cygwin" {
        host-triplet = "i686-pc-cygwin" ;
        if "$(target-os)" = "cygwin" {
          if "$(multitarget)" = "no" {
            if "$(address-model)" = "unspecified" {
              target-triplet = "i686-pc-cygwin" ;
              enabled-targets = "i686-pc-cygwin" ;
            }
            else { # `$(address-model)' is other than `unspecified'.
              errors.error "an internal error." ;
            }
          }
          else { # `$(multitarget)' is other than `no'.
            errors.error "an internal error." ;
          }
        }
        else { # `$(target-os)' is other than `cygwin'.
          errors.error "an internal error." ;
        }
      }
      else { # `$(host-os)' is neither `linux', `windows' nor `cygwin'.
        errors.error "an internal error." ;
      }
    }
    else { # `$(default-bits)' is neither `64' nor `32'.
      errors.error "an internal error." ;
    }
  }
  else if "$(build-os)" = "windows" {
    if "$(default-bits)" = "64" {
      build-triplet = "x86_64-w64-mingw32" ;
      if "$(host-os)" = "windows" {
        host-triplet = "x86_64-w64-mingw32" ;
        if "$(target-os)" = "windows" {
          if "$(multitarget)" = "no" {
            if "$(address-model)" = "unspecified" {
              target-triplet = "x86_64-w64-mingw32" ;
              enabled-targets = "x86_64-w64-mingw32" ;
            }
            else { # `$(address-model)' is other than `unspecified'.
              errors.error "an internal error." ;
            }
          }
          else { # `$(multitarget)' is other than `no'.
            errors.error "an internal error." ;
          }
        }
        else { # `$(target-os)' is other than `windows'.
          errors.error "an internal error." ;
        }
      }
      else { # `$(host-os)' is other than `windows'.
        errors.error "an internal error." ;
      }
    }
    else if "$(default-bits)" = "32" {
      build-triplet = "i686-w64-mingw32" ;
      if "$(host-os)" = "windows" {
        host-triplet = "i686-w64-mingw32" ;
        if "$(target-os)" = "windows" {
          if "$(multitarget)" = "no" {
            if "$(address-model)" = "unspecified" {
              target-triplet = "i686-w64-mingw32" ;
              enabled-targets = "i686-w64-mingw32" ;
            }
            else { # `$(address-model)' is other than `unspecified'.
              errors.error "an internal error." ;
            }
          }
          else { # `$(multitarget)' is other than `no'.
            errors.error "an internal error." ;
          }
        }
        else { # `$(target-os)' is other than `windows'.
          errors.error "an internal error." ;
        }
      }
      else { # `$(host-os)' is other than `windows'.
        errors.error "an internal error." ;
      }
    }
    else { # `$(default-bits)' is neither `64' nor `32'.
      errors.error "an internal error." ;
    }
  }
  else if "$(build-os)" = "cygwin" {
    if "$(default-bits)" = "32" {
      build-triplet = "i686-pc-cygwin" ;
      if "$(host-os)" = "cygwin" {
        host-triplet = "i686-pc-cygwin" ;
        if "$(target-os)" = "cygwin" {
          if "$(multitarget)" = "no" {
            if "$(address-model)" = "unspecified" {
              target-triplet = "i686-pc-cygwin" ;
              enabled-targets = "i686-pc-cygwin" ;
            }
            else { # `$(address-model)' is other than `unspecified'.
              errors.error "an internal error." ;
            }
          }
          else { # `$(multitarget)' is other than `no'.
            errors.error "an internal error." ;
          }
        }
        else { # `$(target-os)' is other than `cygwin'.
          errors.error "an internal error." ;
        }
      }
      else { # `$(host-os)' is other than `cygwin'.
        errors.error "an internal error." ;
      }
    }
    else { # `$(default-bits)' is other than `32'.
      errors.error "an internal error." ;
    }
  }
  else { # `$(build-os)' is neither `linux', `windows' nor `cygwin'.
    errors.error "an internal error." ;
  }
  if ! "$(build-triplet)" {
    errors.error "an internal error." ;
  }
  if ! "$(host-triplet)" {
    errors.error "an internal error." ;
  }
  if ! "$(target-triplet)" {
    errors.error "an internal error." ;
  }
  if ! "$(enabled-targets)" {
    errors.error "an internal error." ;
  }
  if "$(build-triplet)" != "$(host-triplet)" && "$(host-triplet)" != "$(target-triplet)" {
    errors.error "an internal error." ;
  }
  return $(build-triplet) $(host-triplet) $(target-triplet) $(enabled-targets) ;
}

rule normalize-properties ( properties * )
{
  local address-model = [ feature.get-values <intro-address-model> : $(properties) ] ;
  local instruction-set = [ feature.get-values <intro-instruction-set> : $(properties) ] ;
  local multitarget = [ feature.get-values <multitarget> : $(properties) ] ;
  properties = [ property.change $(properties) : <intro-address-model> ] ;
  if "$(address-model)" {
    properties = [ property.change $(properties) : <address-model> $(address-model) ] ;
  }
  properties = [ property.change $(properties) : <intro-instruction-set-hidden> ] ;
  properties = [ property.change $(properties) : <intro-instruction-set> ] ;
  if "$(instruction-set)" != "unspecified" {
    properties += "<instruction-set>$(instruction-set)" ;
  }
  properties = [ property.change $(properties) : <toolset> ] ;
  properties = [ property.change $(properties) : <location> ] ;
  properties = [ property.change $(properties) : <conditional> ] ;
  properties = [ property.change $(properties) : <action> ] ;
  properties = [ property.change $(properties) : <compiler> ] ;
  properties = [ property.change $(properties) : <compiler-hidden> ] ;
  properties = [ property.change $(properties) : <multitarget> ] ;
  properties = [ property.change $(properties) : <multitarget-hidden> ] ;
  properties = [ property.change $(properties) : <binutils-hidden> ] ;
  properties = [ property.change $(properties) : <binutils> ] ;
  properties = [ property.change $(properties) : <gmp-for-gcc-hidden> ] ;
  properties = [ property.change $(properties) : <gmp-for-gcc> ] ;
  properties = [ property.change $(properties) : <mpfr-for-gcc-hidden> ] ;
  properties = [ property.change $(properties) : <mpfr-for-gcc> ] ;
  properties = [ property.change $(properties) : <mpc-for-gcc-hidden> ] ;
  properties = [ property.change $(properties) : <mpc-for-gcc> ] ;
  properties = [ property.change $(properties) : <isl-for-gcc-hidden> ] ;
  properties = [ property.change $(properties) : <isl-for-gcc> ] ;
  properties = [ property.change $(properties) : <cloog-for-gcc-hidden> ] ;
  properties = [ property.change $(properties) : <cloog-for-gcc> ] ;
  properties = [ property.change $(properties) : <gmp-hidden> ] ;
  properties = [ property.change $(properties) : <gmp> ] ;
  properties = [ property.change $(properties) : <mpfr-hidden> ] ;
  properties = [ property.change $(properties) : <mpfr> ] ;
  properties = [ property.change $(properties) : <mpc-hidden> ] ;
  properties = [ property.change $(properties) : <mpc> ] ;
  properties = [ property.change $(properties) : <isl-hidden> ] ;
  properties = [ property.change $(properties) : <isl> ] ;
  properties = [ property.change $(properties) : <cloog-hidden> ] ;
  properties = [ property.change $(properties) : <cloog> ] ;
  properties = [ property.change $(properties) : <ppl-hidden> ] ;
  properties = [ property.change $(properties) : <ppl> ] ;
  properties = [ property.change $(properties) : <icu4c-hidden> ] ;
  properties = [ property.change $(properties) : <icu4c> ] ;
  properties = [ property.change $(properties) : <openmpi-hidden> ] ;
  properties = [ property.change $(properties) : <openmpi> ] ;
  properties = [ property.change $(properties) : <mpi-backend-hidden> ] ;
  properties = [ property.change $(properties) : <mpi-backend> ] ;
  properties = [ property.change $(properties) : <boost-hidden> ] ;
  properties = [ property.change $(properties) : <boost> ] ;
  properties = [ property.change $(properties) : <clang-hidden> ] ;
  properties = [ property.change $(properties) : <clang> ] ;
  properties = [ property.change $(properties) : <valgrind-hidden> ] ;
  properties = [ property.change $(properties) : <valgrind> ] ;
  return $(properties) ;
}

rule get-bindir ( prefix : properties * )
{
  local result = [ get-default-bindir "$(prefix)" : $(properties) ] ;
  properties = [ normalize-properties $(properties) ] ;
  local property-path = [ property.as-path $(properties) ] ;
  result = "$(result)/$(property-path)" ;
  return "$(result)" ;
}

rule get-libdir ( prefix : properties * )
{
  local result = [ get-default-libdir "$(prefix)" : $(properties) ] ;
  properties = [ normalize-properties $(properties) ] ;
  local property-path = [ property.as-path $(properties) ] ;
  result = "$(result)/$(property-path)" ;
  return "$(result)" ;
}

rule get-includedir ( prefix : properties * )
{
  local result = [ get-default-includedir "$(prefix)" : $(properties) ] ;
  properties = [ normalize-properties $(properties) ] ;
  local property-path = [ property.as-path $(properties) ] ;
  result = "$(result)/$(property-path)" ;
  return "$(result)" ;
}

rule get-triplets ( properties * )
{
  local build-os = [ feature.get-values <host-os> : [ feature.defaults <host-os> ] ] ;
  local default-bits = [ get-default-bits ] ;
  local host-os = [ feature.get-values <host-os> : $(properties) ] ;
  local target-os = [ feature.get-values <target-os> : $(properties) ] ;
  local multitarget = [ feature.get-values <multitarget> : $(properties) ] ;
  local address-model = [ feature.get-values <intro-address-model> : $(properties) ] ;
  local build-triplet ;
  local host-triplet ;
  if "$(build-os)" = "linux" {
    if "$(default-bits)" = "64" {
      if "$(host-os)" = "linux" {
        build-triplet = "x86_64-unknown-linux-gnu" ;
        if "$(target-os)" = "linux" {
          if "$(multitarget)" = "yes" {
            if "$(address-model)" = "unspecified" {
              host-triplet = "x86_64-unknown-linux-gnu" ;
            }
            else if "$(address-model)" = "32" {
              host-triplet = "i686-pc-linux-gnu" ;
            }
            else { # `$(address-model)' is neither `unspecified' nor `32'.
              errors.error "an internal error." ;
            }
          }
          else if "$(multitarget)" = "no" {
            if "$(address-model)" = "unspecified" {
              host-triplet = "x86_64-unknown-linux-gnu" ;
            }
            else { # `$(address-model)' is other than `unspecified'.
              errors.error "an internal error." ;
            }
          }
          else { # `$(multitarget)' is neither `yes' nor `no'.
            errors.error "an internal error." ;
          }
        }
        else if "$(target-os)" = "windows" {
          if "$(multitarget)" = "no" {
            if "$(address-model)" = "64" {
              host-triplet = "x86_64-w64-mingw32" ;
            }
            else if "$(address-model)" = "32" {
              host-triplet = "i686-w64-mingw32" ;
            }
            else { # `$(address-model)' is neither `64' nor `32'.
              errors.error "an internal error." ;
            }
          }
          else { # `$(multitarget)' is other than `no'.
            errors.error "an internal error." ;
          }
        }
        else if "$(target-os)" = "cygwin" {
          if "$(multitarget)" = "no" {
            if "$(address-model)" = "unspecified" {
              host-triplet = "i686-pc-cygwin" ;
            }
            else { # `$(address-model)' is other than `unspecified'.
              errors.error "an internal error." ;
            }
          }
          else { # `$(multitarget)' is other than `no'.
            errors.error "an internal error." ;
          }
        }
        else { # `$(target-os)' is neither `linux', `windows' nor `cygwin'.
          errors.error "an internal error." ;
        }
      }
      else { # `$(host-os)' is other than `linux'.
        errors.error "an internal error." ;
      }
    }
    else if "$(default-bits)" = "32" {
      if "$(host-os)" = "linux" {
        build-triplet = "i686-pc-linux-gnu" ;
        if "$(target-os)" = "linux" {
          if "$(multitarget)" = "no" {
            if "$(address-model)" = "unspecified" {
              host-triplet = "i686-pc-linux-gnu" ;
            }
            else { # `$(address-model)' is other than `unspecified'.
              errors.error "an internal error." ;
            }
          }
          else { # `$(multitarget)' is other than `no'.
            errors.error "an internal error." ;
          }
        }
        else if "$(target-os)" = "windows" {
          if "$(multitarget)" = "no" {
            if "$(address-model)" = "32" {
              host-triplet = "i686-w64-mingw32" ;
            }
            else if "$(address-model)" = "64" {
              host-triplet = "x86_64-w64-mingw32" ;
            }
            else { # `$(address-model)' is neither `32' nor `64'.
              errors.error "an internal error." ;
            }
          }
          else { # `$(multitarget)' is other than `no'.
            errors.error "an internal error." ;
          }
        }
        else if "$(target-os)" = "cygwin" {
          if "$(multitarget)" = "no" {
            if "$(address-model)" = "unspecified" {
              host-triplet = "i686-pc-cygwin" ;
            }
            else { # `$(address-model)' is other than `unspecified'.
              errors.error "an internal error." ;
            }
          }
          else { # `$(multitarget)' is other than `no'.
            errors.error "an internal error." ;
          }
        }
        else { # `$(target-os)' is neither `linux', `windows' nor `cygwin'.
          errors.error "an internal error." ;
        }
      }
      else { # `$(host-os)' is other than `linux'.
        errors.error "an internal error." ;
      }
    }
    else { # `$(default-bits)' is neither `64' nor `32'.
      errors.error "an internal error." ;
    }
  }
  else if "$(build-os)" = "windows" {
    if "$(default-bits)" = "64" {
      if "$(host-os)" = "windows" {
        build-triplet = "x86_64-w64-mingw32" ;
        if "$(target-os)" = "windows" {
          if "$(multitarget)" = "no" {
            if "$(address-model)" = "unspecified" {
              host-triplet = "x86_64-w64-mingw32" ;
            }
            else { # `$(address-model)' is other than `unspecified'.
              errors.error "an internal error." ;
            }
          }
          else { # `$(multitarget)' is other than `no'.
            errors.error "an internal error." ;
          }
        }
        else { # `$(target-os)' is other than `windows'.
          errors.error "an internal error." ;
        }
      }
      else { # `$(host-os)' is other than `windows'.
        errors.error "an internal error." ;
      }
    }
    else if "$(default-bits)" = "32" {
      if "$(host-os)" = "windows" {
        build-triplet = "i686-w64-mingw32" ;
        if "$(target-os)" = "windows" {
          if "$(multitarget)" = "no" {
            if "$(address-model)" = "unspecified" {
              host-triplet = "i686-w64-mingw32" ;
            }
            else { # `$(address-model)' is other than `unspecified'.
              errors.error "an internal error." ;
            }
          }
          else { # `$(multitarget)' is other than `no'.
            errors.error "an internal error." ;
          }
        }
        else { # `$(target-os)' is other than `windows'.
          errors.error "an internal error." ;
        }
      }
      else { # `$(host-os)' is other than `windows'.
        errors.error "an internal error." ;
      }
    }
    else { # `$(default-bits)' is neither `64' nor `32'.
      errors.error "an internal error." ;
    }
  }
  else if "$(build-os)" = "cygwin" {
    if "$(default-bits)" = "32" {
      if "$(host-os)" = "cygwin" {
        build-triplet = "i686-pc-cygwin" ;
        if "$(target-os)" = "cygwin" {
          if "$(multitarget)" = "no" {
            if "$(address-model)" = "unspecified" {
              host-triplet = "i686-pc-cygwin" ;
            }
            else { # `$(address-model)' is other than `unspecified'.
              errors.error "an internal error." ;
            }
          }
          else { # `$(multitarget)' is other than `no'.
            errors.error "an internal error." ;
          }
        }
        else { # `$(target-os)' is other than `cygwin'.
          errors.error "an internal error." ;
        }
      }
      else { # `$(host-os)' is other than `cygwin'.
        errors.error "an internal error." ;
      }
    }
    else { # `$(default-bits)' is other than `32'.
      errors.error "an internal error." ;
    }
  }
  else { # `$(build-os)' is neither `linux', `windows' nor `cygwin'.
    errors.error "an internal error." ;
  }
  if ! $(build-triplet) {
    errors.error "an internal error." ;
  }
  if ! $(host-triplet) {
    errors.error "an internal error." ;
  }
  return $(build-triplet) $(host-triplet) ;
}

rule get-cc ( prefix : properties * : gcc-for-clang ? )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  if ! [ is-valid "$(compiler)" ] {
    errors.error "an internal error." ;
  }
  local prefix-leaf = [ get-prefix-leaf $(properties) ] ;
  local compiler-prefix = "$(prefix)/$(prefix-leaf)" ;
  local result ;
  if ! [ is-builtin-gcc "$(compiler)" ] {
    if [ is-gcc "$(compiler)" ] {
      result = "$(compiler-prefix)/bin/gcc-wrapper" ;
    }
    else if [ is-clang "$(compiler)" ] {
      result = "$(compiler-prefix)/bin/clang-wrapper" ;
    }
    else if [ is-icc "$(compiler)" ] {
      result = "$(compiler-prefix)/bin/icc-wrapper" ;
    }
    else {
      errors.error "an internal error." ;
    }
  }
  return "$(result)" ;
}

rule get-cflags ( properties * )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  local result ;

  local variant = [ feature.get-values <variant> : $(properties) ] ;
  if "$(variant)" = "debug" {
    result += "-O0" ;
    result += "-g" ;
    if [ is-gcc "$(compiler)" ] {
      result += "-fvar-tracking" ;
      result += "-fvar-tracking-assignments" ;
    }
    else if [ is-clang "$(compiler)" ] {
      # Do nothing.
    }
    else if [ is-icc "$(compiler)" ] {
      result += "-debug full" ;
    }
    else {
      errors.error "an internal error." ;
    }
    result += "-fno-inline" ;
    result += "-rdynamic" ;
  }
  else if "$(variant)" = "release" {
    result += "-O3" ;
    result += "-finline-functions" ;
    result += "-Wno-inline" ;
  }
  else if "$(variant)" = "profile" {
    result += "-O3" ;
    result += "-finline-functions" ;
    result += "-Wno-inline" ;
    result += "-g" ;
    result += "-pg" ;
  }
  else {
    errors.error "an internal error" ;
  }

  local address-model = [ feature.get-values <intro-address-model-hidden> : $(properties) ] ;
  if "$(address-model)" = "unspecified" {
    # Do nothing.
  }
  else if "$(address-model)" = "64" {
    result += "-m64" ;
  }
  else if "$(address-model)" = "32" {
    result += "-m32" ;
  }
  else {
    errors.error "an internal error." ;
  }

  local instruction-set = [ feature.get-values <intro-instruction-set-hidden> : $(properties) ] ;
  if "$(instruction-set)" = "unspecified" {
    # Do nothing.
  }
  else if "$(instruction-set)" = "native" {
    if [ is-gcc "$(compiler)" ] || [ is-clang "$(compiler)" ] {
      result += "-march=native" ;
      result += "-mtune=native" ;
    }
    else if [ is-icc "$(compiler)" ] {
      result += "-xHost" ;
    }
    else {
      errors.error "an internal error." ;
    }
  }
  else {
    errors.error "an internal error." ;
  }

  local lto = [ feature.get-values <lto> : $(properties) ] ;
  if "$(lto)" = "off" {
    # Do nothing.
  }
  else if "$(lto)" = "on" {
    if [ is-gcc "$(compiler)" ] || [ is-clang "$(compiler)" ] {
      result += "-flto" ;
    }
    else if [ is-icc "$(compiler)" ] {
      result += "-ipo" ;
    }
    else {
      errors.error "an internal error." ;
    }
  }
  else {
    errors.error "an internal error." ;
  }

  local correct-call-stack = [ feature.get-values <correct-call-stack> : $(properties) ] ;
  if "$(correct-call-stack)" = "off" {
    # Do nothing.
  }
  else if "$(correct-call-stack)" = "on" {
    result += "-fno-omit-frame-pointer" ;
    result += "-fno-optimize-sibling-calls" ;
  }
  else {
    errors.error "an internal error." ;
  }

  local ssp = [ feature.get-values <ssp> : $(properties) ] ;
  if "$(ssp)" = "off" {
    # Do nothing.
  }
  else if "$(ssp)" = "on" {
    result += "-fstack-protector" ;
  }
  else if "$(ssp)" = "all" {
    result += "-fstack-protector-all" ;
  }
  else {
    errors.error "an internal error." ;
  }

  local memory-checker = [ feature.get-values <memory-checker> : $(properties) ] ;
  if "$(memory-checker)" = "off" {
    # Do nothing.
  }
  else if "$(memory-checker)" = "on" {
    if [ is-gcc "$(compiler)" ] {
      local threading = [ feature.get-values <threading> : $(properties) ] ;
      if "$(threading)" = "single" {
        result += "-fmudflap" ;
        result += "-lmudflap" ;
      }
      else if "$(threading)" = "multi" {
        result += "-fmudflapth" ;
        result += "-lmudflapth" ;
        result += "-pthread" ;
      }
      else {
        errors.error "an internal error." ;
      }
    }
    else if [ is-clang "$(compiler)" ] {
      result += "-faddress-sanitizer" ;
    }
    else if [ is-icc "$(compiler)" ] {
      result += "-ftrapuv" ;
      result += "-check-pointers=rw" ;
      result += "-check-pointers-dangling=all" ;
      result += "-check-pointers-undimensioned" ;
    }
    else {
      errors.error "an internal error." ;
    }
  }
  else {
    errors.error "an internal error." ;
  }

  return "$(result:J= )" ;
}

rule get-cxx ( prefix : properties * : gcc-for-clang ? )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  if ! [ is-valid "$(compiler)" ] {
    errors.error "an internal error." ;
  }
  local prefix-leaf = [ get-prefix-leaf $(properties) ] ;
  local compiler-prefix = "$(prefix)/$(prefix-leaf)" ;
  local result ;
  if ! [ is-builtin-gcc "$(compiler)" ] {
    if [ is-gcc "$(compiler)" ] {
      result = "$(compiler-prefix)/bin/g++-wrapper" ;
    }
    else if [ is-clang "$(compiler)" ] {
      result = "$(compiler-prefix)/bin/clang++-wrapper" ;
    }
    else if [ is-icc "$(compiler)" ] {
      result = "$(compiler-prefix)/bin/icpc-wrapper" ;
    }
    else {
      errors.error "an internal error." ;
    }
  }
  return "$(result)" ;
}

rule get-cxxflags ( properties * )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  local result ;

  local variant = [ feature.get-values <variant> : $(properties) ] ;
  if "$(variant)" = "debug" {
    result += "-O0" ;
    result += "-g" ;
    if [ is-gcc "$(compiler)" ] {
      result += "-fvar-tracking" ;
      result += "-fvar-tracking-assignments" ;
    }
    else if [ is-clang "$(compiler)" ] {
      # Do nothing.
    }
    else if [ is-icc "$(compiler)" ] {
      result += "-debug full" ;
    }
    else {
      errors.error "an internal error." ;
    }
    result += "-fno-inline" ;
    result += "-rdynamic" ;
  }
  else if "$(variant)" = "release" {
    result += "-O3" ;
    result += "-finline-functions" ;
    result += "-Wno-inline" ;
  }
  else if "$(variant)" = "profile" {
    result += "-O3" ;
    result += "-finline-functions" ;
    result += "-Wno-inline" ;
    result += "-g" ;
    result += "-pg" ;
  }
  else {
    errors.error "an internal error" ;
  }

  local runtime-link = [ feature.get-values <runtime-link> : $(properties) ] ;
  if "$(runtime-link)" = "shared" {
    # Do nothing.
  }
  else if "$(runtime-link)" = "static" {
    result += "-static-libstdc++" ;
  }
  else {
    errors.error "an internal error." ;
  }

  local address-model = [ feature.get-values <intro-address-model-hidden> : $(properties) ] ;
  if "$(address-model)" = "unspecified" {
    # Do nothing.
  }
  else if "$(address-model)" = "64" {
    result += "-m64" ;
  }
  else if "$(address-model)" = "32" {
    result += "-m32" ;
  }
  else {
    errors.error "an internal error." ;
  }

  local instruction-set = [ feature.get-values <intro-instruction-set-hidden> : $(properties) ] ;
  if "$(instruction-set)" = "unspecified" {
    # Do nothing.
  }
  else if "$(instruction-set)" = "native" {
    if [ is-gcc "$(compiler)" ] || [ is-clang "$(compiler)" ] {
      result += "-march=native" ;
      result += "-mtune=native" ;
    }
    else if [ is-icc "$(compiler)" ] {
      result += "-xHost" ;
    }
    else {
      errors.error "an internal error." ;
    }
  }
  else {
    errors.error "an internal error." ;
  }

  local std = [ feature.get-values <std> : $(properties) ] ;
  if "$(std)" = "c++03" {
    if [ is-gcc "$(compiler)" ] || [ is-clang "$(compiler)" ] {
      result += "-std=c++03" ;
    }
    else if [ is-icc "$(compiler)" ] {
      # ICC does not have either `-std=c++98' or `-std=c++03'.
    }
    else {
      errors.error "an internal error." ;
    }
  }
  else if "$(std)" = "c++11" {
    if [ is-gcc "$(compiler)" ] {
      # GCC 4.6.x does not support `-std=c++11'.
      result += "-std=c++0x" ;
    }
    else if [ is-clang "$(compiler)" ] || [ is-icc "$(compiler)" ] {
      result += "-std=c++11" ;
    }
    else {
      errors.error "an internal error." ;
    }
  }
  else {
    errors.error "an internal error." ;
  }

  local lto = [ feature.get-values <lto> : $(properties) ] ;
  if "$(lto)" = "off" {
    # Do nothing.
  }
  else if "$(lto)" = "on" {
    if [ is-gcc "$(compiler)" ] || [ is-clang "$(compiler)" ] {
      result += "-flto" ;
    }
    else if [ is-icc "$(compiler)" ] {
      result += "-ipo" ;
    }
    else {
      errors.error "an internal error." ;
    }
  }
  else {
    errors.error "an internal error." ;
  }

  local correct-call-stack = [ feature.get-values <correct-call-stack> : $(properties) ] ;
  if "$(correct-call-stack)" = "off" {
    # Do nothing.
  }
  else if "$(correct-call-stack)" = "on" {
    result += "-fno-omit-frame-pointer" ;
    result += "-fno-optimize-sibling-calls" ;
  }
  else {
    errors.error "an internal error." ;
  }

  local ssp = [ feature.get-values <ssp> : $(properties) ] ;
  if "$(ssp)" = "off" {
    # Do nothing.
  }
  else if "$(ssp)" = "on" {
    result += "-fstack-protector" ;
  }
  else if "$(ssp)" = "all" {
    result += "-fstack-protector-all" ;
  }
  else {
    errors.error "an internal error." ;
  }

  local memory-checker = [ feature.get-values <memory-checker> : $(properties) ] ;
  if "$(memory-checker)" = "off" {
    # Do nothing.
  }
  else if "$(memory-checker)" = "on" {
    if [ is-gcc "$(compiler)" ] {
      local threading = [ feature.get-values <threading> : $(properties) ] ;
      if "$(threading)" = "single" {
        result += "-fmudflap" ;
        result += "-lmudflap" ;
      }
      else if "$(threading)" = "multi" {
        result += "-fmudflapth" ;
        result += "-lmudflapth" ;
        result += "-pthread" ;
      }
      else {
        errors.error "an internal error." ;
      }
    }
    else if [ is-clang "$(compiler)" ] {
      result += "-faddress-sanitizer" ;
    }
    else if [ is-icc "$(compiler)" ] {
      result += "-ftrapuv" ;
      result += "-check-pointers=rw" ;
      result += "-check-pointers-dangling=all" ;
      result += "-check-pointers-undimensioned" ;
    }
    else {
      errors.error "an internal error." ;
    }
  }
  else {
    errors.error "an internal error." ;
  }

  local libstdcxx-debug-mode = [ feature.get-values <libstdc++-debug-mode> : $(properties) ] ;
  if "$(libstdcxx-debug-mode)" = "off" {
    # Do nothing.
  }
  else if "$(libstdcxx-debug-mode)" = "on" {
    result += "-D_GLIBCXX_DEBUG" ;
    result += "-D_GLIBCXX_DEBUG_PEDANTIC" ;
  }
  else {
    errors.error "an internal error." ;
  }

  return "$(result:J= )" ;
}

rule get-abi-tag ( compiler )
{
  if ! [ is-valid "$(compiler)" ] {
    errors.error "an internal error." ;
  }
  local result ;
  if [ is-gcc "$(compiler)" ] {
    local version = [ get-frontend-version "$(compiler)" ] ;
    local abi-version = [ regex.match "^([0-9]+\\.[0-9]+)" : "$(version)" : 1 ] ;
    local version-tag = [ regex.replace "$(abi-version)" "\\." "" ] ;
    result = "gcc$(version-tag)" ;
  }
  else if [ is-clang "$(compiler)" ] {
    local version = [ get-backend-version "$(compiler)" ] ;
    local abi-version = [ regex.match "^([0-9]+\\.[0-9]+)" : "$(version)" : 1 ] ;
    local version-tag = [ regex.replace "$(abi-version)" "\\." "" ] ;
    result = "gcc$(version-tag)" ;
  }
  return "$(result)" ;
}

rule get-rpath-commands ( prefix : properties * )
{
  local build-triplet = [ get-build-triplet $(properties) ] ;
  local host-triplet = [ get-host-triplet $(properties) ] ;
  local variant = [ feature.get-values <variant> : $(properties) ] ;
  local default-libdir = [ path.native [ get-default-libdir $(properties) ] ] ;
  local default-debug-libdir = [ path.native [ get-default-debug-libdir $(properties) ] ] ;
  local result ;
  if $(build-triplet) = x86_64-unknown-linux-gnu || $(build-triplet) = i686-pc-linux-gnu {
    if $(host-triplet) = $(build-triplet) {
      if $(variant) = debug && "$(default-debug-libdir)" != "$(default-libdir)" {
        result = "LD_RUN_PATH=\"$(default-libdir):$(default-debug-libdir)${LD_RUN_PATH:+:$LD_RUN_PATH}\"" ;
      }
      else {
        result = "LD_RUN_PATH=\"$(default-libdir)${LD_RUN_PATH:+:$LD_RUN_PATH}\"" ;
      }
    }
  }
  return $(result) ;
}

rule get-environment-commands ( prefix : properties * )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  local compiler-prefix = [ get-compiler-prefix "$(prefix)" : $(properties) ] ;
  local variant = [ feature.get-values <variant> : $(properties) ] ;
  local is-debug ;
  if "$(variant)" = "debug" {
    is-debug = "yes" ;
  }
  local default-bindir = "$(compiler-prefix)/bin" ;
  local bindir = [ get-bindir "$(prefix)" : $(properties) ] ;
  local libdir = [ get-libdir "$(prefix)" : $(properties) ] ;
  local default-libdir ;
  if [ regex.match "(/lib64)" : "$(libdir)" : 1 ] {
    default-libdir = "$(compiler-prefix)/lib64" ;
  }
  else {
    default-libdir = "$(compiler-prefix)/lib" ;
  }
  local default-debug-libdir ;
  if "$(is-debug)" {
    default-debug-libdir = "$(default-libdir)/debug" ;
  }
  local includedir = [ get-includedir $(prefix) : $(properties) ] ;
  local triplets = [ get-triplets $(properties) ] ;
  local build-triplet = "$(triplets[1])" ;
  local host-triplet = "$(triplets[2])" ;
  local commands ;
  if "$(build-triplet)" in x86_64-unknown-linux-gnu i686-pc-linux-gnu {
    commands += "PATH=\"$(default-bindir)${PATH:+:$PATH}\"" ;
    commands += "export PATH" ;
    if "$(host-triplet)" in x86_64-unknown-linux-gnu i686-pc-linux-gnu {
      if [ is-icc "$(compiler)" ] {
        if "$(host-triplet)" = "x86_64-unknown-linux-gnu" {
          commands += "LD_LIBRARY_PATH=\"/opt/intel/composerxe/lib/intel64${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}\"" ;
        }
        else if "$(host-triplet)" = "i686-pc-linux-gnu" {
          commands += "LD_LIBRARY_PATH=\"/opt/intel/composerxe/lib/ia32${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}\"" ;
        }
        else {
          errors.error "an internal error." ;
        }
      }
      commands += "LD_LIBRARY_PATH=\"$(default-libdir)${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}\"" ;
      if "$(is-debug)" && "$(default-debug-libdir)" != "$(default-libdir)" {
        commands += "LD_LIBRARY_PATH=\"$(default-debug-libdir):$LD_LIBRARY_PATH\"" ;
      }
      if "$(libdir)" != "$(default-libdir)" && "$(libdir)" != "$(default-debug-libdir)" {
        commands += "LD_LIBRARY_PATH=\"$(libdir):$LD_LIBRARY_PATH\"" ;
      }
    }
    commands += "export LD_LIBRARY_PATH" ;
  }
  else if "$(build-triplet)" in x86_64-w64-mingw32 i686-w64-mingw32 i686-pc-cygwin {
    commands += "PATH=\"$(libdir);$(bindir)${PATH:+;$PATH}\"" ;
    commands += "export PATH" ;
  }
  else {
    errors.error "`--build=$(build-triplet)' is not valid" ;
  }
  commands += "CPATH=\"$(includedir)${CPATH:+:$CPATH}\"" ;
  commands += "export CPATH" ;
  commands += "LIBRARY_PATH=\"$(libdir)${LIBRARY_PATH:+:$LIBRARY_PATH}\"" ;
  commands += "export LIBRARY_PATH" ;
  local memory-checker = [ feature.get-values <memory-checker> : $(properties) ] ;
  local mudflap ;
  if [ is-gcc "$(compiler)" ] && "$(memory-checker)" = "on" {
    mudflap = "on" ;
  }
  if "$(mudflap)" = "on" {
    commands += "MUDFLAP_OPTIONS='-viol-abort -print-leaks -check-initialization'" ;
    commands += "export MUDFLAP_OPTIONS" ;
  }
  local lto = [ feature.get-values <lto> : $(properties) ] ;
  if [ is-icc "$(compiler)" ] {
    commands += "AR='/opt/intel/bin/xiar'" ;
    commands += "export AR" ;
    commands += "LD='/opt/intel/bin/xild'" ;
    commands += "export LD" ;
  }
  commands = "$(commands:J=\n)" ;
  return "$(commands)" ;
}

rule get-property-dump-commands ( properties * )
{
  local result ;
  for local f in compiler
                 multitarget
                 host-os
                 target-os
                 binutils
                 gmp-for-gcc
                 mpfr-for-gcc
                 mpc-for-gcc
                 isl-for-gcc
                 cloog-for-gcc
                 gmp
                 mpfr
                 mpc
                 isl
                 cloog
                 ppl
                 icu4c
                 mpi-backend
                 openmpi
                 boost
                 clang
                 valgrind
                 variant
                 std
                 link
                 runtime-link
                 runtime-debugging
                 optimization
                 profiling
                 inlining
                 threading
                 intro-address-model
                 intro-instruction-set
                 lto
                 correct-call-stack
                 ssp
                 memory-checker
                 libstdc++-debug-mode
  {
    local v = [ feature.get-values "<$(f)>" : $(properties) ] ;
    if ! "$(v)" {
      result += "echo '<$(f)>: '" ;
    }
    else {
      result += "echo '<$(f)>: $(v)'" ;
    }
  }
  return "$(result:J=\n)" ;
}

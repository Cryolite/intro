import common ;
import errors ;
import feature ;
import os ;
import path ;
import property ;
import regex ;


local .root-dir ;

local .gcc-versions ;
local .gcc-current-version ;
local .gcc-previous-version ;
local .gcc-oldest-version ;
local .gcc-snapshot-version ;
local .gcc-current-latest-version ;
local .gcc-previous-snapshot-version ;
local .gcc-oldest-snapshot-version ;

local .clang-versions ;
local .clang-latest-version ;

local .icc-system-version ;


rule init ( root-dir )
{
  if "$(.root-dir)" {
    errors.error "an internal error." ;
  }

  .root-dir = [ path.make "$(root-dir)" ] ;

  .gcc-versions = [ SHELL "\"$(.root-dir)/gcc/versions.sh\" 2> /dev/null || echo -n error" ] ;
  if "$(.gcc-versions)" = "error" {
    errors.error "failed to extract GCC release versions." ;
  }
  .gcc-versions = [ regex.split "$(.gcc-versions)" " +" ] ;

  .clang-versions = [ SHELL "\"$(.root-dir)/clang/versions.sh\" || echo -n error" ] ;
  if "$(.clang-versions)" = "error" {
    errors.error "failed to extract Clang versions." ;
  }
  .clang-versions = [ regex.split "$(.clang-versions)" " +" ] ;
}

rule .init-gcc-release-aliases ( )
{
  if ! "$(.gcc-current-version)" {
    if "$(.gcc-previous-version)" || "$(.gcc-oldest-version)" {
      errors.error "an internal error." ;
    }

    local gcc-recent-majors
      = [ SHELL "echo -n \"$(.gcc-versions:J= )\" \\
                   | grep -Eo \"[[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+\" \\
                   | grep -Eo \"^[[:digit:]]+\\.[[:digit:]]+\" \\
                   | sort -u -t '.' -k 1,1n -k 2,2n \\
                   | tail --lines=3 \\
                   | tr '\\n' ' '" ] ;

    local gcc-current-major
      = [ SHELL "echo -n $(gcc-recent-majors) | tr ' ' '\\n' | tail --lines=1 | tr --delete '\\n'" ] ;
    local gcc-current-version
      = [ SHELL "echo -n $(.gcc-versions:J= ) | grep -Eo \"$(gcc-current-major)\\.[[:digit:]]+\" | sort -u -t '.' -k 1,1n -k 2,2n -k 3,3n | tail --lines=1 | tr --delete '\\n'" ] ;
    .gcc-current-version = $(gcc-current-version) ;

    local gcc-previous-major
      = [ SHELL "echo -n $(gcc-recent-majors) | tr ' ' '\\n' | tail --lines=2 | head --lines=1 | tr --delete '\\n'" ] ;
    local gcc-previous-version
      = [ SHELL "echo -n $(.gcc-versions:J= ) | grep -Eo \"$(gcc-previous-major)\\.[[:digit:]]+\" | sort -u -t '.' -k 1,1n -k 2,2n -k 3,3n | tail --lines=1 | tr --delete '\\n'" ] ;
    .gcc-previous-version = $(gcc-previous-version) ;

    local gcc-oldest-major
      = [ SHELL "echo -n $(gcc-recent-majors) | tr ' ' '\\n' | tail --lines=3 | head --lines=1 | tr --delete '\\n'" ] ;
    local gcc-oldest-version
      = [ SHELL "echo -n $(.gcc-versions:J= ) | grep -Eo \"$(gcc-oldest-major)\\.[[:digit:]]+\" | sort -u -t '.' -k 1,1n -k 2,2n -k 3,3n | tail --lines=1 | tr --delete '\\n'" ] ;
    .gcc-oldest-version = $(gcc-oldest-version) ;
  }
}

rule .init-gcc-snapshot-aliases-impl ( major )
{
  return [ SHELL "{ echo -n \"$(.gcc-versions:J= )\"                                            || echo -n error; } \\
                    | { grep -Eo \"($(major)-[[:digit:]]{8})|($(major)\\.0-RC-[[:digit:]]{8})\" || echo -n error; } \\
                    | { grep -Eo \"[[:digit:]]{8}\"                                             || echo -n error; } \\
                    | { sort --numeric-sort                                                     || echo -n error; } \\
                    | { tail --lines=1                                                          || echo -n error; } \\
                    | { tr --delete '\\n'                                                       || echo -n error; }" ] ;
}

rule .init-gcc-snapshot-aliases ( )
{
  if ! "$(.gcc-snapshot-version)" {
    if "$(.gcc-current-snapshot-version)" || "$(.gcc-previous-snapshot-version)" || "$(.gcc-oldest-snapshot-version)" {
      errors.error "an internal error." ;
    }

    local gcc-snapshot-major
      = [ SHELL "{ echo -n \"$(.gcc-versions:J= )\"                                                                                     || echo -n error; } \\
                   | { grep -Eo \"([[:digit:]]+(\\.[[:digit:]]+)?-[[:digit:]]{8})|([[:digit:]]+\\.[[:digit:]]+\\.0-RC-[[:digit:]]{8})\" || echo -n error; } \\
                   | { grep -Eo \"^[[:digit:]]+(\\.[[:digit:]]+)?\"                                                                     || echo -n error; } \\
                   | { sort -u -t '.' -k 1,1n -k 2,2n                                                                                   || echo -n error; } \\
                   | { tail --lines=1                                                                                                   || echo -n error; } \\
                   | { tr --delete '\\n'                                                                                                || echo -n error; }" ] ;
    local gcc-snapshot-date = [ .init-gcc-snapshot-aliases-impl $(gcc-snapshot-major) ] ;
    .gcc-snapshot-version
      = [ SHELL "{ echo -n \"$(.gcc-versions:J= )\"                                                                                  || echo -n error; } \\
                   | { grep -Eo \"($(gcc-snapshot-major)-$(gcc-snapshot-date))|($(gcc-snapshot-major)\\.0-RC-$(gcc-snapshot-date))\" || echo -n error; } \\
                   | { tail --lines=1                                                                                                || echo -n error; } \\
                   | { tr --delete '\\n'                                                                                             || echo -n error; }" ] ;
    if "$(.gcc-snapshot-version)" = "error" {
      errors.error "failed to extract GCC snapshot versions." ;
    }

    local gcc-current-snapshot-major = [ regex.match "^([0-9]+\\.[0-9]+)\\.[0-9]+$" : [ get-gcc-current-version ] : 1 ] ;
    local gcc-current-snapshot-date = [ .init-gcc-snapshot-aliases-impl $(gcc-current-snapshot-major) ] ;
    .gcc-current-snapshot-version
      = [ SHELL "{ echo -n \"$(.gcc-versions:J= )\"                                                      || echo -n error; } \\
                   | { grep -Eo \"$(gcc-current-snapshot-major)(\\.0-RC)?-$(gcc-current-snapshot-date)\" || echo -n error; } \\
                   | { tail --lines=1                                                                    || echo -n error; } \\
                   | { tr --delete '\\n'                                                                 || echo -n error; }" ] ;
    if "$(.gcc-current-snapshot-version)" = "error" {
      errors.error "failed to extract GCC snapshot versions." ;
    }

    local gcc-previous-snapshot-major = [ regex.match "^([0-9]+\\.[0-9]+)\\.[0-9]+$" : [ get-gcc-previous-version ] : 1 ] ;
    local gcc-previous-snapshot-date = [ .init-gcc-snapshot-aliases-impl $(gcc-previous-snapshot-major) ] ;
    .gcc-previous-snapshot-version
      = [ SHELL "{ echo -n \"$(.gcc-versions:J= )\"                                                        || echo -n error; } \\
                   | { grep -Eo \"$(gcc-previous-snapshot-major)(\\.0-RC)?-$(gcc-previous-snapshot-date)\" || echo -n error; } \\
                   | { tail --lines=1                                                                      || echo -n error; } \\
                   | { tr --delete '\\n'                                                                   || echo -n error; }" ] ;
    if "$(.gcc-previous-snapshot-version)" = "error" {
      errors.error "failed to extract GCC snapshot versions." ;
    }

    local gcc-oldest-snapshot-major = [ regex.match "^([0-9]+\\.[0-9]+)\\.[0-9]+$" : [ get-gcc-oldest-version ] : 1 ] ;
    local gcc-oldest-snapshot-date = [ .init-gcc-snapshot-aliases-impl $(gcc-oldest-snapshot-major) ] ;
    .gcc-oldest-snapshot-version
      = [ SHELL "{ echo -n \"$(.gcc-versions:J= )\"                                                    || echo -n error; } \\
                   | { grep -Eo \"$(gcc-oldest-snapshot-major)(\\.0-RC)?-$(gcc-oldest-snapshot-date)\" || echo -n error; } \\
                   | { tail --lines=1                                                                  || echo -n error; } \\
                   | { tr --delete '\\n'                                                               || echo -n error; }" ] ;
    if "$(.gcc-oldest-snapshot-version)" = "error" {
      errors.error "failed to extract GCC snapshot versions." ;
    }
  }
}

rule get-gcc-current-version ( )
{
  .init-gcc-release-aliases ;
  return $(.gcc-current-version) ;
}

rule get-gcc-previous-version ( )
{
  .init-gcc-release-aliases ;
  return $(.gcc-previous-version) ;
}

rule get-gcc-oldest-version ( )
{
  .init-gcc-release-aliases ;
  return $(.gcc-oldest-version) ;
}

rule get-gcc-snapshot-version ( )
{
  .init-gcc-snapshot-aliases ;
  return $(.gcc-snapshot-version) ;
}

rule get-gcc-current-snapshot-version ( )
{
  .init-gcc-snapshot-aliases ;
  return $(.gcc-current-snapshot-version) ;
}

rule get-gcc-previous-snapshot-version ( )
{
  .init-gcc-snapshot-aliases ;
  return $(.gcc-previous-snapshot-version) ;
}

rule get-gcc-oldest-snapshot-version ( )
{
  .init-gcc-snapshot-aliases ;
  return $(.gcc-oldest-snapshot-version) ;
}

rule get-clang-latest-version ( )
{
  if ! "$(.clang-latest-version)" {
    local clang-latest-version
      = [ SHELL "echo -n $(.clang-versions:J= ) | grep -Eo \"[[:digit:]]+\\.[[:digit:]]+\" | sort -u -t '.' -k 1,1n -k 2,2n | tail --lines=1 | tr --delete '\\n'" ] ;
    .clang-latest-version = $(clang-latest-version) ;
  }
  return $(.clang-latest-version) ;
}

rule get-icc-system-version ( )
{
  if ! "$(.icc-system-version)" {
    local icc-system-version
      = [ SHELL "/opt/intel/bin/icpc --version                                         \\
                   | grep -Eo '^icpc \\(ICC\\) [[:digit:]]+.[[:digit:]]+.[[:digit:]]+' \\
                   | grep -Eo '[[:digit:]]+.[[:digit:]]+.[[:digit:]]+'                 \\
                   | grep -Eo '^[[:digit:]]+.[[:digit:]]+'                             \\
                   | tr --delete '\\n'" ] ;
    if ! [ regex.match "^([0-9]+\\.[0-9]+)$" : "$(icc-system-version)" : 1 ] {
      errors.error "an internal error." ;
    }
    .icc-system-version = $(icc-system-version) ;
  }
  return $(.icc-system-version) ;
}

rule is-valid ( compiler )
{
  local result ;
  if "$(compiler)" in gcc-current gcc-previous gcc-oldest gcc-snapshot gcc-current-snapshot gcc-previous-snapshot gcc-oldest-snapshot gcc-$(.gcc-versions) {
    result = "yes" ;
  }
  else if [ regex.match "^(clang-.+)" : "$(compiler)" : 1 ] {
    local tmp = [ regex.match "^clang-(.+)-libstdc\\+\\+-(.+)" : "$(compiler)" : 1 2 ] ;
    local frontend = "clang-$(tmp[1])" ;
    local backend = "gcc-$(tmp[2])" ;
    if "$(frontend)" in clang-latest clang-trunk clang-$(.clang-versions) {
      if [ is-valid "$(backend)" ] {
        result = "yes" ;
      }
    }
  }
  else if [ regex.match "^(icc-.+)" : "$(compiler)" : 1 ] {
    local tmp = [ regex.match "^icc-(.+)-libstdc\\+\\+-(.+)" : "$(compiler)" : 1 2 ] ;
    local frontend = "icc-$(tmp[1])" ;
    local backend = "gcc-$(tmp[2])" ;
    if "$(frontend)" in icc-system {
      if [ is-valid "$(backend)" ] {
        result = "yes" ;
      }
    }
  }
  else if [ regex.match "^(icc-system-.+)$" : $(compiler) : 1 ] {
    local backend = [ regex.match "^icc-system-(.+)$" : $(compiler) : 1 ] ;
    if [ is-valid $(backend) ] {
      result = yes ;
    }
  }
  return $(result) ;
}

rule is-gcc ( compiler )
{
  if ! [ is-valid "$(compiler)" ] {
    errors.error "an internal error." ;
  }
  local result ;
  if "$(compiler)" in gcc-current gcc-previous gcc-oldest gcc-snapshot gcc-current-snapshot gcc-previous-snapshot gcc-oldest-snapshot gcc-$(.gcc-versions) {
    result = yes ;
  }
  return $(result) ;
}

rule is-builtin-gcc ( compiler )
{
  if ! [ is-valid "$(compiler)" ] {
    errors.error "an internal error." ;
  }
  local result ;
  if [ is-gcc "$(compiler)" ] {
    if [ get-frontend-version "$(compiler)" ] = [ SHELL "gcc -dumpversion | tr --delete '\\n'" ] {
      result = yes ;
    }
  }
  return "$(result)" ;
}

rule is-gcc-release ( compiler )
{
  if ! [ is-valid "$(compiler)" ] {
    errors.error "an invalid argument." ;
  }
  local result ;
  if $(compiler) in gcc-current gcc-previous gcc-oldest {
    result = yes ;
  }
  else if [ regex.match "^(gcc-[0-9]+\\.[0-9]+\\.[0-9]+)$" : $(compiler) : 1 ] {
    result = yes ;
  }
  return $(result) ;
}

rule is-gcc-snapshot ( compiler )
{
  if ! [ is-valid "$(compiler)" ] {
    errors.error "an invalid argument." ;
  }
  local result ;
  if $(compiler) in gcc-snapshot gcc-current-snapshot gcc-previous-snapshot gcc-oldest-snapshot {
    result = yes ;
  }
  else if [ regex.match "^(gcc-[0-9]+\\.[0-9]+(\\.0-RC)?-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9])$" : $(compiler) : 1 ] {
    result = yes ;
  }
  return $(result) ;
}

rule get-gccs ( compilers * )
{
  local result ;
  for local compiler in $(compilers) {
    if ! [ is-valid "$(compiler)" ] {
      errors.error "an internal error." ;
    }
    if [ is-gcc $(compiler) ] {
      result += $(compiler) ;
    }
  }
  return $(result) ;
}

rule get-gcc-versions ( compilers * )
{
  local results ;
  for local gcc in [ get-gccs $(compilers) ] {
    local version = [ get-frontend-version "$(gcc)" ] ;
    if ! "$(version)" in $(results) {
      results += "$(version)" ;
    }
  }
  return $(results) ;
}

rule get-frontend-version ( compiler )
{
  if ! [ is-valid "$(compiler)" ] {
    errors.error "an internal error." ;
  }
  local result ;
  if "$(compiler)" in gcc-current gcc-previous gcc-oldest gcc-snapshot gcc-current-snapshot gcc-previous-snapshot gcc-oldest-snapshot {
    result = [ get-$(compiler)-version ] ;
  }
  else if [ is-gcc "$(compiler)" ] {
    result = [ regex.match "^gcc-(.+)" : "$(compiler)" : 1 ] ;
  }
  else if [ is-clang "$(compiler)" ] {
    local frontend-and-backend = [ split-frontend-and-backend "$(compiler)" ] ;
    local frontend = "$(frontend-and-backend[1])" ;
    if "$(frontend)" = "clang-latest" {
      result = [ get-clang-latest-version ] ;
    }
    else if "$(frontend)" = "clang-trunk" {
      errors.error "this rule cannot be called for Clang trunk." ;
    }
    else {
      result = [ regex.match "^clang-(.+)" : "$(frontend)" : 1 ] ;
    }
  }
  else if [ is-icc "$(compiler)" ] {
    local frontend-and-backend = [ split-frontend-and-backend "$(compiler)" ] ;
    local frontend = "$(frontend-and-backend[1])" ;
    if "$(frontend)" = "icc-system" {
      result = [ get-icc-system-version ] ;
    }
    else {
      result = [ regex.match "^icc-(.+)" : "$(frontend)" : 1 ] ;
    }
  }
  else {
    errors.error "an internal error." ;
  }
  return "$(result)" ;
}

rule get-backend-version ( compiler )
{
  if ! [ is-valid "$(compiler)" ] {
    errors.error "an internal error." ;
  }
  local result ;
  if "$(compiler)" in gcc-current gcc-previous gcc-oldest gcc-snapshot gcc-current-snapshot gcc-previous-snapshot gcc-oldest-snapshot {
    errors.error "an internal error." ;
  }
  else if [ is-gcc "$(compiler)" ] {
    errors.error "an internal error." ;
  }
  else if [ is-clang "$(compiler)" ] || [ is-icc "$(compiler)" ] {
    local frontend-and-backend = [ split-frontend-and-backend "$(compiler)" ] ;
    local backend = "$(frontend-and-backend[2])" ;
    if "$(backend)" in gcc-current gcc-previous gcc-oldest gcc-snapshot gcc-current-snapshot gcc-previous-snapshot gcc-oldest-snapshot {
      result = [ get-$(backend)-version ] ;
    }
    else if [ is-gcc "$(backend)" ] {
      result = [ regex.match "^gcc-(.+)" : "$(backend)" : 1 ] ;
    }
    else {
      errors.error "an internal error." ;
    }
  }
  else {
    errors.error "an internal error." ;
  }
  return "$(result)" ;
}

rule is-clang ( compiler )
{
  if ! [ is-valid "$(compiler)" ] {
    errors.error "an internal error." ;
  }
  local result ;
  if [ regex.match "^(clang-.+)" : "$(compiler)" : 1 ] {
    local tmp = [ regex.match "^clang-(.+)-libstdc\\+\\+-(.+)" : "$(compiler)" : 1 2 ] ;
    local frontend = "clang-$(tmp[1])" ;
    local backend = "gcc-$(tmp[2])" ;
    if ! "$(frontend)" || ! "$(backend)" {
      errors.error "an internal error." ;
    }
    if "$(frontend)" in clang-latest clang-trunk clang-$(.clang-versions) {
      if [ is-gcc "$(backend)" ] {
        result = yes ;
      }
      else {
        errors.error "an internal error." ;
      }
    }
    else {
      errors.error "an internal error." ;
    }
  }
  return $(result) ;
}

rule is-icc ( compiler )
{
  if ! [ is-valid "$(compiler)" ] {
    errors.error "an internal error." ;
  }
  local result ;
  if [ regex.match "^(icc-.+)" : "$(compiler)" : 1 ] {
    local tmp = [ regex.match "^icc-(.+)-libstdc\\+\\+-(.+)" : "$(compiler)" : 1 2 ] ;
    local frontend = "icc-$(tmp[1])" ;
    local backend = "gcc-$(tmp[2])" ;
    if ! "$(frontend)" || ! "$(backend)" {
      errors.error "an internal error." ;
    }
    if "$(frontend)" in icc-system {
      if [ is-gcc "$(backend)" ] {
        result = yes ;
      }
      else {
        errors.error "an internal error." ;
      }
    }
    else {
      errors.error "an internal error." ;
    }
  }
  return $(result) ;
}

rule split-frontend-and-backend ( compiler )
{
  if ! [ is-valid "$(compiler)" ] {
    errors.error "an internal error." ;
  }
  local result ;
  if [ is-gcc "$(compiler)" ] {
    result += "$(compiler)" ;
  }
  else if [ is-clang "$(compiler)" ] {
    local tmp = [ regex.match "^clang-(.+)-libstdc\\+\\+-(.+)" : "$(compiler)" : 1 2 ] ;
    result += "clang-$(tmp[1])" ;
    result += "gcc-$(tmp[2])" ;
  }
  else if [ is-icc "$(compiler)" ] {
    local tmp = [ regex.match "^icc-(.+)-libstdc\\+\\+-(.+)" : "$(compiler)" : 1 2 ] ;
    result += "icc-$(tmp[1])" ;
    result += "gcc-$(tmp[2])" ;
  }
  else {
    errors.error "an internal error." ;
  }
  return $(result) ;
}

rule get-prefix-leaf ( properties * )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  if ! [ is-valid "$(compiler)" ] {
    errors.error "an internal error." ;
  }
  return "$(compiler)" ;
}

rule get-compiler-prefix ( prefix : properties * )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  if ! [ is-valid "$(compiler)" ] {
    errors.error "an internal error" ;
  }
  local prefix-leaf = [ get-prefix-leaf $(properties) ] ;
  return "$(prefix)/$(prefix-leaf)" ;
}

rule get-full-prefix ( prefix : properties * )
{
  local result = [ get-compiler-prefix "$(prefix)" : $(properties) ] ;

  local variant = [ feature.get-values <variant> : $(properties) ] ;
  switch "$(variant)" {
  case "debug" :
    result = "$(result)/debug" ;
  case "release" :
    result = "$(result)/release" ;
  case "profile" :
    result = "$(result)/profile" ;
  case "" :
    errors.error "the value for `<variant>' is empty" ;
  case "*" :
    errors.error "<variant>$(variant): an unknown property" ;
  }

  local link = [ feature.get-values <link> : $(properties) ] ;
  switch "$(link)" {
  case "shared" :
    result = "$(result)/link-shared" ;
  case "static" :
    result = "$(result)/link-static" ;
  case "" :
    errors.error "the value for `<link>' is empty" ;
  case "*" :
    errors.error "<link>$(link): an unknown property" ;
  }

  local runtime-link = [ feature.get-values <runtime-link> : $(properties) ] ;
  switch "$(runtime-link)" {
  case "shared" :
    # Do nothing.
  case "static" :
    errors.error "`<runtime-link>static' is not supported" ;
  case "" :
    errors.error "the value for `<runtime-link> is empty'" ;
  case "*" :
    errors.error "<runtime-link>$(runtime-link): an unknown property" ;
  }

  local threading = [ feature.get-values <threading> : $(properties) ] ;
  switch "$(threading)" {
  case "single" :
    result = "$(result)/threading-single" ;
  case "multi" :
    result = "$(result)/threading-multi" ;
  case "" :
    errors.error "the value for `<threading>' is empty" ;
  case "*" :
    errors.error "<threading>$(threading): an unknown property" ;
  }

  local address-model = [ feature.get-values <address-model> : $(properties) ] ;
  switch "$(address-model)" {
  case "64" :
    result = "$(result)/address-model-64" ;
  case "32" :
    result = "$(result)/address-model-32" ;
  case "" :
    errors.error "the value for `<address-model>' is empty" ;
  case "*" :
    errors.error "<address-model>$(address-model): an unknown property" ;
  }

  local instruction-set = [ feature.get-values <instruction-set> : $(properties) ] ;
  switch "$(instruction-set)" {
  case "generic" :
    result = "$(result)/instruction-set-generic" ;
  case "native" :
    result = "$(result)/instruction-set-native" ;
  case "" :
    errors.error "the value for `<instruction-set>' is empty" ;
  case "*" :
    errors.error "<instruction-set>$(instruction-set): an unknown property" ;
  }

  local std = [ feature.get-values <std> : $(properties) ] ;
  switch "$(std)" {
  case "c++03" :
    result = "$(result)/c++03" ;
  case "c++11" :
    result = "$(result)/c++11" ;
  case "c++1y" :
    result = "$(result)/c++1y" ;
  case "" :
    errors.error "the value for `<std>' is empty" ;
  case "*" :
    errors.error "<std>$(std): an unknown property" ;
  }

  local lto = [ feature.get-values <lto> : $(properties) ] ;
  switch "$(lto)" {
  case "off" :
    result = "$(result)/lto-off" ;
  case "on" :
    result = "$(result)/lto-on" ;
  case "" :
    errors.error "the value for `<lto>' is empty" ;
  case "*" :
    errors.error "<lto>$(lto): an unknown property" ;
  }

  local correct-call-stack = [ feature.get-values <correct-call-stack> : $(properties) ] ;
  switch "$(correct-call-stack)" {
  case "off" :
    # Do nothing.
  case "on" :
    errors.error "`<correct-call-stack>on' is not supported" ;
  case "" :
    errors.error "the value for `<correct-call-stack>' is empty" ;
  case "*" :
    errors.error "<correct-call-stack>$(correct-call-stack): an unknown property" ;
  }

  local ssp = [ feature.get-values <ssp> : $(properties) ] ;
  switch "$(ssp)" {
  case "off" :
    # Do nothing.
  case "on" :
    errors.error "`<ssp>on' is not supported" ;
  case "all" :
    errors.error "`<ssp>all' is not supported" ;
  case "" :
    errors.error "the value for `<ssp>' is empty" ;
  case "*" :
    errors.error "<ssp>$(ssp): an unknown property" ;
  }

  local memory-checker = [ feature.get-values <memory-checker> : $(properties) ] ;
  switch "$(memory-checker)" {
  case "off" :
    result = "$(result)/memory-checker-off" ;
  case "on" :
    result = "$(result)/memory-checker-on" ;
  case "" :
    errors.error "the value for `<memory-checker>' is empty" ;
  case "*" :
    errors.error "<memory-checker>$(memory-checker): an unknown property" ;
  }

  local libstdcxx-debug-mode = [ feature.get-values <libstdc++-debug-mode> : $(properties) ] ;
  switch "$(libstdcxx-debug-mode)" {
  case "off" :
    result = "$(result)/libstdc++-debug-mode-off" ;
  case "on" :
    result = "$(result)/libstdc++-debug-mode-on" ;
  case "" :
    errors.error "the value for `<libstdc++-debug-mode>' is empty" ;
  case "*" :
    errors.error "<libstdc++-debug-mode>$(libstdcxx-debug-mode): unknown property" ;
  }

  return "$(result)" ;
}

rule get-backend-gcc ( compiler )
{
  if ! [ is-clang "$(compiler)" ] && ! [ is-icc "$(compiler)" ] {
    errors.error "an internal error." ;
  }
  local frontend-and-backend = [ split-frontend-and-backend "$(compiler)" ] ;
  local backend = "$(frontend-and-backend[2])" ;
  if ! "$(backend)" {
    errors.error "an internal error." ;
  }
  return "$(backend)" ;
}

rule get-gcc-path ( prefix : compiler : gcc-for-clang ? )
{
  local result ;
  if [ is-gcc "$(compiler)" ] {
    if "$(gcc-for-clang)" {
      errors.error "an internal error." ;
    }
    local prefix-leaf = [ get-prefix-leaf "$(compiler)" : $(gcc-for-clang) ] ;
    local compiler-prefix = "$(prefix)/$(prefix-leaf)" ;
    result = "$(compiler-prefix)/bin/gcc-wrapper" ;
  }
  else if [ is-clang "$(compiler)" ] {
    if ! "$(gcc-for-clang)" {
      errors.error "an internal error." ;
    }
    local prefix-leaf = [ get-prefix-leaf "$(compiler)" : "$(gcc-for-clang)" ] ;
    local compiler-prefix = "$(prefix)/$(prefix-leaf)" ;
    result = "$(compiler-prefix)/bin/gcc-wrapper" ;
  }
  else {
    errors.error "`<compiler-hidden>$(compiler)' is not valid." ;
  }
  return $(result) ;
}

rule get-default-bits ( )
{
  local bits = [ SHELL "{ file --dereference /bin/sh | grep -Fq '64-bit'; } && echo -n 64 || echo -n 32" ] ;
  if "$(bits)" != "64" && "$(bits)" != "32" {
    errors.error "an internal error." ;
  }
  return $(bits) ;
}

rule get-default-bindir ( prefix : properties * )
{
  local compiler-prefix = [ get-compiler-prefix "$(prefix)" : $(properties) ] ;
  return "$(compiler-prefix)/bin" ;
}

rule get-default-libdir ( prefix : properties * )
{
  errors.error "Sorry, unimplemented. To implement this rule, we should"
               " check whether `lib` or `lib64` is the correct location"
               " where 64-bit libraries are installed. However, it is"
               " annoying because the location varies from Linux"
               " distribution to distribution." ;
}

rule get-default-includedir ( prefix : properties * )
{
  local compiler-prefix = [ get-compiler-prefix "$(prefix)" : $(properties) ] ;
  return "$(compiler-prefix)/include" ;
}

rule get-compiler-triplets ( properties * )
{
  local build-os = [ feature.get-values <host-os> : [ feature.defaults <host-os> ] ] ;
  local default-bits = [ get-default-bits ] ;
  local host-os = [ feature.get-values <host-os> : $(properties) ] ;
  local target-os = [ feature.get-values <target-os> : $(properties) ] ;
  local multitarget = [ feature.get-values <multitarget> : $(properties) ] ;
  local address-model = [ feature.get-values <address-model> : $(properties) ] ;
  local build-triplet ;
  local host-triplet ;
  local target-triplet ;
  local enabled-targets ;
  switch "$(build-os)" {
  case "linux" : # `$(build-os)' is `linux'.
    switch "$(default-bits)" {
    case "64" : # `$(default-bits)' is `64'.
      build-triplet = "x86_64-unknown-linux-gnu" ;
      switch "$(host-os)" {
      case "linux" : # `$(host-os)' is `linux'.
        host-triplet = "x86_64-unknown-linux-gnu" ;
        switch "$(target-os)" {
        case "linux" : # `$(target-os)' is `linux'.
          switch "$(multitarget)" {
          case "yes" : # `$(multitarget)' is `yes'.
            switch "$(address-model)" {
            case "64" : # `$(address-model)' is `64'.
              target-triplet = "x86_64-unknown-linux-gnu" ;
              enabled-targets = "x86_64-unknown-linux-gnu,i686-pc-linux-gnu" ;
            case "32" : # `$(address-model)' is `32'.
              errors.error "`<multitarget>$(multitarget)' and `<address-model>32' are not compatible" ;
            case "" :
              errors.error "The value for `<address-model>' feature is empty." ;
            case "*" : # `$(address-model)' is other than `unspecified', `64' or `32'.
              errors.error "`<address-model>$(address-model)' is an unknown property." ;
            }
          case "no" : # `$(multitarget)' is `no'.
            switch "$(address-model)" {
            case "64" : # `<address-model>64'
              target-triplet = "x86_64-unknown-linux-gnu" ;
              enabled-targets = "x86_64-unknown-linux-gnu" ;
            case "" :
              errors.error "The value for `<address-model>' feature is empty." ;
            case "*" :
              errors.error "`<address-model>$(address-model)' is an unknown property." ;
            }
          case "" :
            errors.error "The value for `<multitarget>' feature is empty." ;
          case "*" :
            errors.error "`<multitarget>$(multitarget)' is an unknown property." ;
          }
        case "windows" : # The target OS is `windows'.
          switch "$(multitarget)" {
          case "no" : # `<multitarget>no'
            switch "$(address-model)" {
            case "64" : # `<address-model>64'
              target-triplet = "x86_64-w64-mingw32" ;
              enabled-targets = "x86_64-w64-mingw32" ;
            case "32" : # `<address-model>32'
              target-triplet = "i686-w64-mingw32" ;
              enabled-targets = "i686-w64-mingw32" ;
            case "" :
              errors.error "The value for `<address-model>' feature is empty." ;
            case "*" : # The value for `<address-model>' feature is neither `64' nor `32'.
              errors.error "`<address-model>$(address-model)' is an unknown property." ;
            }
          case "" :
            errors.error "The value for `<multitarget>' feature is empty." ;
          case "*" : # The value for `<multitarget>' feature is other than `no'.
            errors.error "`<multitarget>$(multitarget)' is an unknown property." ;
          }
        case "cygwin" : # The target OS is `cygwin'.
          switch "$(multitarget)" {
          case "no" : # `<multitarget>no'
            switch "$(address-model)" {
            case "32" : # `<address-model>32'
              target-triplet = "i686-pc-cygwin" ;
              enabled-targets = "i686-pc-cygwin" ;
            case "" :
              errors.error "The value for `<address-model>' is empty." ;
            case "*" : # The value for `<address-model>' feature is other than `32'.
              errors.error "`<address-model>$(address-model)' is an unknown property." ;
            }
          case "" :
            errors.error "The value for `<multitarget>' is empty." ;
          case "*" : # `$(multitarget)' is other than `no'.
            errors.error "`<multitarget>$(multitarget)' is an unknown property." ;
          }
        case "" :
          errors.error "an internal error." ;
        case "*" : # The target OS is neither `linux', `windows' nor `cygwin'.
          errors.error "an internal error." ;
        }
      case "windows" : # The host OS is `windows'.
        switch "$(target-os)" {
        case "windows" : # The target OS is `windows'.
          switch "$(multitarget)" {
          case "no" : # `<multitarget>no'
            switch "$(address-model)" {
            case "64" : # `$(address-model)' is `64'.
              host-triplet = "x86_64-w64-mingw32" ;
              target-triplet = "x86_64-w64-mingw32" ;
              enabled-targets = "x86_64-w64-mingw32" ;
            case "32" : # `$(address-model)' is `32'.
              host-triplet = "i686-w64-mingw32" ;
              target-triplet = "i686-w64-mingw32" ;
              enabled-targets = "i686-w64-mingw32" ;
            case "*" : # `$(address-model)' is neither `64' nor `32'.
              errors.error "an internal error." ;
            }
          case "" :
            errors.error "The value for `<multitarget>' feature is empty." ;
          case "*" : # The value for `<multitarget>' feature is other than `no'.
            errors.error "`<multitarget>$(multitarget)' is an unknown property." ;
          }
        case "" :
          errors.error "an internal error." ;
        case "*" : # The target OS is other than `windows'.
          errors.error "an internal error." ;
        }
      case "cygwin" : # The host OS is `cygwin'.
        host-triplet = "i686-pc-cygwin" ;
        switch "$(target-os)" {
        case "cygwin" : # The target OS is `cygwin'.
          switch "$(multitarget)" {
          case "no" : # `<multitarget>no'
            switch "$(address-model)" {
            case "32" : # `<address-model>32'
              target-triplet = "i686-pc-cygwin" ;
              enabled-targets = "i686-pc-cygwin" ;
            case "" :
              errors.error "The value for `<address-model>' feature is empty." ;
            case "*" : # The value for `<address-model>' feature is other than `32'.
              errors.error "`<address-model>$(address-model)' is an unknown property." ;
            }
          case "" :
            errors.error "The value for `<multitarget>' feature is empty." ;
          case "*" : # The value for `<multitarget>' feature is other than `no'.
            errors.error "`<multitarget>$(multitarget)' is an unknown property." ;
          }
        case "" :
          errors.error "an internal error." ;
        case "*" : # The target OS is other than `cygwin'.
          errors.error "an internal error." ;
        }
      case "" :
        errors.error "an internal error." ;
      case "*" : # The host OS is neither `linux', `windows' nor `cygwin'.
        errors.error "an internal error." ;
      }
    case "32" : # The default number of bits is `32'.
      build-triplet = "i686-pc-linux-gnu" ;
      switch "$(host-os)" {
      case "linux" : # The host OS is `linux'.
        host-triplet = "i686-pc-linux-gnu" ;
        switch "$(target-os)" {
        case "linux" : # The target OS is `linux'.
          switch "$(multitarget)" {
          case "no" : # `<multitarget>no'
            switch "$(address-model)" {
            case "32" : # `<address-model>32'
              target-triplet = "i686-pc-linux-gnu" ;
              enabled-targets = "i686-pc-linux-gnu" ;
            case "" :
              errors.error "The value for `<address-model>' feature is empty." ;
            case "*" : # The value for `<address-model>' feature is other than `unspecified'.
              errors.error "`<address-model>$(address-model)' is an unknown property." ;
            }
          case "" :
            errors.error "The value for `<multitarget>' feature is empty." ;
          case "*" : # The value for `<multitarget>' feature is other than `no'.
            errors.error "`<multitarget>$(multitarget)' is an unknown property." ;
          }
        case "windows" : # The target OS is `windows'.
          switch "$(multitarget)" {
          case "no" : # `<multitarget>no'
            switch "$(address-model)" {
            case "32" : # `<address-model>32'
              target-triplet = "i686-w64-mingw32" ;
              enabled-targets = "i686-w64-mingw32" ;
            case "64" : # `<address-model>64'
              target-triplet = "x86_64-w64-mingw32" ;
              enabled-targets = "x86_64-w64-mingw32" ;
            case "" :
              errors.error "The value for `<address-model>' feature is empty." ;
            case "*" : # The value for `<address-model>' feature is neither `32' nor `64'.
              errors.error "`<address-model>$(address-model)' is an unknown property." ;
            }
          case "" :
            errors.error "The value for `<multitarget>' feature is empty." ;
          case "*" : # The value for `<multitarget>' feature is other than `no'.
            errors.error "`<multitarget>$(multitarget)' is an unknown property." ;
          }
        case "cygwin" : # The target OS is `cygwin'.
          switch "$(multitarget)" {
          case "no" : # `<multitarget>no'
            switch "$(address-model)" {
            case "unspecified" : # `$(address-model)' is `unspecified'.
              target-triplet = "i686-pc-cygwin" ;
              enabled-targets = "i686-pc-cygwin" ;
            case "*" : # `$(address-model)' is other than `unspecified'.
              errors.error "an internal error." ;
            }
          case "" :
            errors.error "The value for `<multitarget>' feature is empty." ;
          case "*" : # The value for `<multitarget>' feature is other than `no'.
            errors.error "`<multitarget>$(multitarget)' is an unknown property." ;
          }
        case "" :
          errors.error "an internal error." ;
        case "*" : # The target OS is neither `linux', `windows' nor `cygwin'.
          errors.error "an internal error." ;
        }
      case "windows" : # The host OS is `windows'.
        switch "$(target-os)" {
        case "windows" : # The target OS is `windows'.
          switch "$(multitarget)" {
          case "no" : # `<multitarget>no'
            switch "$(address-model)" {
            case "32" : # `<address-model>32'
              host-triplet = "i686-w64-mingw32" ;
              target-triplet = "i686-w64-mingw32" ;
              enabled-targets = "i686-w64-mingw32" ;
            case "64" : # `<address-model>64'
              host-triplet = "x86_64-w64-mingw32" ;
              target-triplet = "x86_64-w64-mingw32" ;
              enabled-targets = "x86_64-w64-mingw32" ;
            case "" :
              errors.error "The value for `<address-model>' feature is empty." ;
            case "*" : # The value for `<address-model>' feature is neither `32' nor `64'.
              errors.error "`<address-model>$(address-model)' is an unknown property." ;
            }
          case "" :
            errors.error "The value for `<multitarget>' feature is empty." ;
          case "*" : # The value for `<multitarget>' feature is other than `no'.
            errors.error "`<multitarget>$(multitarget)' is an unknown property." ;
          }
        case "" :
          errors.error "an internal error." ;
        case "*" : # The target OS is other than `windows'.
          errors.error "an internal error." ;
        }
      case "cygwin" : # The host OS is `cygwin'.
        host-triplet = "i686-pc-cygwin" ;
        switch "$(target-os)" {
        case "cygwin" : # The target OS is `cygwin'.
          switch "$(multitarget)" {
          case "no" : # `<multitarget>no'
            switch "$(address-model)" {
            case "32" : # `<address-model>32'
              target-triplet = "i686-pc-cygwin" ;
              enabled-targets = "i686-pc-cygwin" ;
            case "" :
              errors.error "The value for `<address-model>' feature is empty." ;
            case "*" : # The value for `<address-model>' feature is other than `32'.
              errors.error "`<address-model>$(address-model)' is an unknown property." ;
            }
          case "" :
            errors.error "The value for `<multitarget>' feature is empty." ;
          case "*" : # The value for `<multitarget>' feature is other than `no'.
            errors.error "`<multitarget>$(multitarget)' is an unknown property." ;
          }
        case "" :
          errors.error "an internal error." ;
        case "*" : # The target OS is other than `cygwin'.
          errors.error "an internal error." ;
        }
      case "" :
        errors.error "an internal error." ;
      case "*" : # `$(host-os)' is neither `linux', `windows' nor `cygwin'.
        errors.error "an internal error." ;
      }
    case "" :
      errors.error "an internal error." ;
    case "*" : # The default number of bits is neither `64' nor `32'.
      errors.error "an internal error." ;
    }
  case "windows" : # The build OS is `windows'.
    switch "$(default-bits)" {
    case "64" : # The default number of bits is `64'.
      build-triplet = "x86_64-w64-mingw32" ;
      switch "$(host-os)" {
      case "windows" : # The host OS is `windows'.
        host-triplet = "x86_64-w64-mingw32" ;
        switch "$(target-os)" {
        case "windows" : # The target OS is `windows'.
          switch "$(multitarget)" {
          case "no" : # `<multitarget>no'
            switch "$(address-model)" {
            case "64" : # `<address-model>64'
              target-triplet = "x86_64-w64-mingw32" ;
              enabled-targets = "x86_64-w64-mingw32" ;
            case "" :
              errors.error "The value for `<address-model>' feature is empty." ;
            case "*" : # The value for `<address-model>' feature is other than `64'.
              errors.error "`<address-model>$(address-model)' is an unknown property." ;
            }
          case "" :
            errors.error "The value for `<multitarget>' feature is empty." ;
          case "*" : # The value for `<multitarget>' feature is other than `no'.
            errors.error "`<multitarget>$(multitarget)' is an unknown property." ;
          }
        case "" :
          errors.error "an internal error." ;
        case "*" : # The target OS is other than `windows'.
          errors.error "an internal error." ;
        }
      case "" :
        errors.error "an internal error." ;
      case "*" : # The host OS is other than `windows'.
        errors.error "an internal error." ;
      }
    case "32" : # The default number of bits is `32'.
      build-triplet = "i686-w64-mingw32" ;
      switch "$(host-os)" {
      case "windows" : # The host OS is `windows'.
        host-triplet = "i686-w64-mingw32" ;
        switch "$(target-os)" {
        case "windows" : # The target OS is `windows'.
          switch "$(multitarget)" {
          case "no" : # `<multitarget>no'
            switch "$(address-model)" {
            case "32" : # `<address-model>32'
              target-triplet = "i686-w64-mingw32" ;
              enabled-targets = "i686-w64-mingw32" ;
            case "" :
              errors.error "The value for `<address-model>' feature is empty." ;
            case "*" : # The value for `<address-model>' feature is other than `32'.
              errors.error "`<address-model>$(address-model)' is an unknown property." ;
            }
          case "" :
            errors.error "The value for `<multitarget>' feature is empty." ;
          case "*" : # The value for `<multitarget>' feature is other than `no'.
            errors.error "`<multitarget>$(multitarget)' is an unknown property." ;
          }
        case "" :
          errors.error "an internal error." ;
        case "*" : # The target OS is other than `windows'.
          errors.error "an internal error." ;
        }
      case "" :
        errors.error "an internal error." ;
      case "*" : # The host OS is other than `windows'.
        errors.error "an internal error." ;
      }
    case "" :
      errors.error "an internal error." ;
    case "*" : # The default number of bits is neither `64' nor `32'.
      errors.error "an internal error." ;
    }
  case "cygwin" : # The build OS is `cygwin'.
    switch "$(default-bits)" {
    case "32" : # The default number of bits is `32'.
      build-triplet = "i686-pc-cygwin" ;
      switch "$(host-os)" {
      case "cygwin" : # The host OS is `cygwin'.
        host-triplet = "i686-pc-cygwin" ;
        switch "$(target-os)" {
        case "cygwin" : # The target OS is `cygwin'.
          switch "$(multitarget)" {
          case "no" : # `<multitarget>no'
            switch "$(address-model)" {
            case "unspecified" : # `$(address-model)' is `unspecified'.
              target-triplet = "i686-pc-cygwin" ;
              enabled-targets = "i686-pc-cygwin" ;
            case "*" : # `$(address-model)' is other than `unspecified'.
              errors.error "an internal error." ;
            }
          case "" :
            errors.error "The value for `<multitarget>' feature is empty." ;
          case "*" : # The value for `<multitarget>' feature is other than `no'.
            errors.error "`<multitarget>$(multitarget)' is an unknown property." ;
          }
        case "" :
          errors.error "an internal error." ;
        case "*" : # The target OS is other than `cygwin'.
          errors.error "an internal error." ;
        }
      case "" :
        errors.error "an internal error." ;
      case "*" : # The host OS is other than `cygwin'.
        errors.error "an internal error." ;
      }
    case "" :
      errors.error "an internal error." ;
    case "*" : # The default number of bits is other than `32'.
      errors.error "an internal error." ;
    }
  case "" :
    errors.error "an internal error." ;
  case "*" : # The build OS is neither `linux', `windows' nor `cygwin'.
    errors.error "an internal error." ;
  }
  if ! "$(build-triplet)" {
    errors.error "an internal error." ;
  }
  if ! "$(host-triplet)" {
    errors.error "an internal error." ;
  }
  if ! "$(target-triplet)" {
    errors.error "an internal error." ;
  }
  if ! "$(enabled-targets)" {
    errors.error "an internal error." ;
  }
  if "$(build-triplet)" != "$(host-triplet)" && "$(host-triplet)" != "$(target-triplet)" {
    errors.error "an internal error." ;
  }
  return $(build-triplet) $(host-triplet) $(target-triplet) $(enabled-targets) ;
}

rule get-triplets ( properties * )
{
  local build-os = [ feature.get-values <host-os> : [ feature.defaults <host-os> ] ] ;
  local default-bits = [ get-default-bits ] ;
  local host-os = [ feature.get-values <host-os> : $(properties) ] ;
  local target-os = [ feature.get-values <target-os> : $(properties) ] ;
  local multitarget = [ feature.get-values <multitarget> : $(properties) ] ;
  local address-model = [ feature.get-values <address-model> : $(properties) ] ;
  local build-triplet ;
  local host-triplet ;
  switch "$(build-os)" {
  case "linux" : # The build OS is `linux'.
    switch "$(default-bits)" {
    case "64" : # The default number of bits is `64'.
      switch "$(host-os)" {
      case "linux" : # The host OS is `linux'.
        build-triplet = "x86_64-unknown-linux-gnu" ;
        switch "$(target-os)" {
        case "linux" : # The target OS is `linux'.
          switch "$(multitarget)" {
          case "yes" : # `<multitarget>yes'
            switch "$(address-model)" {
            case "64" : # `<address-model>64'
              host-triplet = "x86_64-unknown-linux-gnu" ;
            case "32" : # `<address-model>32'
              host-triplet = "i686-pc-linux-gnu" ;
            case "" :
              errors.error "The value for `<address-model>' feature is empty." ;
            case "*" : # The value for `<address-model>' feature is neither `64' nor `32'.
              errors.error "`<address-model>$(address-model)' is an unknown property." ;
            }
          case "no" : # `<multitarget>no'
            switch "$(address-model)" {
            case "64" : # `<address-model>64'
              host-triplet = "x86_64-unknown-linux-gnu" ;
            case "" :
              errors.error "The value for `<address-model>' feature is empty." ;
            case "*" : # The value for `<address-model>' feature is other than `64'.
              errors.error "`<address-model>$(address-model)' is an unknown property." ;
            }
          case "" :
            errors.error "The value for `<multitarget>' feature is empty." ;
          case "*" : # The value for `<multitarget>' feature is neither `yes' nor `no'.
            errors.error "`<multitarget>$(multitarget)' is an unknown property." ;
          }
        case "windows" : # The target OS is `windows'.
          switch "$(multitarget)" {
          case "no" : # `<multitarget>no'
            switch "$(address-model)" {
            case "64" : # `<address-model>64'
              host-triplet = "x86_64-w64-mingw32" ;
            case "32" : # `<address-model>32'
              host-triplet = "i686-w64-mingw32" ;
            case "" :
              errors.error "The value for `<address-model>' feature is empty." ;
            case "*" : # The value for `<address-model>' feature is neither `64' nor `32'.
              errors.error "`<address-model>$(address-model)' is an unknown property." ;
            }
          case "" :
            errors.error "The value for `<multitarget>' feature is empty." ;
          case "*" : # The value for `<multitarget>' feature is other than `no'.
            errors.error "`<multitarget>$(multitarget)' is an unknown property." ;
          }
        case "cygwin" : # The target OS is `cygwin'.
          switch "$(multitarget)" {
          case "no" : # `<multitarget>no'
            switch "$(address-model)" {
            case "32" : # `<address-model>32'
              host-triplet = "i686-pc-cygwin" ;
            case "" :
              errors.error "The value for `<address-model>' feature is empty." ;
            case "*" : # The value for `<address-model>' is other than `32'.
              errors.error "`<address-model>$(address-model)' is an unknown property." ;
            }
          case "" :
            errors.error "The value for `<multitarget>' feature is empty." ;
          case "*" : # The value for `<multitarget>' feature is other than `no'.
            errors.error "`<multitarget>$(multitarget)' is an unknown property." ;
          }
        case "" :
          errors.error "an internal error." ;
        case "*" : # The target OS is neither `linux', `windows' nor `cygwin'.
          errors.error "an internal error." ;
        }
      case "" :
        errors.error "an internal error." ;
      case "*" : # The host OS is other than `linux'.
        errors.error "an internal error." ;
      }
    case "32" : # The default number of bits is `32'.
      switch "$(host-os)" {
      case "linux" : # The host OS is `linux'.
        build-triplet = "i686-pc-linux-gnu" ;
        switch "$(target-os)" {
        case "linux" : # The target OS is `linux'.
          switch "$(multitarget)" {
          case "no" : # `<multitarget>no'
            switch "$(address-model)" {
            case "32" : # `<address-model>32'
              host-triplet = "i686-pc-linux-gnu" ;
            case "" :
              errors.error "The value for `<address-model>' feature is empty." ;
            case "*" : # The value for `<address-model>' feature is other than `32'.
              errors.error "`<address-model>$(address-model)' is an unknown property." ;
            }
          case "" :
            errors.error "The value for `<multitarget>' feature is empty." ;
          case "*" : # The value for `<multitarget>' feature is other than `no'.
            errors.error "`<multitarget>$(multitarget)' is an unknown property." ;
          }
        case "windows" : # The target OS is `windows'.
          switch "$(multitarget)" {
          case "no" : # `<multitarget>no'
            switch "$(address-model)" {
            case "32" : # `<address-model>32'
              host-triplet = "i686-w64-mingw32" ;
            case "64" : # `<address-model>64'
              host-triplet = "x86_64-w64-mingw32" ;
            case "" :
              errors.error "The value for `<address-model>' feature is empty." ;
            case "*" : # The value for `<address-model>' feature is neither `32' nor `64'.
              errors.error "`<address-model>$(address-model)' is an unknown property." ;
            }
          case "" :
            errors.error "The value for `<multitarget>' feature is empty." ;
          case "*" : # The value for `<multitarget>' feature is other than `no'.
            errors.error "`<multitarget>$(multitarget)' is an unknown property." ;
          }
        case "cygwin" : # The target OS is `cygwin'.
          switch "$(multitarget)" {
          case "no" : # `<multitarget>no'
            switch "$(address-model)" {
            case "32" : # `<address-model>32'
              host-triplet = "i686-pc-cygwin" ;
            case "" :
              errors.error "The value for `<address-model>' feature is empty." ;
            case "*" : # The value for `<address-model>' feature is other than `32'.
              errors.error "`<address-model>$(address-model)' is an unknown property." ;
            }
          case "" :
            errors.error "The value for `<multitarget>' feature is empty." ;
          case "*" : # The value for `<multitarget>' feature is other than `no'.
            errors.error "`<multitarget>$(multitarget)' is an unknown property." ;
          }
        case "" :
          errors.error "an internal error." ;
        case "*" : # The target OS is neither `linux', `windows' nor `cygwin'.
          errors.error "an internal error." ;
        }
      case "" :
        errors.error "an internal error." ;
      case "*" : # The host OS is other than `linux'.
        errors.error "an internal error." ;
      }
    case "" :
      errors.error "an internal error." ;
    case "*" : # The default number of bits is neither `64' nor `32'.
      errors.error "an internal error." ;
    }
  case "windows" : # The build OS is `windows'.
    switch "$(default-bits)" {
    case "64" : # The default number of bits is `64'.
      switch "$(host-os)" {
      case "windows" : # The host OS is `windows'.
        build-triplet = "x86_64-w64-mingw32" ;
        switch "$(target-os)" {
        case "windows" : # The target OS is `windows'.
          switch "$(multitarget)" {
          case "no" : # `<multitarget>no'
            switch "$(address-model)" {
            case "64" : # `<address-model>64'
              host-triplet = "x86_64-w64-mingw32" ;
            case "" :
              errors.error "The value for `<address-model>' feature is empty." ;
            case "*" : # The value for `<address-model>' feature is other than `64'.
              errors.error "`<address-model>$(address-model)' is an unknown property." ;
            }
          case "" :
            errors.error "The value for `<multitarget>' feature is empty." ;
          case "*" : # The value for `<multitarget>' feature is other than `no'.
            errors.error "`<multitarget>$(multitarget)' is an unknown property." ;
          }
        case "" :
          errors.error "an internal error." ;
        case "*" : # The target OS is other than `windows'.
          errors.error "an internal error." ;
        }
      case "" :
        errors.error "an internal error." ;
      case "*" : # The host OS is other than `windows'.
        errors.error "an internal error." ;
      }
    case "32" : # The default number of bits is `32'.
      switch "$(host-os)" {
      case "windows" : # The host OS is `windows'.
        build-triplet = "i686-w64-mingw32" ;
        switch "$(target-os)" {
        case "windows" : # The target OS is `windows'.
          switch "$(multitarget)" {
          case "no" : # `<multitarget>no'
            switch "$(address-model)" {
            case "32" : # `<address-model>32'
              host-triplet = "i686-w64-mingw32" ;
            case "" :
              errors.error "The value for `<address-model>' feature is empty." ;
            case "*" : # The value for `<address-model>' feature is other than `32'.
              errors.error "`<address-model>$(address-model)' is an unknown property." ;
            }
          case "" :
            errors.error "The value for `<multitarget>' feature is empty." ;
          case "*" : # The value for `<multitarget>' feature is other than `no'.
            errors.error "`<multitarget>$(multitarget)' is an unknown property." ;
          }
        case "" :
          errors.error "an internal error." ;
        case "*" : # The target OS is other than `windows'.
          errors.error "an internal error." ;
        }
      case "" :
        errors.error "an internal error." ;
      case "*" : # The host OS is other than `windows'.
        errors.error "an internal error." ;
      }
    case "" :
      errors.error "an internal error." ;
    case "*" : # The default number of bits is neither `64' nor `32'.
      errors.error "an internal error." ;
    }
  case "cygwin" : # The build OS is `cygwin'.
    switch "$(default-bits)" {
    case "32" : # The default number of bits is `32'.
      switch "$(host-os)" {
      case "cygwin" : # The host OS is `cygwin'.
        build-triplet = "i686-pc-cygwin" ;
        switch "$(target-os)" {
        case "cygwin" : # The target OS is `cygwin'.
          switch "$(multitarget)" {
          case "no" : # `<multitarget>no'
            switch "$(address-model)" {
            case "32" : # `<address-model>32'
              host-triplet = "i686-pc-cygwin" ;
            case "" :
              errors.error "The value for `<address-model>' feature is empty." ;
            case "*" : # The value for `<address-model>' feature is other than `32'.
              errors.error "`<address-model>$(address-model)' is an unknown property." ;
            }
          case "" :
            errors.error "The value for `<multitarget>' feature is empty." ;
          case "*" : # The value for `<multitarget>' feature is other than `no'.
            errors.error "`<multitarget>$(multitarget)' is an unknown property." ;
          }
        case "" :
          errors.error "an internal error." ;
        case "*" : # The target OS is other than `cygwin'.
          errors.error "an internal error." ;
        }
      case "" :
        errors.error "an internal error." ;
      case "*" : # The host OS is other than `cygwin'.
        errors.error "an internal error." ;
      }
    case "" :
      errors.error "an internal error." ;
    case "*" : # The default number of bits is other than `32'.
      errors.error "an internal error." ;
    }
  case "" :
    errors.error "an internal error." ;
  case "*" : # The build OS is neither `linux', `windows' nor `cygwin'.
    errors.error "an internal error." ;
  }
  if ! $(build-triplet) {
    errors.error "an internal error." ;
  }
  if ! $(host-triplet) {
    errors.error "an internal error." ;
  }
  return $(build-triplet) $(host-triplet) ;
}

rule get-cc ( prefix : properties * : gcc-for-clang ? )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  if ! [ is-valid "$(compiler)" ] {
    errors.error "an internal error." ;
  }
  local prefix-leaf = [ get-prefix-leaf $(properties) ] ;
  local compiler-prefix = "$(prefix)/$(prefix-leaf)" ;
  local result ;
  if ! [ is-builtin-gcc "$(compiler)" ] {
    if [ is-gcc "$(compiler)" ] {
      result = "$(compiler-prefix)/bin/gcc-wrapper" ;
    }
    else if [ is-clang "$(compiler)" ] {
      result = "$(compiler-prefix)/bin/clang-wrapper" ;
    }
    else if [ is-icc "$(compiler)" ] {
      result = "$(compiler-prefix)/bin/icc-wrapper" ;
    }
    else {
      errors.error "an internal error." ;
    }
  }
  return "$(result)" ;
}

rule get-cflags ( properties * )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  local result ;

  local variant = [ feature.get-values <variant> : $(properties) ] ;
  switch "$(variant)" {
  case "debug" :
    if [ is-gcc "$(compiler)" ] {
      result += -g3 ;
    }
    else if [ is-clang "$(compiler)" ] {
      result += -g ;
    }
    else if [ is-icc "$(compiler)" ] {
      result += -g ;
      result += "-debug full" ;
    }
    else {
      errors.error "an internal error." ;
    }
    result += "-O0" ;
    result += "-fno-inline" ;
    result += "-rdynamic" ;
  case "release" :
    result += "-Wno-inline" ;
    result += "-O3" ;
    result += "-finline-functions" ;
  case "profile" :
    result += "-Wno-inline" ;
    result += "-g" ;
    if [ is-gcc "$(compiler)" ] || [ is-clang "$(compiler)" ] {
      result += "-pg" ;
    }
    else if [ is-icc "$(compiler)" ] {
      result += "-p" ;
    }
    else {
      errors.error "an internal error." ;
    }
    result += "-O3" ;
    result += "-finline-functions" ;
    result += "-rdynamic" ;
  case "" :
    errors.error "the value for `<variant>' is empty" ;
  case "*" :
    errors.error "<variant>$(variant): unknown property" ;
  }

  local address-model = [ feature.get-values <address-model> : $(properties) ] ;
  switch "$(address-model)" {
  case "64" :
    result += "-m64" ;
  case "32" :
    result += "-m32" ;
  case "" :
    errors.error "the value for `<address-model>' is empty" ;
  case "*" :
    errors.error "<address-model>$(address-model): unknown property" ;
  }

  local instruction-set = [ feature.get-values <instruction-set> : $(properties) ] ;
  switch "$(instruction-set)" {
  case "generic" :
    # Do nothing.
  case "native" :
    if [ is-gcc "$(compiler)" ] || [ is-clang "$(compiler)" ] {
      result += "-march=native" ;
      result += "-mtune=native" ;
    }
    else if [ is-icc "$(compiler)" ] {
      result += "-xHost" ;
    }
    else {
      errors.error "an internal error." ;
    }
  case "" :
    errors.error "the value for `<instruction-set>' is empty" ;
  case "*" :
    errors.error "<instruction-set>$(instruction-set): unknown property" ;
  }

  local lto = [ feature.get-values <lto> : $(properties) ] ;
  switch "$(lto)" {
  case "off" :
    # Do nothing.
  case "on" :
    if [ is-gcc "$(compiler)" ] || [ is-clang "$(compiler)" ] {
      result += "-flto" ;
    }
    else if [ is-icc "$(compiler)" ] {
      result += "-ipo" ;
    }
    else {
      errors.error "an internal error." ;
    }
  case "" :
    errors.error "the value for `<lto>' is empty" ;
  case "*" :
    errors.error "<lto>$(lto): unknown property" ;
  }

  local correct-call-stack = [ feature.get-values <correct-call-stack> : $(properties) ] ;
  switch "$(correct-call-stack)" {
  case "off" :
    # Do nothing.
  case "on" :
    errors.error "`<correct-call-stack>on' is not supported" ;
    #result += "-fno-omit-frame-pointer" ;
    #result += "-fno-optimize-sibling-calls" ;
  case "" :
    errors.error "the value for `<correct-call-stack>' is empty" ;
  case "*" :
    errors.error "<correct-call-stack>$(correct-call-stack): unknown property" ;
  }

  local ssp = [ feature.get-values <ssp> : $(properties) ] ;
  switch "$(ssp)" {
  case "off" :
    # Do nothing.
  case "on" :
    errors.error "`<ssp>on' is not supported" ;
    #result += "-fstack-protector" ;
    #if [ is-icc "$(compiler)" ] {
    #  result += "-fstack-security-check" ;
    #2A}
  case "all" :
    errors.error "`<ssp>all' is not supported" ;
    #result += "-fstack-protector-all" ;
    #if [ is-icc "$(compiler)" ] {
    #  result += "-fstack-security-check" ;
    #}
  case "" :
    errors.error "the value for `<ssp>' is empty" ;
  case "*" :
    errors.error "<ssp>$(ssp): unknown property" ;
  }

  local memory-checker = [ feature.get-values <memory-checker> : $(properties) ] ;
  switch "$(memory-checker)" {
  case "off" :
    # Do nothing.
  case "on" :
    if [ is-gcc "$(compiler)" ] {
      result += "-fsanitize=address" ;
    }
    else if [ is-clang "$(compiler)" ] {
      result += "-fsanitize=address" ;
    }
    else if [ is-icc "$(compiler)" ] {
      result += "-fp-speculation safe" ;
      result += "-ftrapuv" ;
      result += "-check-pointers=rw" ;
      result += "-check-pointers-dangling=all" ;
      result += "-check-pointers-undimensioned" ;
    }
    else {
      errors.error "an internal error." ;
    }
  case "" :
    errors.error "the value for `<memory-checker>' is empty" ;
  case "*" :
    errors.error "<memory-checker>$(memory-checker): unknown property" ;
  }

  return "$(result:J= )" ;
}

rule get-cxx ( prefix : properties * : gcc-for-clang ? )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  if ! [ is-valid "$(compiler)" ] {
    errors.error "an internal error." ;
  }
  local prefix-leaf = [ get-prefix-leaf $(properties) ] ;
  local compiler-prefix = "$(prefix)/$(prefix-leaf)" ;
  local result ;
  if ! [ is-builtin-gcc "$(compiler)" ] {
    if [ is-gcc "$(compiler)" ] {
      result = "$(compiler-prefix)/bin/g++-wrapper" ;
    }
    else if [ is-clang "$(compiler)" ] {
      result = "$(compiler-prefix)/bin/clang++-wrapper" ;
    }
    else if [ is-icc "$(compiler)" ] {
      result = "$(compiler-prefix)/bin/icpc-wrapper" ;
    }
    else {
      errors.error "an internal error." ;
    }
  }
  return "$(result)" ;
}

rule get-cxxflags ( properties * )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;

  local result = [ get-cflags $(properties) ] ;

  local std = [ feature.get-values <std> : $(properties) ] ;
  switch "$(std)" {
  case "c++03" :
    if [ is-gcc "$(compiler)" ] || [ is-clang "$(compiler)" ] {
      result += "-std=c++03" ;
    }
    else if [ is-icc "$(compiler)" ] {
      # ICC does not have either `-std=c++98' or `-std=c++03'.
      result += "-strict-ansi" ;
      result += "-fno-math-errno" ;
    }
    else {
      errors.error "an internal error." ;
    }
  case "c++11" :
    result += "-std=c++11" ;
  case "c++1y" :
    result += "-std=c++1y" ;
  case "" :
    errors.error "the value for `<std>' is empty" ;
  case "*" :
    errors.error "<std>$(std): unknown property" ;
  }

  local libstdcxx-debug-mode = [ feature.get-values <libstdc++-debug-mode> : $(properties) ] ;
  switch "$(libstdcxx-debug-mode)" {
  case "off" :
    # Do nothing.
  case "on" :
    result += "-D_GLIBCXX_DEBUG" ;
    result += "-D_GLIBCXX_DEBUG_PEDANTIC" ;
  case "" :
    errors.error "the value for `<libstdc++-debug-mode>' is empty" ;
  case "*" :
    errors.error "<libstdc++-debug-mode>$(libstdcxx-debug-mode): unknown property" ;
  }

  return "$(result:J= )" ;
}

rule get-ar ( prefix : properties * : gcc-for-clang ? )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  if ! [ is-valid "$(compiler)" ] {
    errors.error "an internal error." ;
  }
  local prefix-leaf = [ get-prefix-leaf $(properties) ] ;
  local compiler-prefix = "$(prefix)/$(prefix-leaf)" ;
  local result ;
  if [ is-gcc "$(compiler)" ] {
    local version = [ get-frontend-version "$(compiler)" ] ;
    if [ SHELL "/usr/bin/env echo -e '$(version)\\n4.8' | sort -V | head -n 1 | tr -d '\\n'" ] = "$(version)" {
      # GCC older than 4.8.x. `gcc-ar` is not provided.
      # Do nothing.
    }
    else {
      # GCC newer than or equal to 4.8.x. `gcc-ar` is provided.
      result = "$(compiler-prefix)/bin/gcc-ar" ;
    }
  }
  else if [ is-clang "$(compiler)" ] {
    # Do nothing.
  }
  else if [ is-icc "$(compiler)" ] {
    # Do nothing.
  }
  else {
    errors.error "an internal error." ;
  }
  return "$(result)" ;
}

rule get-ranlib ( prefix : properties * : gcc-for-clang ? )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  if ! [ is-valid "$(compiler)" ] {
    errors.error "an internal error." ;
  }
  local prefix-leaf = [ get-prefix-leaf $(properties) ] ;
  local compiler-prefix = "$(prefix)/$(prefix-leaf)" ;
  local result ;
  if [ is-gcc "$(compiler)" ] {
    local version = [ get-frontend-version "$(compiler)" ] ;
    if [ SHELL "/usr/bin/env echo -e '$(version)\\n4.8' | sort -V | head -n 1 | tr -d '\\n'" ] = "$(version)" {
      # GCC older than 4.8.x. `gcc-ranlib` is not provided.
      # Do nothing.
    }
    else {
      # GCC newer than or equal to 4.8.x. `gcc-ranlib` is provided.
      result = "$(compiler-prefix)/bin/gcc-ranlib" ;
    }
  }
  else if [ is-clang "$(compiler)" ] {
    # Do nothing.
  }
  else if [ is-icc "$(compiler)" ] {
    # Do nothing.
  }
  else {
    errors.error "an internal error." ;
  }
  return "$(result)" ;
}

rule get-nm ( prefix : properties * : gcc-for-clang ? )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  if ! [ is-valid "$(compiler)" ] {
    errors.error "an internal error." ;
  }
  local prefix-leaf = [ get-prefix-leaf $(properties) ] ;
  local compiler-prefix = "$(prefix)/$(prefix-leaf)" ;
  local result ;
  if [ is-gcc "$(compiler)" ] {
    local version = [ get-frontend-version "$(compiler)" ] ;
    if [ SHELL "/usr/bin/env echo -e '$(version)\\n4.8' | sort -V | head -n 1 | tr -d '\\n'" ] = "$(version)" {
      # GCC older than 4.8.x. `gcc-nm` is not provided.
      # Do nothing.
    }
    else {
      # GCC newer than or equal to 4.8.x. `gcc-nm` is provided.
      result = "$(compiler-prefix)/bin/gcc-nm" ;
    }
  }
  else if [ is-clang "$(compiler)" ] {
    # Do nothing.
  }
  else if [ is-icc "$(compiler)" ] {
    # Do nothing.
  }
  else {
    errors.error "an internal error." ;
  }
  return "$(result)" ;
}

rule get-environment-commands ( prefix : properties * )
{
  local commands ;

  local triplets = [ get-triplets $(properties) ] ;
  local build-triplet = "$(triplets[1])" ;
  local host-triplet = "$(triplets[2])" ;

  local compiler-prefix = [ get-compiler-prefix "$(prefix)" : $(properties) ] ;
  local compiler-prefix-native = [ path.native "$(compiler-prefix)" ] ;
  local full-prefix = [ get-full-prefix "$(prefix)" : $(properties) ] ;

  local address-model = [ feature.get-values <address-model> : $(properties) ] ;

  # Set `PATH' environment variable.
  local default-bindir-native = [ path.native "$(compiler-prefix)/bin" ] ;
  local address-model-bindir-native = [ path.native "$(compiler-prefix)/address-model-$(address-model)/bin" ] ;
  local full-bindir-native = [ path.native "$(full-prefix)/bin" ] ;
  switch "$(build-triplet)" {
  case "x86_64-unknown-linux-gnu" :
    commands += "PATH=\"$(default-bindir-native)${PATH:+:$PATH}\"" ;
    commands += "PATH=\"$(address-model-bindir-native)${PATH:+:$PATH}\"" ;
    commands += "PATH=\"$(full-bindir-native)${PATH:+:$PATH}\"" ;
    commands += "export PATH" ;
  case "i686-pc-linux-gnu" :
    commands += "PATH=\"$(default-bindir-native)${PATH:+:$PATH}\"" ;
    commands += "PATH=\"$(full-bindir-native)${PATH:+:$PATH}\"" ;
    commands += "export PATH" ;
  case "i686-pc-cygwin" :
    commands += "PATH=\"$(default-bindir-native)${PATH:+;$PATH}\"" ;
    commands += "PATH=\"$(full-bindir-native)${PATH:+;$PATH}\"" ;
  case "x86_64-w64-mingw32" :
    commands += "PATH=\"$(default-bindir-native);$PATH\"" ;
    commands += "PATH=\"$(full-bindir-native);$PATH\"" ;
  case "i686-w64-mingw32" :
    commands += "PATH=\"$(default-bindir-native);$PATH\"" ;
    commands += "PATH=\"$(full-bindir-native);$PATH\"" ;
  case "" :
    errors.error "the value for `--build' is empty" ;
  case "*" :
    errors.error "`--build=$(build-triplet)': unknown option" ;
  }

  local variant = [ feature.get-values "<variant>" : $(properties) ] ;
  local is-debug ;
  if "$(variant)" = "debug" {
    is-debug = "yes" ;
  }

  switch "$(build-triplet)" {
  case "x86_64-unknown-linux-gnu" :
    switch "$(host-triplet)" {
    case "x86_64-unknown-linux-gnu" :
      if "$(is-debug)" {
        commands += "pwd_=`pwd`; cd \"$(compiler-prefix-native)\"; . \"bin/vars64debug.sh\"; cd \"$pwd_\"; unset pwd_" ;
      }
      else {
        commands += "pwd_=`pwd`; cd \"$(compiler-prefix-native)\"; . \"bin/vars64.sh\"; cd \"$pwd_\"; unset pwd_" ;
      }
    case "i686-pc-linux-gnu" :
      if "$(is-debug)" {
        commands += "pwd_=`pwd`; cd \"$(compiler-prefix-native)\"; . \"bin/vars32debug.sh\"; cd \"$pwd_\"; unset pwd_" ;
      }
      else {
        commands += "pwd_=`pwd`; cd \"$(compiler-prefix-native)\"; . \"bin/vars32.sh\"; cd \"$pwd_\"; unset pwd_" ;
      }
    case "i686-pc-cygwin" :
      if "$(is-debug)" {
        commands += "pwd_=`pwd`; cd \"$(compiler-prefix-native)\"; . \"bin/varsdebug.sh\"; cd \"$pwd_\"; unset pwd_" ;
      }
      else {
        commands += "pwd_=`pwd`; cd \"$(compiler-prefix-native)\"; . \"bin/vars.sh\"; cd \"$pwd_\"; unset pwd_" ;
      }
    case "x86_64-w64-mingw32" :
      if "$(is-debug)" {
        commands += "pwd_=`pwd`; cd \"$(compiler-prefix-native)\"; . \"bin/varsdebug.sh\"; cd \"$pwd_\"; unset pwd_" ;
      }
      else {
        commands += "pwd_=`pwd`; cd \"$(compiler-prefix-native)\"; . \"bin/vars.sh\"; cd \"$pwd_\"; unset pwd_" ;
      }
    case "i686-w64-mingw32" :
      if "$(is-debug)" {
        commands += "pwd_=`pwd`; cd \"$(compiler-prefix-native)\"; . \"bin/varsdebug.sh\"; cd \"$pwd_\"; unset pwd_" ;
      }
      else {
        commands += "pwd_=`pwd`; cd \"$(compiler-prefix-native)\"; . \"bin/vars.sh\"; cd \"$pwd_\"; unset pwd_" ;
      }
    case "" :
      errors.error "the value for `--host' is empty" ;
    case "*" :
      errors.error "`--host=$(host-triplet)': unknown option" ;
    }
  case "i686-pc-linux-gnu" :
    switch "$(host-triplet)" {
    case "x86_64-unknown-linux-gnu" :
      errors.error "`--build=i686-pc-linux-gnu' and `--host=x86_64-unknown-linux-gnu' are not compatible" ;
    case "i686-pc-linux-gnu" :
      if "$(is-debug)" {
        commands += "pwd_=`pwd`; cd \"$(compiler-prefix-native)\"; . \"bin/varsdebug.sh\"; cd \"$pwd_\"; unset pwd_" ;
      }
      else {
        commands += "pwd_=`pwd`; cd \"$(compiler-prefix-native)\"; . \"bin/vars.sh\"; cd \"$pwd_\"; unset pwd_" ;
      }
    case "i686-pc-cygwin" :
      if "$(is-debug)" {
        commands += "pwd_=`pwd`; cd \"$(compiler-prefix-native)\"; . \"bin/varsdebug.sh\"; cd \"$pwd_\"; unset pwd_" ;
      }
      else {
        commands += "pwd_=`pwd`; cd \"$(compiler-prefix-native)\"; . \"bin/vars.sh\"; cd \"$pwd_\"; unset pwd_" ;
      }
    case "x86_64-w64-mingw32" :
      if "$(is-debug)" {
        commands += "pwd_=`pwd`; cd \"$(compiler-prefix-native)\"; . \"bin/varsdebug.sh\"; cd \"$pwd_\"; unset pwd_" ;
      }
      else {
        commands += "pwd_=`pwd`; cd \"$(compiler-prefix-native)\"; . \"bin/vars.sh\"; cd \"$pwd_\"; unset pwd_" ;
      }
    case "i686-w64-mingw32" :
      if "$(is-debug)" {
        commands += "pwd_=`pwd`; cd \"$(compiler-prefix-native)\"; . \"bin/varsdebug.sh\"; cd \"$pwd_\"; unset pwd_" ;
      }
      else {
        commands += "pwd_=`pwd`; cd \"$(compiler-prefix-native)\"; . \"bin/vars.sh\"; cd \"$pwd_\"; unset pwd_" ;
      }
    case "" :
      errors.error "the value for `--host' is empty" ;
    case "*" :
      errors.error "`--host=$(host-triplet)': unknown option" ;
    }
  case "i686-pc-cygwin" :
    switch "$(host-triplet)" {
    case "x86_64-unknown-linux-gnu" :
      errors.error "`--build=i686-pc-cygwin' and `--host=x86_64-unknown-linux-gnu' are not compatible" ;
    case "i686-pc-linux-gnu" :
      errors.error "`--build=i686-pc-cygwin' and `--host=i686-pc-linux-gnu' are not compatible" ;
    case "i686-pc-cygwin" :
      if "$(is-debug)" {
        commands += "pwd_=`pwd`; cd \"$(compiler-prefix-native)\"; . \"bin/varsdebug.sh\"; cd \"$pwd_\"; unset pwd_" ;
      }
      else {
        commands += "pwd_=`pwd`; cd \"$(compiler-prefix-native)\"; . \"bin/vars.sh\"; cd \"$pwd_\"; unset pwd_" ;
      }
    case "x86_64-w64-mingw32" :
      errors.error "`--build=i686-pc-cygwin' and `--host=x86_64-w64-mingw32' are not compatible" ;
    case "i686-w64-mingw32" :
      errors.error "`--build=i686-pc-cygwin' and `--hsot=i686-w64-mingw32' are not compatible" ;
    case "" :
      errors.error "the value for `--host' is empty" ;
    case "*" :
      errors.error "`--host=$(host-triplet)': unknown option" ;
    }
  case "x86_64-w64-mingw32" :
    switch "$(host-triplet)" {
    case "x86_64-unknown-linux-gnu" :
      errors.error "`--build=x86_64-w64-mingw32' and `--host=x86_64-unknown-linux-gnu' are not compatible" ;
    case "i686-pc-linux-gnu" :
      errors.error "`--build=x86_64-w64-mingw32' and `--host=i686-pc-linux-gnu' are not compatible" ;
    case "i686-pc-cygwin" :
      errors.error "`--build=x86_64-w64-mingw32' and `--host=i686-pc-cygwin' are not compatible" ;
    case "x86_64-w64-mingw32" :
      errors.error "sorry, unimplemented" ;
    case "i686-w64-mingw32" :
      errors.error "`--build=x86_64-w64-mingw32' and `--host=i686-w64-mingw32' are not compatible" ;
    case "" :
      errors.error "the value for `--host' is empty" ;
    case "*" :
      errors.error "`--host=$(host-triplet)': unknown option" ;
    }
  case "i686-w64-mingw32" :
    switch "$(host-triplet)" {
    case "x86_64-unknown-linux-gnu" :
      errors.error "`--build=x86_64-w64-mingw32' and `--host=x86_64-unknown-linux-gnu' are not compatible" ;
    case "i686-pc-linux-gnu" :
      errors.error "`--build=x86_64-w64-mingw32' and `--host=i686-pc-linux-gnu' are not compatible" ;
    case "i686-pc-cygwin" :
      errors.error "`--build=x86_64-w64-mingw32' and `--host=i686-pc-cygwin' are not compatible" ;
    case "x86_64-w64-mingw32" :
      errors.error "sorry, unimplemented" ;
    case "i686-w64-mingw32" :
      errors.error "`--build=x86_64-w64-mingw32' and `--host=i686-w64-mingw32' are not compatible" ;
    case "" :
      errors.error "the value for `--host' is empty" ;
    case "*" :
      errors.error "`--host=$(host-triplet)': unknown option" ;
    }
  case "" :
    errors.error "the value for `--build' is empty" ;
  case "*" :
    errors.error "`--build=$(build-triplet)': unknown option" ;
  }

  # Set `CPATH' environment variable.
  local full-includedir-native = [ path.native "$(full-prefix)/include" ] ;
  switch "$(build-triplet)" {
  case "x86_64-unknown-linux-gnu" :
    commands += "CPATH=\"$(full-includedir-native)${CPATH:+:$CPATH}\"" ;
    commands += "export CPATH" ;
  case "i686-pc-linux-gnu" :
    commands += "CPATH=\"$(full-includedir-native)${CPATH:+:$CPATH}\"" ;
    commands += "export CPATH" ;
  case "i686-pc-cygwin" :
    commands += "CPATH=\"$(full-includedir-native)${CPATH:+:$CPATH}\"" ;
  case "x86_64-w64-mingw32" :
    commands += "CPATH=\"$(full-includedir-native):$CPATH" ;
  case "i686-w64-mingw32" :
    commands += "CPATH=\"$(full-includedir-native):$CPATH" ;
  case "" :
    errors.error "the value for `--build' is empty" ;
  case "*" :
    errors.error "`--build=$(build-triplet)': unknown option" ;
  }

  # Set `LIBRARY_PATH' environment variable.
  local full-libdir-native = [ path.native "$(full-prefix)/lib" ] ;
  switch "$(build-triplet)" {
  case "x86_64-unknown-linux-gnu" :
    commands += "LIBRARY_PATH=\"$(full-libdir-native)${LIBRARY_PATH:+:$LIBRARY_PATH}\"" ;
    commands += "export LIBRARY_PATH" ;
  case "i686-pc-linux-gnu" :
    commands += "LIBRARY_PATH=\"$(full-libdir-native)${LIBRARY_PATH:+:$LIBRARY_PATH}\"" ;
    commands += "export LIBRARY_PATH" ;
  case "i686-pc-cygwin" :
    commands += "LIBRARY_PATH=\"$(full-libdir-native)${LIBRARY_PATH:+:$LIBRARY_PATH}\"" ;
  case "x86_64-w64-mingw32" :
    commands += "LIBRARY_PATH=\"$(full-libdir-native):$LIBRARY_PATH\"" ;
  case "i686-w64-mingw32" :
    commands += "LIBRARY_PATH=\"$(full-libdir-native):$LIBRARY_PATH\"" ;
  case "" :
    errors.error "the value for `--build' is empty" ;
  case "*" :
    errors.error "`--build=$(build-triplet)': unknown option" ;
  }

  # Set `LD_LIBRARY_PATH' environment variable for `*-linux-gnu'.
  switch "$(build-triplet)" {
  case "x86_64-unknown-linux-gnu" :
    switch "$(host-triplet)" {
    case "x86_64-unknown-linux-gnu" :
      commands += "LD_LIBRARY_PATH=\"$(full-libdir-native)${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}\"" ;
      commands += "export LD_LIBRARY_PATH" ;
    case "i686-pc-linux-gnu" :
      commands += "LD_LIBRARY_PATH=\"$(full-libdir-native)${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}\"" ;
      commands += "export LD_LIBRARY_PATH" ;
    case "i686-pc-cygwin" :
      # Do nothing.
    case "x86_64-w64-mingw32" :
      # Do nothing.
    case "i686-w64-mingw32" :
      # Do nothing.
    case "" :
      errors.error "the value for `--host' is empty" ;
    case "*" :
      errors.error "`--host=$(host-triplet)': unknown option" ;
    }
  case "i686-pc-linux-gnu" :
    switch "$(host-triplet)" {
    case "x86_64-unknown-linux-gnu" :
      errors.error "`--build=i686-pc-linux-gnu' and `--host=x86_64-unknown-linux-gnu' are not compatible" ;
    case "i686-pc-linux-gnu" :
      commands += "LD_LIBRARY_PATH=\"$(full-libdir-native)${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}\"" ;
      commands += "export LD_LIBRARY_PATH" ;
    case "i686-pc-cygwin" :
      # Do nothing.
    case "x86_64-w64-mingw32" :
      # Do nothing.
    case "i686-w64-mingw32" :
      # Do nothing.
    case "" :
      errors.error "the value for `--host' is empty" ;
    case "*" :
      errors.error "`--host=$(host-triplet)': unknown option" ;
    }
  case "i686-pc-cygwin" :
    # Do nothing.
  case "x86_64-w64-mingw32" :
    # Do nothing.
  case "i686-w64-mingw32" :
    # Do nothing.
  case "" :
    errors.error "the value for `--build' is empty" ;
  case "*" :
    errors.error "`--build=$(build-triplet)': unknown option" ;
  }

  local compiler = [ feature.get-values "<compiler-hidden>" : $(properties) ] ;

  if [ is-icc "$(compiler)" ] {
    switch "$(host-triplet)" {
    case "x86_64-unknown-linux-gnu" :
      commands += "eval `bash -c '. /opt/intel/bin/compilervars.sh intel64; echo \"${IDB_HOME:+IDB_HOME=\\\"$IDB_HOME\\\"; export IDB_HOME}\"; echo \"${TBBROOT:+TBBROOT=\\\"$TBBROOT\\\"; export TBBROOT}\"; echo \"${MKLROOT:+MKLROOT=\\\"$MKLROOT\\\"; export MKLROOT}\"; echo \"${IPPROOT:+IPPROOT=\\\"$IPPROOT\\\"; export IPPROOT}\"; echo \"${MIC_LD_LIBRARY_PATH:+MIC_LD_LIBRARY_PATH=\\\"$MIC_LD_LIBRARY_PATH\\\"; export MIC_LD_LIBRARY_PATH}\"; echo \"${INTEL_LICENSE_FILE:+INTEL_LICENSE_FILE=\\\"$INTEL_LICENSE_FILE\\\"; export INTEL_LICENSE_FILE}\"; echo \"${NLSPATH:+NLSPATH=\\\"$NLSPATH\\\"; export NLSPATH}\"; echo \"${MANPATH:+MANPATH=\\\"$MANPATH\\\"; export MANPATH}\"; echo \"${PATH:+PATH=\\\"$PATH\\\"; export PATH}\"; echo \"${LD_LIBRARY_PATH:+LD_LIBRARY_PATH=\\\"$LD_LIBRARY_PATH\\\"; export LD_LIBRARY_PATH}\"; echo \"${DYLD_LIBRARY_PATH:+DYLD_LIBRARY_PATH=\\\"$DYLD_LIBRARY_PATH\\\"; export DYLD_LIBRARY_PATH}\"; echo \"${INCLUDE:+INCLUDE=\\\"$INCLUDE\\\"; export INCLUDE}\"; echo \"${CPATH:+CPATH=\\\"$CPATH\\\"; export CPATH}\"; echo \"${LIBRARY_PATH:+LIBRARY_PATH=\\\"$LIBRARY_PATH\\\"; export LIBRARY_PATH}\"'`" ;
    case "i686-pc-linux-gnu" :
      commands += "eval `bash -c '. /opt/intel/bin/compilervars.sh ia32; echo \"${IDB_HOME:+IDB_HOME=\\\"$IDB_HOME\\\"; export IDB_HOME}\"; echo \"${TBBROOT:+TBBROOT=\\\"$TBBROOT\\\"; export TBBROOT}\"; echo \"${MKLROOT:+MKLROOT=\\\"$MKLROOT\\\"; export MKLROOT}\"; echo \"${IPPROOT:+IPPROOT=\\\"$IPPROOT\\\"; export IPPROOT}\"; echo \"${MIC_LD_LIBRARY_PATH:+MIC_LD_LIBRARY_PATH=\\\"$MIC_LD_LIBRARY_PATH\\\"; export MIC_LD_LIBRARY_PATH}\"; echo \"${INTEL_LICENSE_FILE:+INTEL_LICENSE_FILE=\\\"$INTEL_LICENSE_FILE\\\"; export INTEL_LICENSE_FILE}\"; echo \"${NLSPATH:+NLSPATH=\\\"$NLSPATH\\\"; export NLSPATH}\"; echo \"${MANPATH:+MANPATH=\\\"$MANPATH\\\"; export MANPATH}\"; echo \"${PATH:+PATH=\\\"$PATH\\\"; export PATH}\"; echo \"${LD_LIBRARY_PATH:+LD_LIBRARY_PATH=\\\"$LD_LIBRARY_PATH\\\"; export LD_LIBRARY_PATH}\"; echo \"${DYLD_LIBRARY_PATH:+DYLD_LIBRARY_PATH=\\\"$DYLD_LIBRARY_PATH\\\"; export DYLD_LIBRARY_PATH}\"; echo \"${INCLUDE:+INCLUDE=\\\"$INCLUDE\\\"; export INCLUDE}\"; echo \"${CPATH:+CPATH=\\\"$CPATH\\\"; export CPATH}\"; echo \"${LIBRARY_PATH:+LIBRARY_PATH=\\\"$LIBRARY_PATH\\\"; export LIBRARY_PATH}\"'`" ;
    case "*" :
      errors.error "an internal error." ;
    }
    commands += "AR='/opt/intel/bin/xiar'" ;
    commands += "export AR" ;
    commands += "LD='/opt/intel/bin/xild'" ;
    commands += "export LD" ;
  }

  commands = "$(commands:J=\n)" ;
  return "$(commands)" ;
}

rule get-property-dump-commands ( properties * )
{
  local result ;

  for local f in variant
                 link
                 threading
                 address-model
                 instruction-set
                 std
                 lto
                 memory-checker
                 libstdc++-debug-mode
  {
    local v = [ feature.get-values "<$(f)>" : $(properties) ] ;
    local p ;
    if ! "$(v)" {
      p = "<$(f)>" ;
    }
    else {
      p = "<$(f)>$(v)" ;
    }
    result += "echo \"`LANG=C date`:INFO: $(p)\"" ;
  }

  for local f in compiler
                 multitarget
                 host-os
                 target-os
                 binutils
                 gmp-for-gcc
                 mpfr-for-gcc
                 mpc-for-gcc
                 isl-for-gcc
                 cloog-for-gcc
                 gmp
                 mpfr
                 mpc
                 isl
                 cloog
                 ppl
                 icu4c
                 mpi-backend
                 openmpi
                 boost
                 clang
                 valgrind
                 variant
                 runtime-debugging
                 optimization
                 profiling
                 inlining
                 link
                 runtime-link
                 threading
                 std
                 lto
                 correct-call-stack
                 ssp
                 memory-checker
                 libstdc++-debug-mode
  {
    local v = [ feature.get-values "<$(f)>" : $(properties) ] ;
    local p ;
    if ! "$(v)" {
      p = "<$(f)>" ;
    }
    else {
      p = "<$(f)>$(v)" ;
    }
    result += "echo \"`LANG=C date`:INFO: ($(p))\"" ;
  }

  result += "echo \"`LANG=C date`:INFO: PATH=$PATH\"" ;
  result += "echo \"`LANG=C date`:INFO: CPATH=$CPATH\"" ;
  result += "echo \"`LANG=C date`:INFO: LIBRARY_PATH=$LIBRARY_PATH\"" ;
  result += "echo \"`LANG=C date`:INFO: LD_LIBRARY_PATH=$LD_LIBRARY_PATH\"" ;

  return "$(result:J=\n)" ;
}

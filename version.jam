import errors ;
import numbers ;
import regex ;

rule normalize ( ver )
{
  local tmp = [ regex.match "^([1234567890]+\.[1234567890]+\.[1234567890]+)$" : "$(ver)" : 1 ] ;
  if ! $(tmp)
  {
    tmp = [ regex.match "^([1234567890]+\.[1234567890]+)$" : "$(ver)" : 1 ] ;
    tmp = "$(tmp).0" ;
    if ! $(tmp)
    {
      tmp = [ regex.match "^([1234567890]+)$" : "$(ver)" : 1 ] ;
      tmp = "$(tmp).0.0" ;
      if ! $(tmp)
      {
        errors.user-error "version string format error" ;
      }
    }
  }
  return "$(tmp)" ;
}

rule less ( lhs rhs )
{
  lhs = [ normalize "$(lhs)" ] ;
  rhs = [ normalize "$(rhs)" ] ;
  local lhs-major = [ regex.match "^([1234567890]+)\.[1234567890]+\.[1234567890]+$" : "$(lhs)" : 1 ] ;
  local lhs-minor = [ regex.match "^[1234567890]+\.([1234567890]+)\.[1234567890]+$" : "$(lhs)" : 1 ] ;
  local lhs-patch = [ regex.match "^[1234567890]+\.[1234567890]+\.([1234567890]+)$" : "$(lhs)" : 1 ] ;
  local rhs-major = [ regex.match "^([1234567890]+)\.[1234567890]+\.[1234567890]+$" : "$(rhs)" : 1 ] ;
  local rhs-minor = [ regex.match "^[1234567890]+\.([1234567890]+)\.[1234567890]+$" : "$(rhs)" : 1 ] ;
  local rhs-patch = [ regex.match "^[1234567890]+\.[1234567890]+\.([1234567890]+)$" : "$(rhs)" : 1 ] ;
  if [ numbers.less "$(lhs-major)" "$(rhs-major)" ]
  {
    return true ;
  }
  else
  {
    if [ numbers.less "$(rhs-major)" "$(lhs-major)" ]
    {
      # Do nothing.
    }
    else
    {
      if [ numbers.less "$(lhs-minor)" "$(rhs-minor)" ]
      {
        return true ;
      }
      else
      {
        if [ numbers.less "$(rhs-minor)" "$(lhs-minor)" ]
        {
          # Do nothing.
        }
        else
        {
          if [ numbers.less "$(lhs-patch)" "$(rhs-patch)" ]
          {
            return true ;
          }
        }
      }
    }
  }
}

rule get-highest-ver ( vers * )
{
  if ! $(vers[1])
  {
    # Do nothing.
  }
  else
  {
    local tmp = "$(vers[1])" ;
    tmp = [ normalize "$(tmp)" ] ;
    for local i in $(vers)
    {
      i = [ normalize "$(i)" ] ;
      if [ less "$(tmp)" "$(i)" ]
      {
        tmp = "$(i)" ;
      }
    }
    return "$(tmp)" ;
  }
}

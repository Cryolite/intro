project intro/icu4c ;

import alias ;
import errors ;
import feature ;
import make ;
import path ;
import regex ;
import "$(INTRO_ROOT_DIR)/compilers"
  : is-gcc
    is-clang
    is-icc
    get-compiler-description
    get-compiler-prefix
    get-bindir
    get-libdir
    get-includedir
    get-triplets
    get-cc
    get-cflags
    get-cxx
    get-cxxflags
    get-environment-commands
    get-property-dump-commands
  ;


rule compiler-dep-req ( properties * )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  local result ;
  if [ is-gcc "$(compiler)" ] {
    result += "<source>../gcc//install" ;
  }
  else if [ is-clang "$(compiler)" ] {
    result += "<source>../gcc//install" ;
    result += "<source>../clang//install" ;
  }
  else if [ is-icc "$(compiler)" ] {
    result += "<source>../gcc//install" ;
    result += "<source>../icc//install" ;
  }
  else {
    errors.error "an internal error." ;
  }
  return $(result) ;
}

alias compiler-dep : : <conditional>@compiler-dep-req ;
explicit compiler-dep ;



for local version in $(ICU4C_VERSIONS) {
  local version-string = [ regex.replace "$(version)" "\\." "_" ] ;
  make "$(INTRO_ROOT_DIR)/icu4c-$(version-string)-src.tgz" : : @download ;
  explicit "$(INTRO_ROOT_DIR)/icu4c-$(version-string)-src.tgz" ;
}

rule download ( targets * : sources * : properties * )
{
  local version = [ feature.get-values <icu4c-hidden> : $(properties) ] ;
  VERSION on $(targets) = "$(version)" ;
  local version-string = [ regex.replace "$(version)" "\\." "_" ] ;
  URL on $(targets) = http://download.icu-project.org/files/icu4c/$(version)/icu4c-$(version-string)-src.tgz ;
  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions download
{
  $(PROPERTY_DUMP_COMMANDS)

  rm -rf '$(<)' || exit 1
  if [ -n '$(STREAM)' ]; then
    ( cd '$(<:D)' && wget -- '$(URL)' >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(<:D)' && wget --quiet -- '$(URL)' )
  fi
  if [ $? -ne 0 ]; then
    echo    'ERROR: failed to download ICU4C $(VERSION) tarball.' 1>&2
    echo -n 'ERROR: failed to download ICU4C $(VERSION) tarball.' | $(AWACS)
    rm -rf '$(<)'
    exit 1
  fi
  [ -f '$(<)' ] || exit 1
  exit 0
}



for local version in $(ICU4C_VERSIONS) {
  # Use `readme.html' file as a target representing the completion of
  # decompression action. It is suitable for the purpose because of the
  # following reasons;
  #
  #   - The name of this file is considered stable even if the version
  #     changes.
  #   - This file won't be modified during the build procedure.
  #
  local version-string = [ regex.replace "$(version)" "\\." "_" ] ;
  make "$(INTRO_ROOT_DIR)/icu-$(version)/readme.html"
    : "$(INTRO_ROOT_DIR)/icu4c-$(version-string)-src.tgz"
    : @expand
    ;
  explicit "$(INTRO_ROOT_DIR)/icu-$(version)/readme.html" ;
}

rule expand ( targets * : sources * : properties * )
{
  local version = [ feature.get-values <icu4c-hidden> : $(properties) ] ;
  VERSION on $(targets) = "$(version)" ;
  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions expand
{
  $(PROPERTY_DUMP_COMMANDS)

  rm -rf '$(<:D)' || exit 1
  rm -rf '$(INTRO_ROOT_DIR)/icu' || exit 1
  [ -f '$(>)' ] || exit 1
  if [ -n '$(STREAM)' ]; then
    tar xzvf '$(>)' --directory='$(INTRO_ROOT_DIR)' >> '$(STREAM)' 2>&1
  else
    tar xzf '$(>)' --directory='$(INTRO_ROOT_DIR)'
  fi
  if [ $? -ne 0 ]; then
    echo    'ERROR: failed to expand ICU4C $(VERSION) tarball.' 1>&2
    echo -n 'ERROR: failed to expand ICU4C $(VERSION) tarball.' | $(AWACS)
    rm -rf '$(<:D)'
    rm -rf '$(INTRO_ROOT_DIR)/icu'
    exit 1
  fi
  [ -d '$(INTRO_ROOT_DIR)/icu' ] || exit 1
  mv '$(INTRO_ROOT_DIR)/icu' '$(<:D)' || exit 1
  # If the timestamp of the tarball's contents is restored, the modification
  # time of the source directory could be older than the one of the tarball.
  # Such behavior is not desirable because the decompression always happens.
  # Therefore, `touch' is required.
  touch --no-create '$(<)'
  [ -f '$(<)' ] || exit 1
  exit 0
}



rule srcdir-req ( properties * )
{
  local version = [ feature.get-values <icu4c-hidden> : $(properties) ] ;
  return "<source>$(INTRO_ROOT_DIR)/icu-$(version)/readme.html/$(DEFAULT_PROPERTIES)" ;
}

alias srcdir : : <conditional>@srcdir-req ;
explicit srcdir ;



rule location-conditional ( properties * )
{
  local includedir = [ get-includedir "$(PREFIX)" : $(properties) ] ;
  return "<location>$(includedir)" ;
}

make unicode/uchar.h
  : compiler-dep
    srcdir
  : @make-install
  : $(USE_COMPILER)
    $(USE_MULTITARGET)
    $(USE_ICU4C)
    $(USE_ADDRESS_MODEL)
    $(USE_INSTRUCTION_SET)
    <conditional>@location-conditional
  ;
explicit unicode/uchar.h ;

rule make-install ( targets * : sources * : properties * )
{
  local compiler = [ feature.get-values <compiler> : $(properties) ] ;
  local compiler-description = [ get-compiler-description $(compiler) ] ;
  COMPILER_DESCRIPTION on $(targets) = "$(compiler-description)" ;

  local version = [ feature.get-values <icu4c> : $(properties) ] ;
  VERSION on $(targets) = "$(version)" ;

  # Set the path to the source directory.
  local srcdir = "$(INTRO_ROOT_DIR)/icu-$(version)" ;
  SRCDIR on $(targets) = [ path.native "$(srcdir)" ] ;

  local objdir = "$(INTRO_ROOT_DIR)/objdir" ;
  local objdir-native = [ path.native "$(objdir)" ] ;
  OBJDIR on $(targets) = "$(objdir-native)" ;

  OPTIONS on $(targets) = ;

  local variant = [ feature.get-values <variant> : $(properties) ] ;

  if "$(variant)" = "debug" {
    OPTIONS on $(targets) += "--enable-debug" ;
    OPTIONS on $(targets) += "--disable-release" ;
  }

  local triplets = [ get-triplets $(properties) ] ;
  local build-triplet = "$(triplets[1])" ;
  local host-triplet = "$(triplets[2])" ;
  BUILD_TRIPLET on $(targets) += "$(build-triplet)" ;
  HOST_TRIPLET on $(targets) += "$(host-triplet)" ;

  if "$(host-triplet)" = "x86_64-unknown-linux-gnu" || "$(host-triplet)" = "i686-pc-linux-gnu" {
    if [ is-gcc "$(compiler)" ] || [ is-clang "$(compiler)" ] {
      OPTIONS on $(targets) += "Linux" ;
    }
    else if [ is-icc "$(compiler)" ] {
      OPTIONS on $(targets) += "Linux/ICC" ;
    }
    else {
      errors.error "an internal error." ;
    }
  }
  else if "$(host-triplet)" = "x86_64-w64-mingw32" || "$(host-triplet)" = "i686-w64-mingw32" {
    OPTIONS on $(targets) += "MinGW" ;
  }
  else if "$(host-triplet)" = "i686-pc-cygwin" {
    OPTIONS on $(targets) += "Cygwin" ;
  }
  else {
    errors.error "an internal error." ;
  }

  # Set `--prefix' option for `configure' script.
  local compiler-prefix = [ get-compiler-prefix "$(PREFIX)" : $(properties) ] ;
  local compiler-prefix-native = [ path.native "$(compiler-prefix)" ] ;
  OPTIONS on $(targets) += "--prefix='$(compiler-prefix-native)'" ;

  # Set `--bindir' option for `configure' script.
  local bindir = [ get-bindir "$(PREFIX)" : $(properties) ] ;
  local bindir-native = [ path.native "$(bindir)" ] ;
  OPTIONS on $(targets) += "--bindir='$(bindir-native)'" ;

  # Set `--libdir' option for `configure' script.
  local libdir = [ get-libdir "$(PREFIX)" : $(properties) ] ;
  local libdir-native = [ path.native "$(libdir)" ] ;
  OPTIONS on $(targets) += "--libdir='$(libdir-native)'" ;

  # Set `--includedir' option for `configure' script.
  local includedir = [ get-includedir "$(PREFIX)" : $(properties) ] ;
  local includedir-native = [ path.native "$(includedir)" ] ;
  OPTIONS on $(targets) += "--includedir='$(includedir-native)'" ;

  # Set `--build' and `--host' options for `configure' script.
  OPTIONS on $(targets) += "--build=$(build-triplet)" ;
  OPTIONS on $(targets) += "--host=$(host-triplet)" ;

  OPTIONS on $(targets) += "--enable-strict" ;

  OPTIONS on $(targets) += "--enable-shared" ;
  OPTIONS on $(targets) += "--enable-static" ;

  local threading = [ feature.get-values <threading> : $(properties) ] ;

  if "$(threading)" = "single" {
    OPTIONS on $(targets) += "--disable-threads" ;
  }
  else if "$(threading)" = "multi" {
    OPTIONS on $(targets) += "--enable-threads" ;
  }
  else {
    errors.error "an internal error." ;
  }

  if "$(host-triplet)" = "x86_64-unknown-linux-gnu" || "$(host-triplet)" = "x86_64-w64-mingw32" {
    OPTIONS on $(targets) += "--with-library-bits=64" ;
  }
  else if "$(host-triplet)" = "i686-pc-linux-gnu" || "$(host-triplet)" = "i686-w64-mingw32" || "$(host-triplet)" = "i686-pc-cygwin" {
    OPTIONS on $(targets) += "--with-library-bits=32" ;
  }
  else {
    errors.error "an internal error." ;
  }

  local cc = [ get-cc "$(PREFIX)" : $(properties) ] ;
  local cc-native = [ path.native "$(cc)" ] ;
  OPTIONS on $(targets) += "CC='$(cc-native)'" ;

  local cflags = [ get-cflags $(properties) ] ;
  if "$(cflags)" {
    if [ is-icc "$(compiler)" ] {
      # Without the following option, some tests fail.
      cflags = "$(cflags) -fp-model precise" ;
    }
    CFLAGS on $(targets) = "$(cflags)" ;
    OPTIONS on $(targets) += "CFLAGS='@$(objdir-native)/cflags'" ;
  }

  local cxx = [ get-cxx "$(PREFIX)" : $(properties) ] ;
  local cxx-native = [ path.native "$(cxx)" ] ;
  OPTIONS on $(targets) += "CXX='$(cxx-native)'" ;

  local cxxflags = [ get-cxxflags $(properties) ] ;
  if "$(cxxflags)" {
    if [ is-icc "$(compiler)" ] {
      # Without the following option, some tests fail.
      cxxflags = "$(cxxflags) -fp-model precise" ;
    }
    CXXFLAGS on $(targets) = "$(cxxflags)" ;
    OPTIONS on $(targets) += "CXXFLAGS='@$(objdir-native)/cxxflags'" ;
  }

  local environment-commands = [ get-environment-commands "$(PREFIX)" : $(properties) ] ;
  ENVIRONMENT_COMMANDS on $(targets) = "$(environment-commands)" ;

  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions make-install
{
  $(PROPERTY_DUMP_COMMANDS)

  [ -x '$(SRCDIR)/source/runConfigureICU' ] || exit 1
  chmod +x '$(SRCDIR)/source/config.sub' || exit 1
  [ `'$(SRCDIR)/source/config.sub' $(BUILD_TRIPLET)` = $(BUILD_TRIPLET) ] || exit 1
  [ `'$(SRCDIR)/source/config.sub' $(HOST_TRIPLET)` = $(HOST_TRIPLET) ] || exit 1

  # Clean up objdir `$(OBJDIR)'.
  { mkdir -p '$(OBJDIR)' && ( cd '$(OBJDIR)' && rm -rf * ); } || exit 1

  $(ENVIRONMENT_COMMANDS)

  ( cd '$(OBJDIR)' && echo -n '$(CFLAGS)' > cflags ) || exit 1
  ( cd '$(OBJDIR)' && echo -n '$(CXXFLAGS)' > cxxflags ) || exit 1

  if [ -n '$(STREAM)' ]; then
    ( cd '$(OBJDIR)' && '$(SRCDIR)/source/runConfigureICU' $(OPTIONS) >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(OBJDIR)' && '$(SRCDIR)/source/runConfigureICU' $(OPTIONS) )
  fi
  if [ $? -ne 0 ]; then
    mv '$(OBJDIR)' "$(INTRO_ROOT_DIR)/objdir_$$"
    echo    "ERROR:$$: failed to \`runConfigureICU' ICU4C $(VERSION) ($(COMPILER_DESCRIPTION))." 1>&2
    echo -n "ERROR:$$: failed to \`runConfigureICU' ICU4C $(VERSION) ($(COMPILER_DESCRIPTION))." | $(AWACS)
    exit 1
  fi

  # Check the creation of `Makefile'.
  [ -f '$(OBJDIR)/Makefile' ] || exit 1

  if [ -n '$(STREAM)' ]; then
    ( cd '$(OBJDIR)' && make --jobs=$(CONCURRENCY) >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(OBJDIR)' && make --jobs=$(CONCURRENCY) )
  fi
  if [ $? -ne 0 ]; then
    mv '$(OBJDIR)' "$(INTRO_ROOT_DIR)/objdir_$$"
    echo    "ERROR:$$: failed to \`make' ICU4C $(VERSION) ($(COMPILER_DESCRIPTION))." 1>&2
    echo -n "ERROR:$$: failed to \`make' ICU4C $(VERSION) ($(COMPILER_DESCRIPTION))." | $(AWACS)
    exit 1
  fi

  if [ -n '$(STREAM)' ]; then
    # `make check' of ICU4C does not support parallel build.
    ( cd '$(OBJDIR)' && make check >> '$(STREAM)' 2>&1 )
  else
    # `make check' of ICU4C does not support parallel build.
    ( cd '$(OBJDIR)' && make check )
  fi
  if [ $? -ne 0 ]; then
    if uname | grep -Fq 'CYGWIN' && [ `echo $(VERSION) `x = 49.1.1x ]; then
      echo    "WARNING: failed to \`make check' ICU4C $(VERSION) ($(COMPILER_DESCRIPTION))." 1>&2
      echo -n "WARNING: failed to \`make check' ICU4C $(VERSION) ($(COMPILER_DESCRIPTION))." | $(AWACS)
    else
      mv '$(OBJDIR)' "$(INTRO_ROOT_DIR)/objdir_$$"
      echo    "ERROR:$$: failed to \`make check' ICU4C $(VERSION) ($(COMPILER_DESCRIPTION))." 1>&2
      echo -n "ERROR:$$: failed to \`make check' ICU4C $(VERSION) ($(COMPILER_DESCRIPTION))." | $(AWACS)
      exit 1
    fi
  fi

  if [ -n '$(STREAM)' ]; then
    ( cd '$(OBJDIR)' && make install >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(OBJDIR)' && make install )
  fi
  if [ $? -ne 0 ]; then
    mv '$(OBJDIR)' "$(INTRO_ROOT_DIR)/objdir_$$"
    echo    "ERROR:$$: failed to \`make install' ICU4C $(VERSION) ($(COMPILER_DESCRIPTION))." 1>&2
    echo -n "ERROR:$$: failed to \`make install' ICU4C $(VERSION) ($(COMPILER_DESCRIPTION))." | $(AWACS)
    exit 1
  fi

  # Clean up objdir `$(OBJDIR)'.
  rm -rf '$(OBJDIR)' || exit 1

  [ -f '$(<)' ] || exit 1

  echo -n 'ICU4C $(VERSION) ($(COMPILER_DESCRIPTION)) was successfully built.' | $(AWACS)
  exit 0
}



alias install : unicode/uchar.h ;
explicit install ;

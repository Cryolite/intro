project intro/icu4c ;

import alias ;
import errors ;
import feature ;
import make ;
import path ;
import regex ;
import "$(INTRO_ROOT_DIR)/compilers"
  : is-gcc
    is-clang
    get-compiler-description
    get-compiler-prefix
    get-bindir
    get-libdir
    get-includedir
    get-cc
    get-cflags
    get-cxx
    get-cxxflags
    get-environment-commands
  ;


rule assert-specified ( feature : properties * )
{
  local val = [ feature.get-values $(feature) : $(properties) ] ;
  if $(val) = unspecified {
    errors.error $(feature) is not specified for ICU4C build. ;
  }
}

rule assert-unspecified ( feature : properties * )
{
  local val = [ feature.get-values $(feature) : $(properties) ] ;
  if $(val) != unspecified {
    errors.error $(feature) is not valid for ICU4C build. ;
  }
}



rule compiler-dep-req ( properties * )
{
  assert-specified   <triplet>            : $(properties) ;
  assert-unspecified <multitarget>        : $(properties) ;
  assert-specified   <multitarget-hidden> : $(properties) ;
  assert-specified   <compiler>           : $(properties) ;
  assert-unspecified <compiler-hidden>    : $(properties) ;
  assert-unspecified <icu4c>              : $(properties) ;
  assert-specified   <icu4c-hidden>       : $(properties) ;

  local multitarget = [ feature.get-values <multitarget-hidden> : $(properties) ] ;
  local compiler = [ feature.get-values <compiler> : $(properties) ] ;
  local result ;
  if [ is-gcc $(compiler) ]
  {
    result = <source>../gcc//install/<multitarget>$(multitarget)/<multitarget-hidden>unspecified ;
  }
  else if [ is-clang $(compiler) ]
  {
    result = <source>../clang//install ;
  }
  else
  {
    errors.error "an internal error." ;
  }
  return $(result) ;
}

alias compiler-dep : : <conditional>@compiler-dep-req ;
explicit compiler-dep ;



for local version in $(ICU4C_VERSIONS)
{
  local version-string = [ regex.replace "$(version)" "\\." "_" ] ;
  make "$(INTRO_ROOT_DIR)/icu4c-$(version-string)-src.tgz" : : @download ;
  explicit "$(INTRO_ROOT_DIR)/icu4c-$(version-string)-src.tgz" ;
}

rule download ( targets * : sources * : properties * )
{
  if $(sources[1])
  {
    errors.error "an internal error." ;
  }
  assert-unspecified <triplet>            : $(properties) ;
  assert-unspecified <multitarget>        : $(properties) ;
  assert-unspecified <multitarget-hidden> : $(properties) ;
  assert-unspecified <compiler>           : $(properties) ;
  assert-unspecified <compiler-hidden>    : $(properties) ;
  assert-unspecified <icu4c>              : $(properties) ;
  assert-specified   <icu4c-hidden>       : $(properties) ;

  local version = [ feature.get-values <icu4c-hidden> : $(properties) ] ;
  VERSION on $(targets) = $(version) ;
  local version-string = [ regex.replace "$(version)" "\\." "_" ] ;
  URL on $(targets) = http://download.icu-project.org/files/icu4c/$(version)/icu4c-$(version-string)-src.tgz ;
}
actions download
{
  rm -rf '$(<)' || exit 1
  if [ -n '$(STREAM)' ]; then
    ( cd '$(<:D)' && wget -- '$(URL)' >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(<:D)' && wget --quiet -- '$(URL)' )
  fi
  if [ $? -ne 0 ]; then
    echo    'ERROR: failed to download ICU4C $(VERSION) tarball.' 1>&2
    echo -n 'ERROR: failed to download ICU4C $(VERSION) tarball.' | $(AWACS)
    rm -rf '$(<)'
    exit 1
  fi
  [ -f '$(<)' ] || exit 1
  exit 0
}



for local version in $(ICU4C_VERSIONS)
{
  # Use `readme.html' file as a target representing the completion of
  # decompression action. It is suitable for the purpose because of the
  # following reasons;
  #
  #   - The name of this file is considered stable even if the version
  #     changes.
  #   - This file won't be modified during the build procedure.
  #
  local version-string = [ regex.replace "$(version)" "\\." "_" ] ;
  make "$(INTRO_ROOT_DIR)/icu-$(version)/readme.html"
    : "$(INTRO_ROOT_DIR)/icu4c-$(version-string)-src.tgz"
    : @expand
    ;
  explicit "$(INTRO_ROOT_DIR)/icu-$(version)/readme.html" ;
}

rule expand ( targets * : sources * : properties * )
{
  if ! $(sources[1])
  {
    errors.error "an internal error." ;
  }
  if $(sources[2])
  {
    errors.error "an internal error." ;
  }
  assert-unspecified <triplet>            : $(properties) ;
  assert-unspecified <multitarget>        : $(properties) ;
  assert-unspecified <multitarget-hidden> : $(properties) ;
  assert-unspecified <compiler>           : $(properties) ;
  assert-unspecified <compiler-hidden>    : $(properties) ;
  assert-unspecified <icu4c>              : $(properties) ;
  assert-specified   <icu4c-hidden>       : $(properties) ;

  local version = [ feature.get-values <icu4c-hidden> : $(properties) ] ;
  VERSION on $(targets) = $(version) ;
}
actions expand
{
  rm -rf '$(<:D)' || exit 1
  rm -rf '$(INTRO_ROOT_DIR)/icu' || exit 1
  [ -f '$(>)' ] || exit 1
  if [ -n '$(STREAM)' ]; then
    tar xzvf '$(>)' --directory='$(INTRO_ROOT_DIR)' >> '$(STREAM)' 2>&1
  else
    tar xzf '$(>)' --directory='$(INTRO_ROOT_DIR)'
  fi
  if [ $? -ne 0 ]; then
    echo    'ERROR: failed to expand ICU4C $(VERSION) tarball.' 1>&2
    echo -n 'ERROR: failed to expand ICU4C $(VERSION) tarball.' | $(AWACS)
    rm -rf '$(<:D)'
    rm -rf '$(INTRO_ROOT_DIR)/icu'
    exit 1
  fi
  [ -d '$(INTRO_ROOT_DIR)/icu' ] || exit 1
  mv '$(INTRO_ROOT_DIR)/icu' '$(<:D)' || exit 1
  # If the timestamp of the tarball's contents is restored, the modification
  # time of the source directory could be older than the one of the tarball.
  # Such behavior is not desirable because the decompression always happens.
  # Therefore, `touch' is required.
  touch --no-create '$(<)'
  [ -f '$(<)' ] || exit 1
  exit 0
}



rule srcdir-req ( properties * )
{
  assert-unspecified <triplet>            : $(properties) ;
  assert-unspecified <multitarget>        : $(properties) ;
  assert-unspecified <multitarget-hidden> : $(properties) ;
  assert-unspecified <compiler>           : $(properties) ;
  assert-unspecified <compiler-hidden>    : $(properties) ;
  assert-unspecified <icu4c>              : $(properties) ;
  assert-specified   <icu4c-hidden>       : $(properties) ;

  local version = [ feature.get-values <icu4c-hidden> : $(properties) ] ;
  return <source>"$(INTRO_ROOT_DIR)/icu-$(version)/readme.html/$(DEFAULT_PROPERTIES)" ;
}

alias srcdir : : <conditional>@srcdir-req ;
explicit srcdir ;



rule location-conditional ( properties * )
{
  local includedir = [ get-includedir "$(PREFIX)" : $(properties) : $(GCC_FOR_CLANG) ] ;
  return "<location>$(includedir)" ;
}

make unicode/uchar.h
  : compiler-dep
    srcdir/<triplet>unspecified/<multitarget-hidden>unspecified/<compiler>unspecified
  : @make-install
  : $(USE_ICU4C)
    <conditional>@location-conditional
  ;
explicit unicode/uchar.h ;

rule make-install ( targets * : sources * : properties * )
{
  assert-specified   <triplet>            : $(properties) ;
  assert-unspecified <multitarget>        : $(properties) ;
  assert-specified   <multitarget-hidden> : $(properties) ;
  assert-specified   <compiler>           : $(properties) ;
  assert-unspecified <compiler-hidden>    : $(properties) ;
  assert-specified   <icu4c>              : $(properties) ;
  assert-specified   <icu4c-hidden>       : $(properties) ;

  local compiler = [ feature.get-values <compiler> : $(properties) ] ;
  local compiler-description = [ get-compiler-description $(compiler) ] ;
  COMPILER_DESCRIPTION on $(targets) = "$(compiler-description)" ;

  local version = [ feature.get-values <icu4c> : $(properties) ] ;
  VERSION on $(targets) = $(version) ;

  # Set the path to the source directory.
  local srcdir = "$(INTRO_ROOT_DIR)/icu-$(version)" ;
  SRCDIR on $(targets) = [ path.native "$(srcdir)" ] ;

  local objdir = "$(INTRO_ROOT_DIR)/objdir" ;
  OBJDIR on $(targets) = [ path.native "$(objdir)" ] ;

  OPTIONS on $(targets) = ;

  local variant = [ feature.get-values <variant> : $(properties) ] ;
  if $(variant) = debug
  {
    OPTIONS on $(targets) += --enable-debug ;
    OPTIONS on $(targets) += --disable-release ;
  }

  local triplet = [ feature.get-values <triplet> : $(properties) ] ;
  if $(triplet) = i686-pc-cygwin
  {
    OPTIONS on $(targets) += Cygwin ;
  }
  else if $(triplet) = i686-w64-mingw32 || $(triplet) = x86_64-w64-mingw32
  {
    OPTIONS on $(targets) += MinGW ;
  }
  else if $(triplet) = i686-pc-linux-gnu || $(triplet) = x86_64-unknown-linux-gnu
  {
    OPTIONS on $(targets) += Linux ;
  }
  else
  {
    errors.error "an internal error." ;
  }

  # Set `--prefix' option for `configure' script.
  local compiler-prefix = [ get-compiler-prefix "$(PREFIX)" : $(compiler) : $(GCC_FOR_CLANG) ] ;
  local compiler-prefix-native = [ path.native "$(compiler-prefix)" ] ;
  OPTIONS on $(targets) += "--prefix='$(compiler-prefix-native)'" ;

  # Set `--bindir' option for `configure' script.
  local bindir = [ get-bindir "$(PREFIX)" : $(properties) : $(GCC_FOR_CLANG) ] ;
  local bindir-native = [ path.native "$(bindir)" ] ;
  OPTIONS on $(targets) += "--bindir='$(bindir-native)'" ;

  # Set `--libdir' option for `configure' script.
  local libdir = [ get-libdir "$(PREFIX)" : $(properties) : $(GCC_FOR_CLANG) ] ;
  local libdir-native = [ path.native "$(libdir)" ] ;
  OPTIONS on $(targets) += "--libdir='$(libdir-native)'" ;

  # Set `--includedir' option for `configure' script.
  local includedir = [ get-includedir "$(PREFIX)" : $(properties) : $(GCC_FOR_CLANG) ] ;
  local includedir-native = [ path.native "$(includedir)" ] ;
  OPTIONS on $(targets) += "--includedir='$(includedir-native)'" ;

  # Set `--build' and `--host' options for `configure' script.
  TRIPLET on $(targets) = $(triplet) ;
  OPTIONS on $(targets) += --build=$(triplet) ;
  OPTIONS on $(targets) += --host=$(triplet) ;

  OPTIONS on $(targets) += --enable-shared ;
  OPTIONS on $(targets) += --enable-static ;

  if $(triplet) = i686-pc-linux-gnu || $(triplet) = i686-pc-cygwin || $(triplet) = i686-w64-mingw32
  {
    OPTIONS on $(targets) += --with-library-bits=32 ;
  }
  else if $(triplet) = x86_64-unknown-linux-gnu || $(triplet) = x86_64-w64-mingw32
  {
    OPTIONS on $(targets) += --with-library-bits=64 ;
  }
  else
  {
    errors.error "an internal error." ;
  }

  local cc = [ get-cc "$(PREFIX)" : $(properties) : $(GCC_FOR_CLANG) ] ;
  cc = [ path.native "$(cc)" ] ;
  OPTIONS on $(targets) += "CC='$(cc)'" ;

  local cflags = [ get-cflags $(properties) ] ;
  if $(cflags)
  {
    CFLAGS on $(targets) = "$(cflags)" ;
  }

  local cxx = [ get-cxx "$(PREFIX)" : $(properties) : $(GCC_FOR_CLANG) ] ;
  cxx = [ path.native "$(cxx)" ] ;
  OPTIONS on $(targets) += "CXX='$(cxx)'" ;

  local cxxflags = [ get-cxxflags $(properties) ] ;
  if $(cxxflags)
  {
    CXXFLAGS on $(targets) = "$(cxxflags)" ;
  }

  local environment-commands = [ get-environment-commands "$(PREFIX)" : $(properties) : $(GCC_FOR_CLANG) ] ;
  ENVIRONMENT_COMMANDS on $(targets) = "$(environment-commands)" ;
}
actions make-install
{
  [ -x '$(SRCDIR)/source/runConfigureICU' ] || exit 1
  chmod +x '$(SRCDIR)/source/config.sub' || exit 1
  [ `'$(SRCDIR)/source/config.sub' $(TRIPLET)` = $(TRIPLET) ] || exit 1

  # Clean up objdir `$(OBJDIR)'.
  { mkdir -p '$(OBJDIR)' && ( cd '$(OBJDIR)' && rm -rf * ); } || exit 1

  $(ENVIRONMENT_COMMANDS)

  if [ -n '$(STREAM)' ]; then
    ( cd '$(OBJDIR)' && CFLAGS='$(CFLAGS)' CXXFLAGS='$(CXXFLAGS)' '$(SRCDIR)/source/runConfigureICU' $(OPTIONS) >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(OBJDIR)' && CFLAGS='$(CFLAGS)' CXXFLAGS='$(CXXFLAGS)' '$(SRCDIR)/source/runConfigureICU' $(OPTIONS) )
  fi
  if [ $? -ne 0 ]; then
    echo    "ERROR: failed to \`runConfigureICU' ICU4C $(VERSION) ($(COMPILER_DESCRIPTION), $(TRIPLET))." 1>&2
    echo -n "ERROR: failed to \`runConfigureICU' ICU4C $(VERSION) ($(COMPILER_DESCRIPTION), $(TRIPLET))." | $(AWACS)
    exit 1
  fi

  # Check the creation of `Makefile'.
  [ -f '$(OBJDIR)/Makefile' ] || exit 1

  if [ -n '$(STREAM)' ]; then
    ( cd '$(OBJDIR)' && make --jobs=$(CONCURRENCY) >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(OBJDIR)' && make --jobs=$(CONCURRENCY) )
  fi
  if [ $? -ne 0 ]; then
    echo    "ERROR: failed to \`make' ICU4C $(VERSION) ($(COMPILER_DESCRIPTION), $(TRIPLET))." 1>&2
    echo -n "ERROR: failed to \`make' ICU4C $(VERSION) ($(COMPILER_DESCRIPTION), $(TRIPLET))." | $(AWACS)
    exit 1
  fi

  if [ -n '$(STREAM)' ]; then
    # `make check' of ICU4C does not support parallel build.
    ( cd '$(OBJDIR)' && make check >> '$(STREAM)' 2>&1 )
  else
    # `make check' of ICU4C does not support parallel build.
    ( cd '$(OBJDIR)' && make check )
  fi
  if [ $? -ne 0 ]; then
    if uname | grep -Fq 'CYGWIN' && [ `echo $(VERSION) `x = 49.1.1x ]; then
      echo    "WARNING: failed to \`make check' ICU4C $(VERSION) ($(COMPILER_DESCRIPTION), $(TRIPLET))." 1>&2
      echo -n "WARNING: failed to \`make check' ICU4C $(VERSION) ($(COMPILER_DESCRIPTION), $(TRIPLET))." | $(AWACS)
    else
      echo    "ERROR: failed to \`make check' ICU4C $(VERSION) ($(COMPILER_DESCRIPTION), $(TRIPLET))." 1>&2
      echo -n "ERROR: failed to \`make check' ICU4C $(VERSION) ($(COMPILER_DESCRIPTION), $(TRIPLET))." | $(AWACS)
      exit 1
    fi
  fi

  if [ -n '$(STREAM)' ]; then
    ( cd '$(OBJDIR)' && make install >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(OBJDIR)' && make install )
  fi
  if [ $? -ne 0 ]; then
    echo    "ERROR: failed to \`make install' ICU4C $(VERSION) ($(COMPILER_DESCRIPTION), $(TRIPLET))." 1>&2
    echo -n "ERROR: failed to \`make install' ICU4C $(VERSION) ($(COMPILER_DESCRIPTION), $(TRIPLET))." | $(AWACS)
    exit 1
  fi

  [ -f '$(<)' ] || exit 1

  # Clean up objdir `$(OBJDIR)'.
  rm -rf '$(OBJDIR)' || exit 1

  echo -n 'ICU4C $(VERSION) ($(COMPILER_DESCRIPTION), $(TRIPLET)) was successfully built.' | $(AWACS)
  exit 0
}



alias install : unicode/uchar.h ;
explicit install ;

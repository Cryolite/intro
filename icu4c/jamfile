project intro/icu4c ;

import alias ;
import errors ;
import feature ;
import make ;
import path ;
import regex ;
import "$(INTRO_ROOT_DIR)/compilers"
  : is-gcc
    is-clang
    is-icc
    get-full-prefix
    get-triplets
    get-cc
    get-cflags
    get-cxx
    get-cxxflags
    get-ar-command-substitution
    get-ranlib-command-substitution
    get-nm-command-substitution
    get-environment-commands
    get-property-dump-commands
  ;

.here = [ regex.match "Jamfile<(.*)>" : "$(__name__)" : 1 ] ;
.here = [ path.make "$(.here)" ] ;
.here-relative = [ path.relative "$(.here)" "$(INTRO_ROOT_DIR)" ] ;


rule compiler-dep-req ( properties * )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  local result ;
  if [ is-gcc "$(compiler)" ] {
    result += "<source>../gcc//install" ;
  }
  else if [ is-clang "$(compiler)" ] {
    result += "<source>../gcc//install" ;
    result += "<source>../clang//install" ;
  }
  else if [ is-icc "$(compiler)" ] {
    result += "<source>../gcc//install" ;
    result += "<source>../icc//install" ;
  }
  else {
    errors.error "an internal error." ;
  }
  return $(result) ;
}

alias compiler-dep : : <conditional>@compiler-dep-req ;
explicit compiler-dep ;


for local version in $(ICU4C_VERSIONS) {
  local version-string = [ regex.replace "$(version)" "\\." "_" ] ;
  make "$(INTRO_ROOT_DIR)/icu4c-$(version-string)-src.tgz" : : @download ;
  explicit "$(INTRO_ROOT_DIR)/icu4c-$(version-string)-src.tgz" ;
}

rule download ( targets * : sources * : properties * )
{
  HERE on $(targets) = [ path.native "$(.here)" ] ;
  HERE_RELATIVE on $(targets) = [ path.native "$(.here-relative)" ] ;
  local version = [ feature.get-values <icu4c-hidden> : $(properties) ] ;
  local version-string = [ regex.replace "$(version)" "\\." "_" ] ;
  URL on $(targets) = http://download.icu-project.org/files/icu4c/$(version)/icu4c-$(version-string)-src.tgz ;
  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions download
{
  bash -s << 'EOS'
  exec >> '$(STDOUT_)' 2>> '$(STDERR_)'
$(PROPERTY_DUMP_COMMANDS)
  LINENO_ADJ=`grep -Fn 0d706101-8e6c-44c4-acdc-3cf3c86562ec '$(HERE)/jamfile' | grep -Eo '^[[:digit:]]+'`
  LINENO_ADJ=`expr $LINENO_ADJ - $LINENO + 1`
  PS4='+$(HERE_RELATIVE)/jamfile:`expr $LINENO + $LINENO_ADJ`: '
  set -ex
  rm -f '$(<)'
  trap "rm -f '$(<)'" ERR HUP INT QUIT TERM
  ( cd '$(<:D)' && wget -q -t 3 --no-clobber -- '$(URL)' )
  [ -f '$(<)' ]
EOS
}


for local version in $(ICU4C_VERSIONS) {
  # Use `readme.html' file as a target representing the completion of
  # decompression action. It is suitable for the purpose because of the
  # following reasons;
  #
  #   - The name of this file is considered stable even if the version
  #     changes.
  #   - This file won't be modified during the build procedure.
  #
  local version-string = [ regex.replace "$(version)" "\\." "_" ] ;
  make "$(INTRO_ROOT_DIR)/icu-$(version)/readme.html"
    : "$(INTRO_ROOT_DIR)/icu4c-$(version-string)-src.tgz"
    : @expand
    ;
  explicit "$(INTRO_ROOT_DIR)/icu-$(version)/readme.html" ;
}

rule expand ( targets * : sources * : properties * )
{
  HERE on $(targets) = [ path.native "$(.here)" ] ;
  HERE_RELATIVE on $(targets) = [ path.native "$(.here-relative)" ] ;
  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions expand
{
  bash -s << 'EOS'
  exec >> '$(STDOUT_)' 2>> '$(STDERR_)'
$(PROPERTY_DUMP_COMMANDS)
  LINENO_ADJ=`grep -Fn c5500518-8f06-4cee-bc41-321c27a38dad '$(HERE)/jamfile' | grep -Eo '^[[:digit:]]+'`
  LINENO_ADJ=`expr $LINENO_ADJ - $LINENO + 1`
  PS4='+$(HERE_RELATIVE)/jamfile:`expr $LINENO + $LINENO_ADJ`: '
  set -ex
  rm -rf '$(<:D)'
  rm -rf '$(INTRO_ROOT_DIR)/icu'
  [ -f '$(>)' ]
  trap "rm -rf '$(>)' '$(INTRO_ROOT_DIR)/icu' '$(<:D)'" ERR HUP INT QUIT TERM
  tar xzf '$(>)' -C '$(INTRO_ROOT_DIR)'
  [ -d '$(INTRO_ROOT_DIR)/icu' ]
  mv -n '$(INTRO_ROOT_DIR)/icu' '$(<:D)'
  # If the timestamp of the tarball's contents is restored, the modification
  # time of the source directory could be older than the one of the tarball.
  # Such behavior is not desirable because the decompression always happens.
  # Therefore, `touch' is required.
  touch --no-create '$(<)'
  [ -f '$(<)' ]
EOS
}


rule srcdir-req ( properties * )
{
  local version = [ feature.get-values <icu4c-hidden> : $(properties) ] ;
  return "<source>$(INTRO_ROOT_DIR)/icu-$(version)/readme.html/$(DEFAULT_PROPERTIES)" ;
}

alias srcdir : : <conditional>@srcdir-req ;
explicit srcdir ;


rule location-conditional ( properties * )
{
  local full-prefix = [ get-full-prefix "$(PREFIX)" : $(properties) ] ;
  local includedir = "$(full-prefix)/include" ;
  return "<location>$(includedir)" ;
}

make unicode/uchar.h
  : compiler-dep
    srcdir
  : @make-install
  : $(USE_COMPILER)
    $(USE_MULTITARGET)
    $(USE_ICU4C)
    <conditional>@location-conditional
  ;
explicit unicode/uchar.h ;

rule make-install ( targets * : sources * : properties * )
{
  HERE on $(targets) = [ path.native "$(.here)" ] ;
  HERE_RELATIVE on $(targets) = [ path.native "$(.here-relative)" ] ;

  # Sets the path to the source directory.
  local version = [ feature.get-values <icu4c> : $(properties) ] ;
  local srcdir = "$(INTRO_ROOT_DIR)/icu-$(version)" ;
  SRCDIR on $(targets) = [ path.native "$(srcdir)" ] ;

  # Sets the path to `objdir`.
  local objdir = "$(INTRO_ROOT_DIR)/objdir" ;
  local objdir-native = [ path.native "$(objdir)" ] ;
  OBJDIR on $(targets) = "$(objdir-native)" ;

  OPTIONS on $(targets) = ;

  local variant = [ feature.get-values <variant> : $(properties) ] ;

  if "$(variant)" = "debug" {
    OPTIONS on $(targets) += "--enable-debug" ;
    OPTIONS on $(targets) += "--disable-release" ;
  }

  local triplets = [ get-triplets $(properties) ] ;
  local build-triplet = "$(triplets[1])" ;
  local host-triplet = "$(triplets[2])" ;
  if "$(build-triplet)" = "x86_64-unknown-linux-gnu" && "$(host-triplet)" = "i686-pc-linux-gnu" {
    build-triplet = "$(host-triplet)" ;
  }
  BUILD_TRIPLET on $(targets) = "$(build-triplet)" ;
  HOST_TRIPLET on $(targets) = "$(host-triplet)" ;

  local compiler = [ feature.get-values <compiler> : $(properties) ] ;

  if "$(host-triplet)" = "x86_64-unknown-linux-gnu" || "$(host-triplet)" = "i686-pc-linux-gnu" {
    if [ is-gcc "$(compiler)" ] || [ is-clang "$(compiler)" ] {
      OPTIONS on $(targets) += "Linux" ;
    }
    else if [ is-icc "$(compiler)" ] {
      OPTIONS on $(targets) += "Linux/ICC" ;
    }
    else {
      errors.error "an internal error." ;
    }
  }
  else if "$(host-triplet)" = "x86_64-w64-mingw32" || "$(host-triplet)" = "i686-w64-mingw32" {
    OPTIONS on $(targets) += "MinGW" ;
  }
  else if "$(host-triplet)" = "i686-pc-cygwin" {
    OPTIONS on $(targets) += "Cygwin" ;
  }
  else {
    errors.error "an internal error." ;
  }

  # Sets `--prefix' option for `configure' script.
  local full-prefix = [ get-full-prefix "$(PREFIX)" : $(properties) ] ;
  local full-prefix-native = [ path.native "$(full-prefix)" ] ;
  OPTIONS on $(targets) += "--prefix='$(full-prefix-native)'" ;

  # Sets `--build' and `--host' options for `configure' script.
  OPTIONS on $(targets) += "--build=$(build-triplet)" ;
  OPTIONS on $(targets) += "--host=$(host-triplet)" ;

  OPTIONS on $(targets) += "--enable-strict" ;

  # Sets the link variants for `configure' script.
  local link = [ feature.get-values <link> : $(properties) ] ;
  switch "$(link)" {
  case "shared" :
    OPTIONS on $(targets) += "--enable-shared" ;
    OPTIONS on $(targets) += "--disable-static" ;
  case "static" :
    OPTIONS on $(targets) += "--disable-shared" ;
    OPTIONS on $(targets) += "--enable-static" ;
  case "" :
    errors.error "the value for `<link>' is empty" ;
  case "*" :
    errors.error "<link>$(link): an unknown property" ;
  }

  if "$(host-triplet)" = "x86_64-unknown-linux-gnu" || "$(host-triplet)" = "x86_64-w64-mingw32" {
    OPTIONS on $(targets) += "--with-library-bits=64" ;
  }
  else if "$(host-triplet)" = "i686-pc-linux-gnu" || "$(host-triplet)" = "i686-w64-mingw32" || "$(host-triplet)" = "i686-pc-cygwin" {
    OPTIONS on $(targets) += "--with-library-bits=32" ;
  }
  else {
    errors.error "an internal error." ;
  }

  local cc = [ get-cc "$(PREFIX)" : $(properties) ] ;
  if "$(cc)" {
    local cc-native = [ path.native "$(cc)" ] ;
    OPTIONS on $(targets) += "CC='$(cc-native)'" ;
  }

  local cflags = [ get-cflags $(properties) ] ;
  if "$(cflags)" {
    if [ is-icc "$(compiler)" ] {
      # Without the following option, some tests fail.
      cflags = "$(cflags) -fp-model precise" ;
    }
    CFLAGS on $(targets) = "$(cflags)" ;
    OPTIONS on $(targets) += "CFLAGS='@$(objdir-native)/cflags'" ;
  }

  local cxx = [ get-cxx "$(PREFIX)" : $(properties) ] ;
  if "$(cxx)" {
    local cxx-native = [ path.native "$(cxx)" ] ;
    OPTIONS on $(targets) += "CXX='$(cxx-native)'" ;
  }

  local cxxflags = [ get-cxxflags $(properties) ] ;
  if "$(cxxflags)" {
    if [ is-icc "$(compiler)" ] {
      # Without the following option, some tests fail.
      cxxflags = "$(cxxflags) -fp-model precise" ;
    }
    CXXFLAGS on $(targets) = "$(cxxflags)" ;
    OPTIONS on $(targets) += "CXXFLAGS='@$(objdir-native)/cxxflags'" ;
  }

  local ar-command-substitution = [ get-ar-command-substitution "$(PREFIX)" : $(properties) ] ;
  if "$(ar-command-substitution)" {
    OPTIONS on $(targets) += "AR=\"$(ar-command-substitution)\"" ;
  }

  local ranlib-command-substitution = [ get-ranlib-command-substitution "$(PREFIX)" : $(properties) ] ;
  if "$(ranlib-command-substitution)" {
    OPTIONS on $(targets) += "RANLIB=\"$(ranlib-command-substitution)\"" ;
  }

  local nm-command-substitution = [ get-nm-command-substitution "$(PREFIX)" : $(properties) ] ;
  if "$(nm-command-substitution)" {
    OPTIONS on $(targets) += "NM=\"$(nm-command-substitution)\"" ;
  }

  local environment-commands = [ get-environment-commands "$(PREFIX)" : $(properties) ] ;
  ENVIRONMENT_COMMANDS on $(targets) = "$(environment-commands)" ;

  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions make-install
{
  bash -s << 'EOS'
  exec >> '$(STDOUT_)' 2>> '$(STDERR_)'
$(ENVIRONMENT_COMMANDS)
$(PROPERTY_DUMP_COMMANDS)
  LINENO_ADJ=`grep -Fn dc2fb18a-972a-4f77-806f-47d6bc5e2fa1 '$(HERE)/jamfile' | grep -Eo '^[[:digit:]]+'`
  LINENO_ADJ=`expr $LINENO_ADJ - $LINENO + 1`
  PS4='+$(HERE_RELATIVE)/jamfile:`expr $LINENO + $LINENO_ADJ`: '
  set -ex

  rm -rf '$(OBJDIR)'

  cleanup ()
  {
    if [ -d '$(OBJDIR)' ]; then
      mv -n '$(OBJDIR)' "$(INTRO_ROOT_DIR)/objdir_$$"
    fi
  }
  trap cleanup ERR HUP INT QUIT TERM

  # Creates `objdir`.
  ( cd '$(INTRO_ROOT_DIR)' && mkdir objdir )

  [ -x '$(SRCDIR)/source/runConfigureICU' ]
  chmod +x '$(SRCDIR)/source/config.sub'
  [ `'$(SRCDIR)/source/config.sub' $(BUILD_TRIPLET)` = $(BUILD_TRIPLET) ]
  [ `'$(SRCDIR)/source/config.sub' $(HOST_TRIPLET)` = $(HOST_TRIPLET) ]

  ( cd '$(OBJDIR)' && echo -n '$(CFLAGS)' > cflags )
  ( cd '$(OBJDIR)' && echo -n '$(CXXFLAGS)' > cxxflags )

  ( cd '$(OBJDIR)' && '$(SRCDIR)/source/runConfigureICU' $(OPTIONS) )

  # Checks the creation of `Makefile`.
  [ -f '$(OBJDIR)/Makefile' ]

  ( cd '$(OBJDIR)' && make --jobs=$(CONCURRENCY) )

  total_status=0

  # `make check` of ICU4C does not support parallel build.
  ( cd '$(OBJDIR)' && make check ) || total_status=$?

  ( cd '$(OBJDIR)' && make install )

  if [ $total_status -eq 0 ]; then
    # Cleans up `objdir`.
    rm -r '$(OBJDIR)'
  fi

  [ -f '$(<)' ]
EOS
}


alias install : unicode/uchar.h ;
explicit install ;

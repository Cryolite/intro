project intro/openmpi ;

import alias ;
import errors ;
import feature ;
import make ;
import path ;
import regex ;
import "$(INTRO_ROOT_DIR)/compilers"
  : is-gcc
    is-clang
    is-icc
    get-compiler-prefix
    get-triplets
    get-cc
    get-cxx
    get-ar
    get-ranlib
    get-nm
    get-environment-commands
    get-property-dump-commands
  ;

.here = [ regex.match "Jamfile<(.*)>" : "$(__name__)" : 1 ] ;
.here = [ path.make "$(.here)" ] ;
.here-relative = [ path.relative "$(.here)" "$(INTRO_ROOT_DIR)" ] ;


rule compiler-dep-req ( properties * )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  local result ;
  if [ is-gcc "$(compiler)" ] {
    result += "<source>../gcc//install" ;
  }
  else if [ is-clang "$(compiler)" ] {
    result += "<source>../gcc//install" ;
    result += "<source>../clang//install" ;
  }
  else if [ is-icc "$(compiler)" ] {
    result += "<source>../gcc//install" ;
    result += "<source>../icc//install" ;
  }
  else {
    errors.error "an internal error." ;
  }
  return $(result) ;
}

alias compiler-dep : : <conditional>@compiler-dep-req ;
explicit compiler-dep ;


make "$(INTRO_ROOT_DIR)/openmpi-$(OPENMPI).tar.bz2" : : @download ;
explicit "$(INTRO_ROOT_DIR)/openmpi-$(OPENMPI).tar.bz2" ;

rule download ( targets * : sources * : properties * )
{
  HERE on $(targets) = [ path.native "$(.here)" ] ;
  HERE_RELATIVE on $(targets) = [ path.native "$(.here-relative)" ] ;
  local version = [ feature.get-values <openmpi-hidden> : $(properties) ] ;
  local minor = [ regex.match "^([0-9]+\\.[0-9]+)(\\.[0-9]+)?$" : "$(version)" : 1 ] ;
  URL on $(targets) = http://www.open-mpi.org/software/ompi/v$(minor)/downloads/openmpi-$(version).tar.bz2 ;
  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions download
{
  bash -s << 'EOS'
  exec >> '$(STDOUT_)' 2>> '$(STDERR_)'
$(PROPERTY_DUMP_COMMANDS)
  LINENO_ADJ=`grep -Fn 4b8bc89f-b60e-4909-9aa8-2ef462ee22a0 '$(HERE)/jamfile' | grep -Eo '^[[:digit:]]+'`
  LINENO_ADJ=`expr $LINENO_ADJ - $LINENO + 1`
  PS4='+$(HERE_RELATIVE)/jamfile:`expr $LINENO + $LINENO_ADJ`: '
  set -ex
  rm -f '$(<)'
  trap "rm -f '$(<)'" ERR HUP INT QUIT TERM
  ( cd '$(<:D)' && wget -q -t 3 --no-clobber -- '$(URL)' )
  [ -f '$(<)' ]
EOS
}


# Use `README' file as a target representing the completion of
# decompression action. It is suitable for the purpose because of the
# following reasons;
#
#   - The name of this file is considered stable even if the version
#     changes.
#   - This file won't be modified during the build procedure.
#
make "$(INTRO_ROOT_DIR)/openmpi-$(OPENMPI)/README"
  : "$(INTRO_ROOT_DIR)/openmpi-$(OPENMPI).tar.bz2"
  : @expand
  ;
explicit "$(INTRO_ROOT_DIR)/openmpi-$(OPENMPI)/README" ;

rule expand ( targets * : sources * : properties * )
{
  HERE on $(targets) = [ path.native "$(.here)" ] ;
  HERE_RELATIVE on $(targets) = [ path.native "$(.here-relative)" ] ;
  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions expand
{
  bash -s << 'EOS'
  exec >> '$(STDOUT_)' 2>> '$(STDERR_)'
$(PROPERTY_DUMP_COMMANDS)
  LINENO_ADJ=`grep -Fn 587aae9c-bacc-4b03-b73c-e4bea53019dc '$(HERE)/jamfile' | grep -Eo '^[[:digit:]]+'`
  LINENO_ADJ=`expr $LINENO_ADJ - $LINENO + 1`
  PS4='+$(HERE_RELATIVE)/jamfile:`expr $LINENO + $LINENO_ADJ`: '
  set -ex
  rm -rf '$(<:D)'
  [ -f '$(>)' ]
  trap "rm -rf '$(>)' '$(<:D)'" ERR HUP INT QUIT TERM
  tar xjf '$(>)' -C '$(INTRO_ROOT_DIR)'
  # If the timestamp of the tarball's contents is restored, the modification
  # time of the source directory could be older than the one of the tarball.
  # Such behavior is not desirable because the decompression always happens.
  # Therefore, `touch' is required.
  touch --no-create '$(<)'
  [ -f '$(<)' ]
EOS
}


rule srcdir-req ( properties * )
{
  local version = [ feature.get-values <openmpi-hidden> : $(properties) ] ;
  return "<source>$(INTRO_ROOT_DIR)/openmpi-$(version)/README/$(DEFAULT_PROPERTIES)" ;
}

alias srcdir : : <conditional>@srcdir-req ;
explicit srcdir ;


rule location-conditional ( properties * )
{
  local compiler-prefix = [ get-compiler-prefix "$(PREFIX)" : $(properties) ] ;
  local address-model = [ feature.get-values <address-model> : $(properties) ] ;
  local includedir ;
  switch "$(address-model)" {
  case 64 :
    includedir = "$(compiler-prefix)/address-model-64/include" ;
  case 32 :
    includedir = "$(compiler-prefix)/address-model-32/include" ;
  case "" :
    errors.error "the value for `<address-model>' is empty" ;
  case * :
    errors.error "`<address-model>$(address-model)': unknown property" ;
  }
  return "<location>$(includedir)" ;
}

make mpi.h
  : compiler-dep
    srcdir
  : @make-install
  : $(USE_COMPILER)
    $(USE_MULTITARGET)
    $(USE_OPENMPI)
    <conditional>@location-conditional
  ;
explicit mpi.h ;

rule make-install ( targets * : sources * : properties * )
{
  HERE on $(targets) = [ path.native "$(.here)" ] ;
  HERE_RELATIVE on $(targets) = [ path.native "$(.here-relative)" ] ;

  # Sets the path to the source directory.
  local version = [ feature.get-values <openmpi> : $(properties) ] ;
  local srcdir = "$(INTRO_ROOT_DIR)/openmpi-$(version)" ;
  SRCDIR on $(targets) = [ path.native "$(srcdir)" ] ;

  # Sets the path to `objdir`.
  local objdir = "$(INTRO_ROOT_DIR)/objdir" ;
  local objdir-native = [ path.native "$(objdir)" ] ;
  OBJDIR on $(targets) = "$(objdir-native)" ;

  OPTIONS on $(targets) = ;

  local compiler-prefix = [ get-compiler-prefix "$(PREFIX)" : $(properties) ] ;

  local address-model = [ feature.get-values <address-model> : $(properties) ] ;

  local openmpi-prefix = "$(compiler-prefix)/address-model-$(address-model)" ;
  local openmpi-prefix-native = [ path.native "$(openmpi-prefix)" ] ;
  OPTIONS on $(targets) += "--prefix='$(openmpi-prefix-native)'" ;

  # Sets `--build' and `--host' options for `configure' script.
  local triplets = [ get-triplets $(properties) ] ;
  local build-triplet = "$(triplets[1])" ;
  local host-triplet = "$(triplets[2])" ;
  BUILD_TRIPLET on $(targets) = "$(build-triplet)" ;
  HOST_TRIPLET on $(targets) = "$(host-triplet)" ;
  OPTIONS on $(targets) += "--build=$(build-triplet)" ;
  OPTIONS on $(targets) += "--host=$(host-triplet)" ;

  local variant = [ feature.get-values <variant> : $(properties) ] ;
  if "$(variant)" != "release" {
    errors.error "an internal error" ;
  }

  OPTIONS on $(targets) += "--disable-mpi-fortran" ;
  OPTIONS on $(targets) += "--disable-mpi-cxx" ;

  local link = [ feature.get-values <link> : $(properties) ] ;
  if "$(link)" != "shared" {
    errors.error "an internal error" ;
  }

  local threading = [ feature.get-values <threading> : $(properties) ] ;
  if "$(threading)" != "multi" {
    errors.error "an internal error" ;
  }

  local compiler = [ feature.get-values <compiler> : $(properties) ] ;

  # See https://github.com/Cryolite/intro/issues/12
  if [ is-clang "$(compiler)" ] {
    OPTIONS on $(targets) += "--disable-visibility" ;
  }

  local cc = [ get-cc "$(PREFIX)" : $(properties) ] ;
  if "$(cc)" {
    local cc-native = [ path.native "$(cc)" ] ;
    OPTIONS on $(targets) += "CC='$(cc-native)'" ;
  }

  local cxx = [ get-cxx "$(PREFIX)" : $(properties) ] ;
  if "$(cxx)" {
    local cxx-native = [ path.native "$(cxx)" ] ;
    OPTIONS on $(targets) += "CXX='$(cxx-native)'" ;
  }

  switch "$(address-model)" {
  case 64 :
    OPTIONS on $(targets) += "CFLAGS='-m64'" ;
    OPTIONS on $(targets) += "CXXFLAGS='-m64'" ;
    OPTIONS on $(targets) += "LDFLAGS='-m64'" ;
  case 32 :
    OPTIONS on $(targets) += "CFLAGS='-m32'" ;
    OPTIONS on $(targets) += "CXXFLAGS='-m32'" ;
    OPTIONS on $(targets) += "LDFLAGS='-m32'" ;
  case "" :
    errors.error "the value for `<address-model>' is empty" ;
  case * :
    errors.error "`<address-model>$(address-model)': unknown property" ;
  }

  local ar = [ get-ar "$(PREFIX)" : $(properties) ] ;
  if "$(ar)" {
    local ar-native = [ path.native "$(ar)" ] ;
    OPTIONS on $(targets) += "AR='$(ar-native)'" ;
  }

  local ranlib = [ get-ranlib "$(PREFIX)" : $(properties) ] ;
  if "$(ranlib)" {
    local ranlib-native = [ path.native "$(ranlib)" ] ;
    OPTIONS on $(targets) += "RANLIB='$(ranlib-native)'" ;
  }

  local nm = [ get-nm "$(PREFIX)" : $(properties) ] ;
  if "$(nm)" {
    local nm-native = [ path.native "$(nm)" ] ;
    OPTIONS on $(targets) += "NM='$(nm-native)'" ;
  }

  local environment-commands = [ get-environment-commands "$(PREFIX)" : $(properties) ] ;
  ENVIRONMENT_COMMANDS on $(targets) = "$(environment-commands)" ;

  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions make-install
{
  bash -s << 'EOS'
  exec >> '$(STDOUT_)' 2>> '$(STDERR_)'
$(ENVIRONMENT_COMMANDS)
$(PROPERTY_DUMP_COMMANDS)
  LINENO_ADJ=`grep -Fn 3f03e12b-1c78-4b79-a56c-e450c13d8190 '$(HERE)/jamfile' | grep -Eo '^[[:digit:]]+'`
  LINENO_ADJ=`expr $LINENO_ADJ - $LINENO + 1`
  PS4='+$(HERE_RELATIVE)/jamfile:`expr $LINENO + $LINENO_ADJ`: '
  set -ex

  rm -rf '$(OBJDIR)'

  cleanup ()
  {
    if [ -d '$(OBJDIR)' ]; then
      mv -n '$(OBJDIR)' "$(INTRO_ROOT_DIR)/objdir_$$"
    fi
  }
  trap cleanup ERR HUP INT QUIT TERM

  # Creates `objdir`.
  ( cd '$(INTRO_ROOT_DIR)' && mkdir objdir )

  [ -x '$(SRCDIR)/configure' ]
  [ -x '$(SRCDIR)/config/config.sub' ]
  [ `'$(SRCDIR)/config/config.sub' $(BUILD_TRIPLET)` = $(BUILD_TRIPLET) ]
  [ `'$(SRCDIR)/config/config.sub' $(HOST_TRIPLET)` = $(HOST_TRIPLET) ]

  ( cd '$(OBJDIR)' && '$(SRCDIR)/configure' $(OPTIONS) )

  # Checks the creation of `Makefile`.
  [ -f '$(OBJDIR)/Makefile' ]

  ( cd '$(OBJDIR)' && make --jobs=$(CONCURRENCY) )

  ( cd '$(OBJDIR)' && make --jobs=$(CONCURRENCY) check )

  ( cd '$(OBJDIR)' && make install )

  # Cleans up `objdir`.
  rm -r '$(OBJDIR)'

  [ -f '$(<)' ]
EOS
}


alias install : "mpi.h/$(ADDRESS_MODEL_SENSIBLE_DEFAULT_RELEASE_PROPERTIES)" ;
explicit install ;

project intro/clang ;

import alias ;
import errors ;
import feature ;
import make ;
import path ;
import regex ;
import "$(INTRO_ROOT_DIR)/compilers"
  : is-gcc
    is-builtin-gcc
    is-clang
    is-icc
    get-frontend-version
    get-backend-gcc
    get-compiler-description
    get-compiler-prefix
    get-default-bindir
    get-default-libdir
    get-default-debug-libdir
    get-default-includedir
    get-bindir
    get-libdir
    get-includedir
    get-compiler-triplets
    get-triplets
    get-cc
    get-cflags
    get-cxx
    get-cxxflags
    get-environment-commands
    get-property-dump-commands
  ;


rule compiler-dep-req ( properties * )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  local result ;
  if [ is-gcc "$(compiler)" ] {
    result += "<source>../gcc//install" ;
  }
  else if [ is-clang "$(compiler)" ] {
    result += "<source>../gcc//install" ;
  }
  else if [ is-icc "$(compiler)" ] {
    result += "<source>../gcc//install" ;
    result += "<source>../icc//install" ;
  }
  else {
    errors.error "an internal error." ;
  }
  return $(result) ;
}

alias compiler-dep : : <conditional>@compiler-dep-req ;
explicit compiler-dep ;



local rule get-version-impl ( properties * )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  local clang = [ feature.get-values <clang-hidden> : $(properties) ] ;

  local result ;
  if [ is-gcc "$(compiler)" ] {
    if "$(clang)" = "unspecified" {
      errors.error "an internal error" ;
    }
    result = "$(clang)" ;
  }
  else if [ is-clang "$(compiler)" ] {
    if [ regex.match "^(clang-trunk-.+)" : "$(compiler)" : 1 ] {
      result = "trunk" ;
    }
    else {
      result = [ get-frontend-version "$(compiler)" ] ;
    }
  }
  else if [ is-icc "$(compiler)" ] {
    if "$(clang)" = "unspecified" {
      errors.error "an internal error." ;
    }
    result = "$(clang)" ;
  }
  else {
    errors.error "an internal error" ;
  }
  return $(result) ;
}



for local version in $(CLANG_VERSIONS) {
  if $(version) != trunk {
    make "$(INTRO_ROOT_DIR)/llvm-$(version).src.tar.gz" : : @download ;
    explicit "$(INTRO_ROOT_DIR)/llvm-$(version).src.tar.gz" ;
  }
}

rule download ( targets * : sources * : properties * )
{
  local version = [ get-version-impl $(properties) ] ;
  VERSION on $(targets) = $(version) ;
  LLVM_SRC_URL on $(targets) = "http://llvm.org/releases/$(version)/llvm-$(version).src.tar.gz" ;
  CLANG_SRC_URL on $(targets) = "http://llvm.org/releases/$(version)/clang-$(version).src.tar.gz" ;
  COMPILER_RT_SRC_URL on $(targets) = "http://llvm.org/releases/$(version)/compiler-rt-$(version).src.tar.gz" ;
  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions download
{
  $(PROPERTY_DUMP_COMMANDS)

  ( cd '$(INTRO_ROOT_DIR)' && rm -rf 'llvm-$(VERSION).src.tar.gz' ) || exit 1
  ( cd '$(INTRO_ROOT_DIR)' && rm -rf 'clang-$(VERSION).src.tar.gz' ) || exit 1
  ( cd '$(INTRO_ROOT_DIR)' && rm -rf 'compiler-rt-$(VERSION).src.tar.gz' ) || exit 1

  if [ -n '$(STREAM)' ]; then
    ( cd '$(<:D)' && wget -- '$(LLVM_SRC_URL)' >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(<:D)' && wget --quiet -- '$(LLVM_SRC_URL)' )
  fi
  if [ $? -ne 0 ]; then
    echo    'ERROR: failed to download LLVM $(VERSION) tarball.' 1>&2
    echo -n 'ERROR: failed to download LLVM $(VERSION) tarball.' | $(AWACS)
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf 'llvm-$(VERSION).src.tar.gz' ) || exit 1
    exit 1
  fi
  [ -f '$(INTRO_ROOT_DIR)/llvm-$(VERSION).src.tar.gz' ] || exit 1

  if [ -n '$(STREAM)' ]; then
    ( cd '$(<:D)' && wget -- '$(CLANG_SRC_URL)' >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(<:D)' && wget --quiet -- '$(CLANG_SRC_URL)' )
  fi
  if [ $? -ne 0 ]; then
    echo    'ERROR: failed to download Clang $(VERSION) tarball.' 1>&2
    echo -n 'ERROR: failed to download Clang $(VERSION) tarball.' | $(AWACS)
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf 'clang-$(VERSION).src.tar.gz' ) || exit 1
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf 'llvm-$(VERSION).src.tar.gz' ) || exit 1
    exit 1
  fi
  [ -f '$(INTRO_ROOT_DIR)/clang-$(VERSION).src.tar.gz' ] || exit 1

  if [ -n '$(STREAM)' ]; then
    ( cd '$(<:D)' && wget -- '$(COMPILER_RT_SRC_URL)' >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(<:D)' && wget --quiet -- '$(COMPILER_RT_SRC_URL)' )
  fi
  if [ $? -ne 0 ]; then
    echo    'ERROR: failed to download Compiler-RT $(VERSION) tarball.' 1>&2
    echo -n 'ERROR: failed to download Compiler-RT $(VERSION) tarball.' | $(AWACS)
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf 'compiler-rt-$(VERSION).src.tar.gz' ) || exit 1
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf 'clang-$(VERSION).src.tar.gz' ) || exit 1
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf 'llvm-$(VERSION).src.tar.gz' ) || exit 1
    exit 1
  fi
  [ -f '$(INTRO_ROOT_DIR)/compiler-rt-$(VERSION).src.tar.gz' ] || exit 1

  [ -f '$(<)' ] || exit 1
  exit 0
}



for local version in $(CLANG_VERSIONS) {
  # Use `README.txt' file as a target representing the completion of
  # decompression action. It is suitable for the purpose because of the
  # following reasons;
  #
  #   - The name of this file is considered stable even if the version
  #     changes.
  #   - This file won't be modified during the build procedure.
  #
  if "$(version)" != "trunk" {
    make "$(INTRO_ROOT_DIR)/llvm-$(version)/README.txt"
      : "$(INTRO_ROOT_DIR)/llvm-$(version).src.tar.gz"
      : @expand
      ;
    explicit "$(INTRO_ROOT_DIR)/llvm-$(version)/README.txt" ;
  }
}

rule expand ( targets * : sources * : properties * )
{
  local version = [ get-version-impl $(properties) ] ;
  VERSION on $(targets) = "$(version)" ;
  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions expand
{
  $(PROPERTY_DUMP_COMMANDS)

  rm -rf '$(<:D)' || exit 1

  [ -f '$(INTRO_ROOT_DIR)/llvm-$(VERSION).src.tar.gz' ] || exit 1
  [ -f '$(INTRO_ROOT_DIR)/clang-$(VERSION).src.tar.gz' ] || exit 1
  [ -f '$(INTRO_ROOT_DIR)/compiler-rt-$(VERSION).src.tar.gz' ] || exit 1

  if [ -n '$(STREAM)' ]; then
    tar xzvf '$(INTRO_ROOT_DIR)/llvm-$(VERSION).src.tar.gz' --directory='$(INTRO_ROOT_DIR)' >> '$(STREAM)' 2>&1
  else
    tar xzf  '$(INTRO_ROOT_DIR)/llvm-$(VERSION).src.tar.gz' --directory='$(INTRO_ROOT_DIR)'
  fi
  if [ $? -ne 0 ]; then
    echo    'ERROR: failed to expand LLVM $(VERSION) tarball.' 1>&2
    echo -n 'ERROR: failed to expand LLVM $(VERSION) tarball.' | $(AWACS)
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf llvm-$(VERSION).src )
    exit 1
  fi
  [ -d '$(INTRO_ROOT_DIR)/llvm-$(VERSION).src' ] || exit 1
  ( cd '$(INTRO_ROOT_DIR)' && mv --no-target-directory llvm-$(VERSION).src llvm-$(VERSION) ) || exit 1
  [ -d '$(INTRO_ROOT_DIR)/llvm-$(VERSION)' ] || exit 1
  [ ! -e '$(INTRO_ROOT_DIR)/llvm-$(VERSION).src' ] || exit 1

  if [ -n '$(STREAM)' ]; then
    tar xzvf '$(INTRO_ROOT_DIR)/clang-$(VERSION).src.tar.gz' --directory='$(INTRO_ROOT_DIR)' >> '$(STREAM)' 2>&1
  else
    tar xzf  '$(INTRO_ROOT_DIR)/clang-$(VERSION).src.tar.gz' --directory='$(INTRO_ROOT_DIR)'
  fi
  if [ $? -ne 0 ]; then
    echo    'ERROR: failed to expand Clang $(VERSION) tarball.' 1>&2
    echo -n 'ERROR: failed to expand Clang $(VERSION) tarball.' | $(AWACS)
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf clang-$(VERSION).src )
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf llvm-$(VERSION) )
    exit 1
  fi
  [ -d '$(INTRO_ROOT_DIR)/clang-$(VERSION).src' ] || exit 1
  ( cd '$(INTRO_ROOT_DIR)' && mv --no-target-directory clang-$(VERSION).src llvm-$(VERSION)/tools/clang ) || exit 1
  [ -d '$(INTRO_ROOT_DIR)/llvm-$(VERSION)/tools/clang' ] || exit 1
  [ ! -e '$(INTRO_ROOT_DIR)/clang-$(VERSION).src' ] || exit 1

  if [ -n '$(STREAM)' ]; then
    tar xzvf '$(INTRO_ROOT_DIR)/compiler-rt-$(VERSION).src.tar.gz' --directory='$(INTRO_ROOT_DIR)' >> '$(STREAM)' 2>&1
  else
    tar xzf  '$(INTRO_ROOT_DIR)/compiler-rt-$(VERSION).src.tar.gz' --directory='$(INTRO_ROOT_DIR)'
  fi
  if [ $? -ne 0 ]; then
    echo    'ERROR: failed to expand Compiler-RT $(VERSION) tarball.' 1>&2
    echo -n 'ERROR: failed to expand Compiler-RT $(VERSION) tarball.' | $(AWACS)
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf compiler-rt-$(VERSION).src )
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf llvm-$(VERSION) )
    exit 1
  fi
  [ -d '$(INTRO_ROOT_DIR)/compiler-rt-$(VERSION).src' ] || exit 1
  ( cd '$(INTRO_ROOT_DIR)' && mv --no-target-directory compiler-rt-$(VERSION).src llvm-$(VERSION)/projects/compiler-rt ) || exit 1
  [ -d '$(INTRO_ROOT_DIR)/llvm-$(VERSION)/projects/compiler-rt' ] || exit 1
  [ ! -e '$(INTRO_ROOT_DIR)/compiler-rt-$(VERSION).src' ] || exit 1

  # If the timestamp of the tarball's contents is restored, the modification
  # time of the source directory could be older than the one of the tarball.
  # Such behavior is not desirable because the decompression always happens.
  # Therefore, `touch' is required.
  touch --no-create '$(<)'
  [ -f '$(<)' ] || exit 1
  exit 0
}



for local version in $(CLANG_VERSIONS) {
  if "$(version)" = "trunk" {
    make "$(INTRO_ROOT_DIR)/llvm-trunk/README.txt"
      : # no source
      : @update-trunk
      ;
    explicit "$(INTRO_ROOT_DIR)/llvm-trunk/README.txt" ;
    #always "$(INTRO_ROOT_DIR)/llvm-trunk/README.txt" ;
  }
}

rule update-trunk ( targets * : sources * : properties * )
{
  local llvm-dir = "$(INTRO_ROOT_DIR)/llvm-trunk" ;
  LLVM_DIR on $(targets) = [ path.native "$(llvm-dir)" ] ;

  local clang-dir = "$(llvm-dir)/tools/clang" ;
  CLANG_DIR on $(targets) = [ path.native "$(clang-dir)" ] ;

  local compiler-rt-dir = "$(llvm-dir)/projects/compiler-rt" ;
  COMPILER_RT_DIR on $(targets) = [ path.native "$(compiler-rt-dir)" ] ;

  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions update-trunk
{
  $(PROPERTY_DUMP_COMMANDS)

  if [ ! -f '$(LLVM_DIR)/README.txt' ]; then
    if [ -n '$(STREAM)' ]; then
      ( cd '$(INTRO_ROOT_DIR)' && svn checkout 'http://llvm.org/svn/llvm-project/llvm/trunk' llvm-trunk >> '$(STREAM)' 2>&1 )
    else
      ( cd '$(INTRO_ROOT_DIR)' && svn checkout 'http://llvm.org/svn/llvm-project/llvm/trunk' llvm-trunk )
    fi
    if [ $? -ne 0 ]; then
      ( cd '$(INTRO_ROOT_DIR)' && rm -rf llvm-trunk )
      echo    "ERROR: failed to \`svn checkout' LLVM repository." 1>&2
      echo -n "ERROR: failed to \`svn checkout' LLVM repository." | $(AWACS)
      exit 1
    fi
    [ -f '$(LLVM_DIR)/README.txt' ] || exit 1
  fi

  if [ ! -d '$(CLANG_DIR)' ]; then
    if [ -n '$(STREAM)' ]; then
      ( cd '$(INTRO_ROOT_DIR)/llvm-trunk/tools' && svn checkout 'http://llvm.org/svn/llvm-project/cfe/trunk' clang >> '$(STREAM)' 2>&1 )
    else
      ( cd '$(INTRO_ROOT_DIR)/llvm-trunk/tools' && svn checkout 'http://llvm.org/svn/llvm-project/cfe/trunk' clang )
    fi
    if [ $? -ne 0 ]; then
      ( cd '$(INTRO_ROOT_DIR)' && rm -rf llvm-trunk )
      echo    "ERROR: failed to \`svn checkout' Clang repository." 1>&2
      echo -n "ERROR: failed to \`svn checkout' Clang repository." | $(AWACS)
      exit 1
    fi
    [ -d '$(CLANG_DIR)' ] || exit 1
  fi

  if [ ! -e '$(COMPILER_RT_DIR)' ]; then
    if [ -n '$(STREAM)' ]; then
      ( cd '$(INTRO_ROOT_DIR)/llvm-trunk/projects' && svn checkout 'http://llvm.org/svn/llvm-project/compiler-rt/trunk' compiler-rt >> '$(STREAM)' 2>&1 )
    else
      ( cd '$(INTRO_ROOT_DIR)/llvm-trunk/projects' && svn checkout 'http://llvm.org/svn/llvm-project/compiler-rt/trunk' compiler-rt )
    fi
    if [ $? -ne 0 ]; then
      ( cd '$(INTRO_ROOT_DIR)' && rm -rf llvm-trunk )
      echo    "ERROR: failed to \`svn checkout' Compiler-RT repository." 1>&2
      echo -n "ERROR: failed to \`svn checkout' Compiler-RT repository." | $(AWACS)
      exit 1
    fi
    [ -d '$(COMPILER_RT_DIR)' ] || exit 1
  fi

  if [ -n '$(STREAM)' ]; then
    ( cd '$(LLVM_DIR)' && svn update >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(LLVM_DIR)' && svn update )
  fi
  if [ $? -ne 0 ]; then
    echo    "ERROR: failed to \`svn update' LLVM repository." 1>&2
    echo -n "ERROR: failed to \`svn update' LLVM repository." | $(AWACS)
    exit 1
  fi

  if [ -n '$(STREAM)' ]; then
    ( cd '$(CLANG_DIR)' && svn update >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(CLANG_DIR)' && svn update )
  fi
  if [ $? -ne 0 ]; then
    echo    "ERROR: failed to \`svn update' Clang repository." 1>&2
    echo -n "ERROR: failed to \`svn update' Clang repository." | $(AWACS)
    exit 1
  fi

  if [ -n '$(STREAM)' ]; then
    ( cd '$(COMPILER_RT_DIR)' && svn update >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(COMPILER_RT_DIR)' && svn update )
  fi
  if [ $? -ne 0 ]; then
    echo    "ERROR: failed to \`svn update' Compiler-RT repository." 1>&2
    echo -n "ERROR: failed to \`svn update' Compiler-RT repository." | $(AWACS)
    exit 1
  fi

  touch --no-create '$(<)'
  [ -f '$(<)' ] || exit 1
  exit 0
}



rule srcdir-req ( properties * )
{
  local version = [ get-version-impl $(properties) ] ;
  return "<source>$(INTRO_ROOT_DIR)/llvm-$(version)/README.txt/$(DEFAULT_PROPERTIES)" ;
}

alias srcdir
  : # no source
  : <conditional>@srcdir-req
  ;
explicit srcdir ;



rule location-conditional ( properties * )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  local bindir ;
  if [ is-clang "$(compiler)" ] {
    bindir = [ get-default-bindir "$(PREFIX)" : $(properties) ] ;
  }
  else if [ is-gcc "$(compiler)" ] || [ is-icc "$(compiler)" ] {
    bindir = [ get-bindir "$(PREFIX)" : $(properties) ] ;
  }
  else {
    errors.error "an internal error." ;
  }
  return "<location>$(bindir)" ;
}

make clang++-wrapper
  : compiler-dep
    srcdir
  : @make-install
  : $(USE_COMPILER)
    $(USE_MULTITARGET)
    $(USE_CLANG)
    $(USE_ADDRESS_MODEL)
    $(USE_INSTRUCTION_SET)
    <conditional>@location-conditional
  ;
explicit clang++-wrapper ;

rule make-install ( targets * : sources * : properties * )
{
  local compiler = [ feature.get-values <compiler> : $(properties) ] ;
  local compiler-description ;
  if [ is-gcc "$(compiler)" ] {
    compiler-description = [ get-compiler-description "$(compiler)" ] ;
  }
  else if [ is-clang "$(compiler)" ] {
    local backend-gcc = [ get-backend-gcc $(properties) ] ;
    compiler-description = [ get-compiler-description "$(backend-gcc)" ] ;
  }
  else if [ is-icc "$(compiler)" ] {
    compiler-description = [ get-compiler-description "$(compiler)" ] ;
  }
  else {
    errors.error "an internal error." ;
  }
  COMPILER_DESCRIPTION on $(targets) = "$(compiler-description)" ;

  local version = [ get-version-impl $(properties) ] ;
  VERSION on $(targets) = "$(version)" ;

  local llvm-dir = "$(INTRO_ROOT_DIR)/llvm-$(version)" ;
  LLVM_DIR on $(targets) = [ path.native "$(llvm-dir)" ] ;

  local clang-dir = "$(llvm-dir)/tools/clang" ;
  CLANG_DIR on $(targets) = [ path.native "$(clang-dir)" ] ;

  local objdir = "$(INTRO_ROOT_DIR)/objdir" ;
  OBJDIR on $(targets) = [ path.native "$(objdir)" ] ;

  OPTIONS on $(targets) = ;

  # Set `--prefix' option for `configure' script.
  local compiler-prefix = [ get-compiler-prefix "$(PREFIX)" : $(properties) ] ;
  local compiler-prefix-native = [ path.native "$(compiler-prefix)" ] ;
  COMPILER_PREFIX on $(targets) = "$(compiler-prefix-native)" ;
  OPTIONS on $(targets) += "--prefix='$(compiler-prefix-native)'" ;

  local bindir-native ;
  local libdir-native ;
  local includedir-native ;
  if [ is-clang "$(compiler)" ] {
    local bindir = [ get-default-bindir "$(PREFIX)" : $(properties) ] ;
    bindir-native = [ path.native "$(bindir)" ] ;

    local libdir = [ get-default-libdir "$(PREFIX)" : $(properties) ] ;
    libdir-native = [ path.native "$(libdir)" ] ;

    local includedir = [ get-default-includedir "$(PREFIX)" : $(properties) ] ;
    includedir-native = [ path.native "$(includedir)" ] ;
  }
  else {
    local bindir = [ get-bindir "$(PREFIX)" : $(properties) ] ;
    bindir-native = [ path.native "$(bindir)" ] ;

    local libdir = [ get-libdir "$(PREFIX)" : $(properties) ] ;
    libdir-native = [ path.native "$(libdir)" ] ;

    local includedir = [ get-includedir "$(PREFIX)" : $(properties) ] ;
    includedir-native = [ path.native "$(includedir)" ] ;
  }
  # Set `--bindir' option for `configure' script.
  BINDIR on $(targets) += "$(bindir-native)" ;
  OPTIONS on $(targets) += "--bindir='$(bindir-native)'" ;
  # Set `--libdir' option for `configure' script.
  LIBDIR on $(targets) += "$(libdir-native)" ;
  OPTIONS on $(targets) += "--libdir='$(libdir-native)'" ;
  # Set `--includedir' option for `configure' script.
  INCLUDEDIR on $(targets) += "$(includedir-native)" ;
  OPTIONS on $(targets) += "--includedir='$(includedir-native)'" ;

  local build-triplet ;
  local host-triplet ;
  local target-triplet ;
  local enabled-targets ;
  if [ is-clang "$(compiler)" ] {
    local triplets = [ get-compiler-triplets $(properties) ] ;
    build-triplet = "$(triplets[1])" ;
    host-triplet = "$(triplets[2])" ;
    target-triplet = "$(triplets[3])" ;
    enabled-targets = "$(triplets[4])" ;
  }
  else {
    local triplets = [ get-triplets $(properties) ] ;
    build-triplet = "$(triplets[1])" ;
    host-triplet = "$(triplets[1])" ;
    target-triplet = "$(triplets[2])" ;
  }
  BUILD_TRIPLET on $(targets) = "$(build-triplet)" ;
  HOST_TRIPLET on $(targets) = "$(host-triplet)" ;
  TARGET_TRIPLET on $(targets) = "$(target-triplet)" ;
  # Set `--build', `--host' and `--target' options for `configure' script.
  OPTIONS on $(targets) += "--build=$(build-triplet)" ;
  OPTIONS on $(targets) += "--host=$(host-triplet)" ;
  OPTIONS on $(targets) += "--target=$(target-triplet)" ;

  local variant = [ feature.get-values <variant> : $(properties) ] ;

  if [ is-clang "$(compiler)" ] {
    # Do nothing.
  }
  else if [ is-gcc "$(compiler)" ] || [ is-icc "$(compiler)" ] {
    if "$(variant)" = "debug" {
      OPTIONS on $(targets) += "--disable-optimized" ;
    }
    else if "$(variant)" = "release" {
      OPTIONS on $(targets) += "--enable-optimized" ;
    }
    else if "$(variant)" = "profile" {
      OPTIONS on $(targets) += "--enable-optimized" ;
      OPTIONS on $(targets) += "--enable-profiling" ;
    }
    else {
      errors.error "an internal error." ;
    }
  }
  else {
    errors.error "an internal error." ;
  }

  local gcc = [ feature.get-values <gcc> : $(properties) ] ;
  GCC on $(targets) = "$(gcc)" ;

  OPTIONS on $(targets) += "--enable-bindings=none" ;

  #if "$(enabled-targets)" {
  #  OPTIONS on $(targets) += "--enable-targets=x86_64,x86" ;
  #}
  #else {
  #  OPTIONS on $(targets) += "--enable-targets=x86_64,x86" ;
  #}

  local multittarget = [ feature.get-values <multitarget> : $(properties) ] ;

  if ! [ is-builtin-gcc "$(compiler)" ] {
    #OPTIONS on $(targets) += "--with-c-include-dirs='$(libdir-native)/gcc/$(target-triplet)/`'$(compiler-prefix-native)/bin/gcc' -dumpversion`/include:$(compiler-prefix-native)/include:/usr/include'" ;
    OPTIONS on $(targets) += "--with-cxx-include-root=\"$(compiler-prefix-native)/include/c++/`'$(compiler-prefix-native)/bin/gcc' -dumpversion`\"" ;
    OPTIONS on $(targets) += "--with-cxx-include-arch=$(target-triplet)" ;
    if "$(target-triplet)" = "x86_64-unknown-linux-gnu" && "$(multitarget)" = "yes" {
      OPTIONS on $(targets) += --with-cxx-include-32bit-dir=32 ;
    }
  }

  local rpaths ;
  if [ is-clang "$(compiler)" ] {
    if ( "$(host-triplet)" = "x86_64-unknown-linux-gnu" && "$(target-triplet)" = "x86_64-unknown-linux-gnu" )
       || ( "$(host-triplet)" = "i686-pc-linux-gnu" && "$(target-triplet)" = "i686-pc-linux-gnu" ) {
      rpaths += "$(libdir-native)" ;
    }
  }
  else if [ is-gcc "$(compiler)" ] || [ is-icc "$(compiler)" ] {
    if ( "$(host-triplet)" = "x86_64-unknown-linux-gnu" && "$(target-triplet)" = "x86_64-unknown-linux-gnu" )
       || ( "$(host-triplet)" = "i686-pc-linux-gnu" && "$(target-triplet)" = "i686-pc-linux-gnu" ) {
      local default-debug-libdir = [ get-default-debug-libdir "$(PREFIX)" : $(properties) ] ;
      local default-libdir = [ get-default-libdir "$(PREFIX)" : $(properties) ] ;
      rpaths += [ path.native "$(libdir-native)" ] ;
      if "$(variant)" = "debug" {
        rpaths += [ path.native "$(default-debug-libdir)" ] ;
      }
      rpaths += [ path.native "$(default-libdir)" ] ;
    }
  }
  else {
    errors.error "an internal error." ;
  }
  local rpath-opts = "-Wl,-rpath=\"$(rpaths)\"" ;
  local rpath-opts = "$(rpath-opts:J= )" ;
  OPTIONS on $(targets) += "--with-extra-ld-options='$(rpath-opts)'" ;

  if [ is-clang "$(compiler)" ] {
    OPTIONS on $(targets) += "CC='$(bindir-native)/gcc-wrapper'" ;
  }
  else {
    local cc = [ get-cc "$(PREFIX)" : $(properties) ] ;
    local cc-native = [ path.native "$(cc)" ] ;
    OPTIONS on $(targets) += "CC='$(cc-native)'" ;
  }

  local cflags = [ get-cflags $(properties) ] ;
  if $(cflags) {
    OPTIONS on $(targets) += "CFLAGS='$(cflags)'" ;
  }

  if [ is-clang "$(compiler)" ] {
    OPTIONS on $(targets) += "CXX='$(bindir-native)/g++-wrapper'" ;
  }
  else {
    local cxx = [ get-cxx "$(PREFIX)" : $(properties) ] ;
    local cxx-native = [ path.native "$(cxx)" ] ;
    OPTIONS on $(targets) += "CXX='$(cxx-native)'" ;
  }

  local cxxflags = [ get-cxxflags $(properties) ] ;
  if $(cxxflags) {
    OPTIONS on $(targets) += "CXXFLAGS='$(cxxflags)'" ;
  }

  local environment-commands = [ get-environment-commands "$(PREFIX)" : $(properties) ] ;
  ENVIRONMENT_COMMANDS on $(targets) = "$(environment-commands)" ;

  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions make-install
{
  $(PROPERTY_DUMP_COMMANDS)

  [ -x '$(LLVM_DIR)/autoconf/config.sub' ] || exit 1
  [ `'$(LLVM_DIR)/autoconf/config.sub' $(BUILD_TRIPLET)` = $(BUILD_TRIPLET) ] || exit 1
  [ `'$(LLVM_DIR)/autoconf/config.sub' $(HOST_TRIPLET)` = $(HOST_TRIPLET) ] || exit 1
  [ `'$(LLVM_DIR)/autoconf/config.sub' $(TARGET_TRIPLET)` = $(TARGET_TRIPLET) ] || exit 1
  [ -x '$(LLVM_DIR)/configure' ] || exit 1

  if [ $(VERSION) = trunk ]; then
    # Extract the revision number of Clang trunk.
    version=`( cd '$(CLANG_DIR)' && { env LANG=C svn info || exit 1; } | { grep -E 'Revision: [[:digit:]]+' || exit 1; } | { grep -oE '[[:digit:]]+' || exit 1; } )`
    if [ $? -ne 0 ]; then
      echo    'ERROR: failed to extract LLVM & Clang trunk revision.' 1>&2
      echo -n 'ERROR: failed to extract LLVM & Clang trunk revision.' | $(AWACS)
      exit 1
    fi
    version="trunk rev.$version"
  else
    version=$(VERSION)
  fi

  # Clean up objdir `$(OBJDIR)'.
  { mkdir -p '$(OBJDIR)' && ( cd '$(OBJDIR)' && rm -rf * ); } || exit 1

  $(ENVIRONMENT_COMMANDS)

  if [ -n '$(STREAM)' ]; then
    ( cd '$(OBJDIR)' && '$(LLVM_DIR)/configure' $(OPTIONS) >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(OBJDIR)' && '$(LLVM_DIR)/configure' $(OPTIONS) )
  fi
  if [ $? -ne 0 ]; then
    echo    "ERROR: failed to \`configure' LLVM & Clang $version ($(COMPILER_DESCRIPTION))." 1>&2
    echo -n "ERROR: failed to \`configure' LLVM & Clang $version ($(COMPILER_DESCRIPTION))." | $(AWACS)
    exit 1
  fi

  # Check the creation of `Makefile'.
  [ -f '$(OBJDIR)/Makefile' ] || exit 1

  if [ -n '$(STREAM)' ]; then
    ( cd '$(OBJDIR)' && make --jobs=$(CONCURRENCY) >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(OBJDIR)' && make --jobs=$(CONCURRENCY) )
  fi
  if [ $? -ne 0 ]; then
    echo    "ERROR: failed to \`make' LLVM & Clang $version ($(COMPILER_DESCRIPTION))." 1>&2
    echo -n "ERROR: failed to \`make' LLVM & Clang $version ($(COMPILER_DESCRIPTION))." | $(AWACS)
    exit 1
  fi

  if [ -n '$(STREAM)' ]; then
    ( cd '$(OBJDIR)' && make check >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(OBJDIR)' && make check )
  fi
  if [ $? -ne 0 ]; then
    echo    "ERROR: failed to \`make check' LLVM & Clang $version ($(COMPILER_DESCRIPTION))." 1>&2
    echo -n "ERROR: failed to \`make check' LLVM & Clang $version ($(COMPILER_DESCRIPTION))." | $(AWACS)
    exit 1
  fi

  touch '$(COMPILER_PREFIX)/bin/before-make-install' || exit 1
  touch '$(COMPILER_PREFIX)/lib/before-make-install' || exit 1
  touch '$(COMPILER_PREFIX)/include/before-make-install' || exit 1

  if [ -n '$(STREAM)' ]; then
    ( cd '$(OBJDIR)' && make install >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(OBJDIR)' && make install )
  fi
  if [ $? -ne 0 ]; then
    echo    "ERROR: failed to \`make install' LLVM & Clang $version ($(COMPILER_DESCRIPTION))." 1>&2
    echo -n "ERROR: failed to \`make install' LLVM & Clang $version ($(COMPILER_DESCRIPTION))." | $(AWACS)
    exit 1
  fi

  touch '$(COMPILER_PREFIX)/bin/after-make-install' || exit 1
  touch '$(COMPILER_PREFIX)/lib/after-make-install' || exit 1
  touch '$(COMPILER_PREFIX)/include/after-make-install' || exit 1

  mkdir -p '$(BINDIR)' || exit 1
  mkdir -p '$(LIBDIR)' || exit 1
  mkdir -p '$(INCLUDEDIR)' || exit 1

  if [ '$(BINDIR)' != '$(COMPILER_PREFIX)/bin' ]; then
    ( cd '$(COMPILER_PREFIX)/bin' && find . -mindepth 1 -maxdepth 1 -newer before-make-install -execdir [ '{}' -ot after-make-install ] \; -execdir mv '{}' '$(BINDIR)' \; ) || exit 1
  fi
  if [ '$(LIBDIR)' != '$(COMPILER_PREFIX)/lib' ]; then
    ( cd '$(COMPILER_PREFIX)/lib' && find . -mindepth 1 -maxdepth 1 -newer before-make-install -execdir [ '{}' -ot after-make-install ] \; -execdir mv '{}' '$(LIBDIR)' \; ) || exit 1
    ( cd '$(COMPILER_PREFIX)/lib' && ln -sfT '$(LIBDIR)/clang' clang ) || exit 1
  fi
  if [ '$(INCLUDEDIR)' != '$(COMPILER_PREFIX)/include' ]; then
    ( cd '$(COMPILER_PREFIX)/include' && find . -mindepth 1 -maxdepth 1 -newer before-make-install -execdir [ '{}' -ot after-make-install ] \; -execdir mv '{}' '$(INCLUDEDIR)' \; ) || exit 1
  fi

  rm -f '$(COMPILER_PREFIX)/bin/before-make-install' '$(COMPILER_PREFIX)/bin/after-make-install' || exit 1
  rm -f '$(COMPILER_PREFIX)/lib/before-make-install' '$(COMPILER_PREFIX)/lib/after-make-install' || exit 1
  rm -f '$(COMPILER_PREFIX)/include/before-make-install' '$(COMPILER_PREFIX)/include/after-make-install' || exit 1

  install --mode=755 '$(INTRO_ROOT_DIR)/clang/clang-wrapper' '$(INTRO_ROOT_DIR)/clang/clang++-wrapper' '$(BINDIR)'
  if [ $? -ne 0 ]; then
    echo    "ERROR: failed to install the wrapper scripts for LLVM & Clang $version ($(COMPILER_DESCRIPTION))." 1>&2
    echo -n "ERROR: failed to install the wrapper scripts for LLVM & Clang $version ($(COMPILER_DESCRIPTION))." | $(AWACS)
    exit 1
  fi

  # Check the creation of `clang++-wrapper'.
  [ -x '$(<)' ] || exit 1

  # Clean up objdir `$(OBJDIR)'.
  rm -rf '$(OBJDIR)' || exit 1

  echo -n "LLVM & Clang $version ($(COMPILER_DESCRIPTION)) was successfully built." | $(AWACS)
  exit 0
}



rule install-conditional ( properties * )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  if [ is-clang "$(compiler)" ] {
    result = "<source>clang++-wrapper/$(DEFAULT_COMPILER_PROPERTIES)" ;
  }
  else if [ is-gcc "$(compiler)" ] || [ is-icc "$(compiler)" ] {
    result = "<source>clang++-wrapper" ;
  }
  else {
    errors.error "an internal error." ;
  }
  return $(result) ;
}

alias install : : <conditional>@install-conditional ;
explicit install ;

project intro/clang ;

import alias ;
import errors ;
import feature ;
import make ;
import regex ;
import "$(INTRO_ROOT_DIR)/compilers" ;


rule assert-specified ( feature : properties * )
{
  local val = [ feature.get-values $(feature) : $(properties) ] ;
  if $(val) = unspecified {
    errors.error "$(feature) is not specified for the LLVM & Clang build." ;
  }
}

rule assert-unspecified ( feature : properties * )
{
  local val = [ feature.get-values $(feature) : $(properties) ] ;
  if $(val) != unspecified {
    errors.error "$(feature) is not valid for the LLVM & Clang build." ;
  }
}


rule gcc-dep-req ( properties * )
{
  assert-specified   <triplet>            : $(properties) ;
  assert-unspecified <multitarget>        : $(properties) ;
  assert-specified   <multitarget-hidden> : $(properties) ;
  assert-unspecified <binutils>           : $(properties) ;
  assert-unspecified <binutils-hidden>    : $(properties) ;
  assert-unspecified <gmp>                : $(properties) ;
  assert-unspecified <gmp-hidden>         : $(properties) ;
  assert-unspecified <mpfr>               : $(properties) ;
  assert-unspecified <mpfr-hidden>        : $(properties) ;
  assert-unspecified <mpc>                : $(properties) ;
  assert-unspecified <mpc-hidden>         : $(properties) ;
  assert-unspecified <ppl>                : $(properties) ;
  assert-unspecified <ppl-hidden>         : $(properties) ;
  assert-unspecified <cloog>              : $(properties) ;
  assert-unspecified <cloog-hidden>       : $(properties) ;
  assert-specified   <compiler>           : $(properties) ;
  assert-unspecified <compiler-hidden>    : $(properties) ;
  assert-unspecified <icu4c>              : $(properties) ;
  assert-unspecified <icu4c-hidden>       : $(properties) ;
  assert-unspecified <mpi>                : $(properties) ;
  assert-unspecified <mpi-hidden>         : $(properties) ;
  assert-unspecified <openmpi>            : $(properties) ;
  assert-unspecified <openmpi-hidden>     : $(properties) ;
  assert-unspecified <boost>              : $(properties) ;
  assert-unspecified <boost-hidden>       : $(properties) ;
  assert-unspecified <clang>              : $(properties) ;
  assert-unspecified <clang-hidden>       : $(properties) ;
  assert-unspecified <valgrind>           : $(properties) ;
  assert-unspecified <valgrind-hidden>    : $(properties) ;

  local multitarget = [ feature.get-values <multitarget-hidden> : $(properties) ] ;
  local compiler = [ feature.get-values <compiler> : $(properties) ] ;
  local result ;
  if [ "$(INTRO_ROOT_DIR)/compilers.is-gcc" $(compiler) ]
  {
    result = <source>../gcc//install/<multitarget>$(multitarget)/<multitarget-hidden>unspecified ;
  }
  else if [ "$(INTRO_ROOT_DIR)/compilers.is-clang" $(compiler) ]
  {
    if ! $(GCC_FOR_CLANG)
    {
      errors.error "an internal error." ;
    }
    result = <source>../gcc//install/<multitarget>$(multitarget)/<multitarget-hidden>unspecified ;
  }
  else
  {
    errors.error "an internal error." ;
  }
  return $(result) ;
}

alias gcc-dep : : <conditional>@gcc-dep-req ;
explicit gcc-dep ;


local rule get-version ( properties * )
{
  local compiler = [ feature.get-values <compiler> : $(properties) ] ;
  if $(compiler) = unspecified
  {
    compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
    if $(compiler) = unspecified
    {
      errors.error "an internal error" ;
    }
  }

  local clang = [ feature.get-values <clang> : $(properties) ] ;
  if $(clang) = unspecified
  {
    clang = [ feature.get-values <clang-hidden> : $(properties) ] ;
  }

  local result ;
  if [ "$(INTRO_ROOT_DIR)/compilers.is-gcc" $(compiler) ]
  {
    if $(clang) = unspecified
    {
      errors.error "an internal error" ;
    }
    result = $(clang) ;
  }
  else if [ "$(INTRO_ROOT_DIR)/compilers.is-clang" $(compiler) ]
  {
    if $(compiler) = clang-trunk
    {
      result = trunk ;
    }
    else
    {
      result = [ "$(INTRO_ROOT_DIR)/compilers.get-version" $(compiler) ] ;
    }
  }
  else
  {
    errors.error "an internal error" ;
  }

  return $(result) ;
}


for local version in $(CLANG_VERSIONS)
{
  if $(version) != trunk
  {
    make "$(INTRO_ROOT_DIR)/llvm-$(version).src.tar.gz" : : @download ;
    explicit "$(INTRO_ROOT_DIR)/llvm-$(version).src.tar.gz" ;
  }
}

rule download ( targets * : sources * : properties * )
{
  if $(sources[1])
  {
    errors.error "an internal error." ;
  }
  assert-unspecified <triplet>            : $(properties) ;
  assert-unspecified <multitarget>        : $(properties) ;
  assert-unspecified <multitarget-hidden> : $(properties) ;
  assert-unspecified <binutils>           : $(properties) ;
  assert-unspecified <binutils-hidden>    : $(properties) ;
  assert-unspecified <gmp>                : $(properties) ;
  assert-unspecified <gmp-hidden>         : $(properties) ;
  assert-unspecified <mpfr>               : $(properties) ;
  assert-unspecified <mpfr-hidden>        : $(properties) ;
  assert-unspecified <mpc>                : $(properties) ;
  assert-unspecified <mpc-hidden>         : $(properties) ;
  assert-unspecified <ppl>                : $(properties) ;
  assert-unspecified <ppl-hidden>         : $(properties) ;
  assert-unspecified <cloog>              : $(properties) ;
  assert-unspecified <cloog-hidden>       : $(properties) ;
  assert-unspecified <compiler>           : $(properties) ;
  #assert-specified   <compiler-hidden>    : $(properties) ;
  assert-unspecified <icu4c>              : $(properties) ;
  assert-unspecified <icu4c-hidden>       : $(properties) ;
  assert-unspecified <mpi>                : $(properties) ;
  assert-unspecified <mpi-hidden>         : $(properties) ;
  assert-unspecified <openmpi>            : $(properties) ;
  assert-unspecified <openmpi-hidden>     : $(properties) ;
  assert-unspecified <boost>              : $(properties) ;
  assert-unspecified <boost-hidden>       : $(properties) ;
  assert-unspecified <clang>              : $(properties) ;
  #assert-specified   <clang-hidden>       : $(properties) ;
  assert-unspecified <valgrind>           : $(properties) ;
  assert-unspecified <valgrind-hidden>    : $(properties) ;

  local version = [ get-version $(properties) ] ;
  VERSION on $(targets) = $(version) ;
  LLVM_SRC_URL on $(targets) = "http://llvm.org/releases/$(version)/llvm-$(version).src.tar.gz" ;
  CLANG_SRC_URL on $(targets) = "http://llvm.org/releases/$(version)/clang-$(version).src.tar.gz" ;
  COMPILER_RT_SRC_URL on $(targets) = "http://llvm.org/releases/$(version)/compiler-rt-$(version).src.tar.gz" ;
}
actions download
{
  ( cd '$(INTRO_ROOT_DIR)' && rm -rf 'llvm-$(VERSION).src.tar.gz' ) || exit 1
  ( cd '$(INTRO_ROOT_DIR)' && rm -rf 'clang-$(VERSION).src.tar.gz' ) || exit 1
  ( cd '$(INTRO_ROOT_DIR)' && rm -rf 'compiler-rt-$(VERSION).src.tar.gz' ) || exit 1

  if [ -n '$(STREAM)' ]; then
    ( cd '$(<:D)' && wget -- '$(LLVM_SRC_URL)' >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(<:D)' && wget --quiet -- '$(LLVM_SRC_URL)' )
  fi
  if [ $? -ne 0 ]; then
    echo    'ERROR: failed to download LLVM $(VERSION) tarball.' 1>&2
    echo -n 'ERROR: failed to download LLVM $(VERSION) tarball.' | $(AWACS)
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf 'llvm-$(VERSION).src.tar.gz' ) || exit 1
    exit 1
  fi
  [ -f '$(INTRO_ROOT_DIR)/llvm-$(VERSION).src.tar.gz' ] || exit 1

  if [ -n '$(STREAM)' ]; then
    ( cd '$(<:D)' && wget -- '$(CLANG_SRC_URL)' >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(<:D)' && wget --quiet -- '$(CLANG_SRC_URL)' )
  fi
  if [ $? -ne 0 ]; then
    echo    'ERROR: failed to download Clang $(VERSION) tarball.' 1>&2
    echo -n 'ERROR: failed to download Clang $(VERSION) tarball.' | $(AWACS)
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf 'clang-$(VERSION).src.tar.gz' ) || exit 1
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf 'llvm-$(VERSION).src.tar.gz' ) || exit 1
    exit 1
  fi
  [ -f '$(INTRO_ROOT_DIR)/clang-$(VERSION).src.tar.gz' ] || exit 1

  if [ -n '$(STREAM)' ]; then
    ( cd '$(<:D)' && wget -- '$(COMPILER_RT_SRC_URL)' >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(<:D)' && wget --quiet -- '$(COMPILER_RT_SRC_URL)' )
  fi
  if [ $? -ne 0 ]; then
    echo    'ERROR: failed to download Compiler-RT $(VERSION) tarball.' 1>&2
    echo -n 'ERROR: failed to download Compiler-RT $(VERSION) tarball.' | $(AWACS)
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf 'compiler-rt-$(VERSION).src.tar.gz' ) || exit 1
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf 'clang-$(VERSION).src.tar.gz' ) || exit 1
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf 'llvm-$(VERSION).src.tar.gz' ) || exit 1
    exit 1
  fi
  [ -f '$(INTRO_ROOT_DIR)/compiler-rt-$(VERSION).src.tar.gz' ] || exit 1

  [ -f '$(<)' ] || exit 1
  exit 0
}


for local version in $(CLANG_VERSIONS)
{
  # Use `README.txt' file as a target representing the completion of
  # decompression action. It is suitable for the purpose because of the
  # following reasons;
  #
  #   - The name of this file is considered stable even if the version
  #     changes.
  #   - This file won't be modified during the build procedure.
  #
  if $(version) != trunk
  {
    make "$(INTRO_ROOT_DIR)/llvm-$(version)/README.txt"
      : "$(INTRO_ROOT_DIR)/llvm-$(version).src.tar.gz"
      : @expand
      ;
    explicit "$(INTRO_ROOT_DIR)/llvm-$(version)/README.txt" ;
  }
}

rule expand ( targets * : sources * : properties * )
{
  if ! $(sources[1])
  {
    errors.error "an internal error." ;
  }
  if $(sources[2])
  {
    errors.error "an internal error." ;
  }
  assert-unspecified <triplet>            : $(properties) ;
  assert-unspecified <multitarget>        : $(properties) ;
  assert-unspecified <multitarget-hidden> : $(properties) ;
  assert-unspecified <binutils>           : $(properties) ;
  assert-unspecified <binutils-hidden>    : $(properties) ;
  assert-unspecified <gmp>                : $(properties) ;
  assert-unspecified <gmp-hidden>         : $(properties) ;
  assert-unspecified <mpfr>               : $(properties) ;
  assert-unspecified <mpfr-hidden>        : $(properties) ;
  assert-unspecified <mpc>                : $(properties) ;
  assert-unspecified <mpc-hidden>         : $(properties) ;
  assert-unspecified <ppl>                : $(properties) ;
  assert-unspecified <ppl-hidden>         : $(properties) ;
  assert-unspecified <cloog>              : $(properties) ;
  assert-unspecified <cloog-hidden>       : $(properties) ;
  assert-unspecified <compiler>           : $(properties) ;
  #assert-specified   <compiler-hidden>    : $(properties) ;
  assert-unspecified <icu4c>              : $(properties) ;
  assert-unspecified <icu4c-hidden>       : $(properties) ;
  assert-unspecified <mpi>                : $(properties) ;
  assert-unspecified <mpi-hidden>         : $(properties) ;
  assert-unspecified <openmpi>            : $(properties) ;
  assert-unspecified <openmpi-hidden>     : $(properties) ;
  assert-unspecified <boost>              : $(properties) ;
  assert-unspecified <boost-hidden>       : $(properties) ;
  assert-unspecified <clang>              : $(properties) ;
  #assert-specified   <clang-hidden>       : $(properties) ;
  assert-unspecified <valgrind>           : $(properties) ;
  assert-unspecified <valgrind-hidden>    : $(properties) ;

  local version = [ get-version $(properties) ] ;
  VERSION on $(targets) = $(version) ;
}
actions expand
{
  rm -rf '$(<:D)' || exit 1

  [ -f '$(INTRO_ROOT_DIR)/llvm-$(VERSION).src.tar.gz' ] || exit 1
  [ -f '$(INTRO_ROOT_DIR)/clang-$(VERSION).src.tar.gz' ] || exit 1
  [ -f '$(INTRO_ROOT_DIR)/compiler-rt-$(VERSION).src.tar.gz' ] || exit 1

  if [ -n '$(STREAM)' ]; then
    tar xzvf '$(INTRO_ROOT_DIR)/llvm-$(VERSION).src.tar.gz' --directory='$(INTRO_ROOT_DIR)' >> '$(STREAM)' 2>&1
  else
    tar xzf  '$(INTRO_ROOT_DIR)/llvm-$(VERSION).src.tar.gz' --directory='$(INTRO_ROOT_DIR)'
  fi
  if [ $? -ne 0 ]; then
    echo    'ERROR: failed to expand LLVM $(VERSION) tarball.' 1>&2
    echo -n 'ERROR: failed to expand LLVM $(VERSION) tarball.' | $(AWACS)
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf llvm-$(VERSION).src )
    exit 1
  fi
  [ -d '$(INTRO_ROOT_DIR)/llvm-$(VERSION).src' ] || exit 1
  ( cd '$(INTRO_ROOT_DIR)' && mv --no-target-directory llvm-$(VERSION).src llvm-$(VERSION) ) || exit 1
  [ -d '$(INTRO_ROOT_DIR)/llvm-$(VERSION)' ] || exit 1
  [ ! -e '$(INTRO_ROOT_DIR)/llvm-$(VERSION).src' ] || exit 1

  if [ -n '$(STREAM)' ]; then
    tar xzvf '$(INTRO_ROOT_DIR)/clang-$(VERSION).src.tar.gz' --directory='$(INTRO_ROOT_DIR)' >> '$(STREAM)' 2>&1
  else
    tar xzf  '$(INTRO_ROOT_DIR)/clang-$(VERSION).src.tar.gz' --directory='$(INTRO_ROOT_DIR)'
  fi
  if [ $? -ne 0 ]; then
    echo    'ERROR: failed to expand Clang $(VERSION) tarball.' 1>&2
    echo -n 'ERROR: failed to expand Clang $(VERSION) tarball.' | $(AWACS)
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf clang-$(VERSION).src )
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf llvm-$(VERSION) )
    exit 1
  fi
  [ -d '$(INTRO_ROOT_DIR)/clang-$(VERSION).src' ] || exit 1
  ( cd '$(INTRO_ROOT_DIR)' && mv --no-target-directory clang-$(VERSION).src llvm-$(VERSION)/tools/clang ) || exit 1
  [ -d '$(INTRO_ROOT_DIR)/llvm-$(VERSION)/tools/clang' ] || exit 1
  [ ! -e '$(INTRO_ROOT_DIR)/clang-$(VERSION).src' ] || exit 1

  if [ -n '$(STREAM)' ]; then
    tar xzvf '$(INTRO_ROOT_DIR)/compiler-rt-$(VERSION).src.tar.gz' --directory='$(INTRO_ROOT_DIR)' >> '$(STREAM)' 2>&1
  else
    tar xzf  '$(INTRO_ROOT_DIR)/compiler-rt-$(VERSION).src.tar.gz' --directory='$(INTRO_ROOT_DIR)'
  fi
  if [ $? -ne 0 ]; then
    echo    'ERROR: failed to expand Compiler-RT $(VERSION) tarball.' 1>&2
    echo -n 'ERROR: failed to expand Compiler-RT $(VERSION) tarball.' | $(AWACS)
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf compiler-rt-$(VERSION).src )
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf llvm-$(VERSION) )
    exit 1
  fi
  [ -d '$(INTRO_ROOT_DIR)/compiler-rt-$(VERSION).src' ] || exit 1
  ( cd '$(INTRO_ROOT_DIR)' && mv --no-target-directory compiler-rt-$(VERSION).src llvm-$(VERSION)/projects/compiler-rt ) || exit 1
  [ -d '$(INTRO_ROOT_DIR)/llvm-$(VERSION)/projects/compiler-rt' ] || exit 1
  [ ! -e '$(INTRO_ROOT_DIR)/compiler-rt-$(VERSION).src' ] || exit 1

  # If the timestamp of the tarball's contents is restored, the modification
  # time of the source directory could be older than the one of the tarball.
  # Such behavior is not desirable because the decompression always happens.
  # Therefore, `touch' is required.
  touch --no-create '$(<)'
  [ -f '$(<)' ] || exit 1
  exit 0
}


for local version in $(CLANG_VERSIONS)
{
  if $(version) = trunk
  {
    make "$(INTRO_ROOT_DIR)/llvm-trunk/README.txt"
      : # no source
      : @update-trunk
      ;
    explicit "$(INTRO_ROOT_DIR)/llvm-trunk/README.txt" ;
    always "$(INTRO_ROOT_DIR)/llvm-trunk/README.txt" ;
  }
}

rule update-trunk ( targets * : sources * : properties * )
{
  assert-unspecified <triplet>            : $(properties) ;
  assert-unspecified <multitarget>        : $(properties) ;
  assert-unspecified <multitarget-hidden> : $(properties) ;
  assert-unspecified <binutils>           : $(properties) ;
  assert-unspecified <binutils-hidden>    : $(properties) ;
  assert-unspecified <gmp>                : $(properties) ;
  assert-unspecified <gmp-hidden>         : $(properties) ;
  assert-unspecified <mpfr>               : $(properties) ;
  assert-unspecified <mpfr-hidden>        : $(properties) ;
  assert-unspecified <mpc>                : $(properties) ;
  assert-unspecified <mpc-hidden>         : $(properties) ;
  assert-unspecified <ppl>                : $(properties) ;
  assert-unspecified <ppl-hidden>         : $(properties) ;
  assert-unspecified <isl>                : $(properties) ;
  assert-unspecified <isl-hidden>         : $(properties) ;
  assert-unspecified <cloog>              : $(properties) ;
  assert-unspecified <cloog-hidden>       : $(properties) ;
  assert-unspecified <compiler>           : $(properties) ;
  #assert-specified   <compiler-hidden>    : $(properties) ;
  assert-unspecified <icu4c>              : $(properties) ;
  assert-unspecified <icu4c-hidden>       : $(properties) ;
  assert-unspecified <mpi>                : $(properties) ;
  assert-unspecified <mpi-hidden>         : $(properties) ;
  assert-unspecified <openmpi>            : $(properties) ;
  assert-unspecified <openmpi-hidden>     : $(properties) ;
  assert-unspecified <boost>              : $(properties) ;
  assert-unspecified <boost-hidden>       : $(properties) ;
  assert-unspecified <clang>              : $(properties) ;
  #assert-specified   <clang-hidden>       : $(properties) ;
  assert-unspecified <valgrind>           : $(properties) ;
  assert-unspecified <valgrind-hidden>    : $(properties) ;

  local llvm-dir = "$(INTRO_ROOT_DIR)/llvm-trunk" ;
  LLVM_DIR on $(targets) = "$(llvm-dir)" ;

  local clang-dir = "$(llvm-dir)/tools/clang" ;
  CLANG_DIR on $(targets) = "$(clang-dir)" ;

  local compiler-rt-dir = "$(llvm-dir)/projects/compiler-rt" ;
  COMPILER_RT_DIR on $(targets) = "$(compiler-rt-dir)" ;
}
actions update-trunk
{
  if [ ! -f '$(LLVM_DIR)/README.txt' ]; then
    if [ -n '$(STREAM)' ]; then
      ( cd '$(INTRO_ROOT_DIR)' && svn checkout 'http://llvm.org/svn/llvm-project/llvm/trunk' llvm-trunk >> '$(STREAM)' 2>&1 )
    else
      ( cd '$(INTRO_ROOT_DIR)' && svn checkout 'http://llvm.org/svn/llvm-project/llvm/trunk' llvm-trunk )
    fi
    if [ $? -ne 0 ]; then
      ( cd '$(INTRO_ROOT_DIR)' && rm -rf llvm-trunk )
      echo    "ERROR: failed to \`svn checkout' LLVM repository." 1>&2
      echo -n "ERROR: failed to \`svn checkout' LLVM repository." | $(AWACS)
      exit 1
    fi
    [ -f '$(LLVM_DIR)/README.txt' ] || exit 1
  fi

  if [ ! -d '$(CLANG_DIR)' ]; then
    if [ -n '$(STREAM)' ]; then
      ( cd '$(INTRO_ROOT_DIR)/llvm-trunk/tools' && svn checkout 'http://llvm.org/svn/llvm-project/cfe/trunk' clang >> '$(STREAM)' 2>&1 )
    else
      ( cd '$(INTRO_ROOT_DIR)/llvm-trunk/tools' && svn checkout 'http://llvm.org/svn/llvm-project/cfe/trunk' clang )
    fi
    if [ $? -ne 0 ]; then
      ( cd '$(INTRO_ROOT_DIR)' && rm -rf llvm-trunk )
      echo    "ERROR: failed to \`svn checkout' Clang repository." 1>&2
      echo -n "ERROR: failed to \`svn checkout' Clang repository." | $(AWACS)
      exit 1
    fi
    [ -d '$(CLANG_DIR)' ] || exit 1
  fi

  if [ ! -e '$(COMPILER_RT_DIR)' ]; then
    if [ -n '$(STREAM)' ]; then
      ( cd '$(INTRO_ROOT_DIR)/llvm-trunk/projects' && svn checkout 'http://llvm.org/svn/llvm-project/compiler-rt/trunk' compiler-rt >> '$(STREAM)' 2>&1 )
    else
      ( cd '$(INTRO_ROOT_DIR)/llvm-trunk/projects' && svn checkout 'http://llvm.org/svn/llvm-project/compiler-rt/trunk' compiler-rt )
    fi
    if [ $? -ne 0 ]; then
      ( cd '$(INTRO_ROOT_DIR)' && rm -rf llvm-trunk )
      echo    "ERROR: failed to \`svn checkout' Compiler-RT repository." 1>&2
      echo -n "ERROR: failed to \`svn checkout' Compiler-RT repository." | $(AWACS)
      exit 1
    fi
    [ -d '$(COMPILER_RT_DIR)' ] || exit 1
  fi

  if [ -n '$(STREAM)' ]; then
    ( cd '$(LLVM_DIR)' && svn update >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(LLVM_DIR)' && svn update )
  fi
  if [ $? -ne 0 ]; then
    echo    "ERROR: failed to \`svn update' LLVM repository." 1>&2
    echo -n "ERROR: failed to \`svn update' LLVM repository." | $(AWACS)
    exit 1
  fi

  if [ -n '$(STREAM)' ]; then
    ( cd '$(CLANG_DIR)' && svn update >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(CLANG_DIR)' && svn update )
  fi
  if [ $? -ne 0 ]; then
    echo    "ERROR: failed to \`svn update' Clang repository." 1>&2
    echo -n "ERROR: failed to \`svn update' Clang repository." | $(AWACS)
    exit 1
  fi

  if [ -n '$(STREAM)' ]; then
    ( cd '$(COMPILER_RT_DIR)' && svn update >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(COMPILER_RT_DIR)' && svn update )
  fi
  if [ $? -ne 0 ]; then
    echo    "ERROR: failed to \`svn update' Compiler-RT repository." 1>&2
    echo -n "ERROR: failed to \`svn update' Compiler-RT repository." | $(AWACS)
    exit 1
  fi

  touch --no-create '$(<)'
  [ -f '$(<)' ] || exit 1
  exit 0
}


rule srcdir-req ( properties * )
{
  assert-unspecified <triplet>            : $(properties) ;
  assert-unspecified <multitarget>        : $(properties) ;
  assert-unspecified <multitarget-hidden> : $(properties) ;
  assert-unspecified <binutils>           : $(properties) ;
  assert-unspecified <binutils-hidden>    : $(properties) ;
  assert-unspecified <gmp>                : $(properties) ;
  assert-unspecified <gmp-hidden>         : $(properties) ;
  assert-unspecified <mpfr>               : $(properties) ;
  assert-unspecified <mpfr-hidden>        : $(properties) ;
  assert-unspecified <mpc>                : $(properties) ;
  assert-unspecified <mpc-hidden>         : $(properties) ;
  assert-unspecified <ppl>                : $(properties) ;
  assert-unspecified <ppl-hidden>         : $(properties) ;
  assert-unspecified <cloog>              : $(properties) ;
  assert-unspecified <cloog-hidden>       : $(properties) ;
  #assert-specified   <compiler>           : $(properties) ;
  assert-unspecified <compiler-hidden>    : $(properties) ;
  assert-unspecified <icu4c>              : $(properties) ;
  assert-unspecified <icu4c-hidden>       : $(properties) ;
  assert-unspecified <mpi>                : $(properties) ;
  assert-unspecified <mpi-hidden>         : $(properties) ;
  assert-unspecified <openmpi>            : $(properties) ;
  assert-unspecified <openmpi-hidden>     : $(properties) ;
  assert-unspecified <boost>              : $(properties) ;
  assert-unspecified <boost-hidden>       : $(properties) ;
  #assert-specified   <clang>              : $(properties) ;
  assert-unspecified <clang-hidden>       : $(properties) ;
  assert-unspecified <valgrind>           : $(properties) ;
  assert-unspecified <valgrind-hidden>    : $(properties) ;

  local compiler = [ feature.get-values <compiler> : $(properties) ] ;
  local clang = [ feature.get-values <clang> : $(properties) ] ;
  local version = [ get-version $(properties) ] ;
  return "<source>$(INTRO_ROOT_DIR)/llvm-$(version)/README.txt/<compiler>unspecified/<compiler-hidden>$(compiler)/<clang>unspecified/<clang-hidden>$(clang)" ;
}

alias srcdir
  : # no source
  : <conditional>@srcdir-req
  ;
explicit srcdir ;


for local compiler in $(COMPILERS)
{
  local prefix-leaf = [ "$(INTRO_ROOT_DIR)/compilers.get-prefix-leaf" "$(compiler)" : "$(GCC_FOR_CLANG)" ] ;
  local compiler-prefix = "$(PREFIX)/$(prefix-leaf)" ;
  make "$(compiler-prefix)/bin/clang++-wrapper"
    : gcc-dep/<clang>unspecified
      srcdir/<triplet>unspecified/<multitarget-hidden>unspecified
    : @make-install
    ;
  explicit "$(compiler-prefix)/bin/clang++-wrapper" ;
}

rule make-install ( targets * : sources * : properties * )
{
  assert-specified   <triplet>            : $(properties) ;
  assert-unspecified <multitarget>        : $(properties) ;
  assert-specified   <multitarget-hidden> : $(properties) ;
  assert-unspecified <binutils>           : $(properties) ;
  assert-unspecified <binutils-hidden>    : $(properties) ;
  assert-unspecified <gmp>                : $(properties) ;
  assert-unspecified <gmp-hidden>         : $(properties) ;
  assert-unspecified <mpfr>               : $(properties) ;
  assert-unspecified <mpfr-hidden>        : $(properties) ;
  assert-unspecified <mpc>                : $(properties) ;
  assert-unspecified <mpc-hidden>         : $(properties) ;
  assert-unspecified <ppl>                : $(properties) ;
  assert-unspecified <ppl-hidden>         : $(properties) ;
  assert-unspecified <cloog>              : $(properties) ;
  assert-unspecified <cloog-hidden>       : $(properties) ;
  assert-specified   <compiler>           : $(properties) ;
  assert-unspecified <compiler-hidden>    : $(properties) ;
  assert-unspecified <icu4c>              : $(properties) ;
  assert-unspecified <icu4c-hidden>       : $(properties) ;
  assert-unspecified <mpi>                : $(properties) ;
  assert-unspecified <mpi-hidden>         : $(properties) ;
  assert-unspecified <openmpi>            : $(properties) ;
  assert-unspecified <openmpi-hidden>     : $(properties) ;
  assert-unspecified <boost>              : $(properties) ;
  assert-unspecified <boost-hidden>       : $(properties) ;
  #assert-specified   <clang>              : $(properties) ;
  assert-unspecified <clang-hidden>       : $(properties) ;
  assert-unspecified <valgrind>           : $(properties) ;
  assert-unspecified <valgrind-hidden>    : $(properties) ;

  local compiler = [ feature.get-values <compiler> : $(properties) ] ;
  local compiler-description ;
  if [ "$(INTRO_ROOT_DIR)/compilers.is-gcc" $(compiler) ]
  {
    compiler-description = [ "$(INTRO_ROOT_DIR)/compilers.get-compiler-description" $(compiler) ] ;
  }
  else if [ "$(INTRO_ROOT_DIR)/compilers.is-clang" $(compiler) ]
  {
    compiler-description = [ "$(INTRO_ROOT_DIR)/compilers.get-compiler-description" $(GCC_FOR_CLANG) ] ;
  }
  else
  {
    errors.error "an internal error." ;
  }
  COMPILER_DESCRIPTION on $(targets) = "$(compiler-description)" ;

  local version = [ get-version $(properties) ] ;
  VERSION on $(targets) = $(version) ;

  local llvm-dir = "$(INTRO_ROOT_DIR)/llvm-$(version)" ;
  LLVM_DIR on $(targets) = "$(llvm-dir)" ;

  local clang-dir = "$(llvm-dir)/tools/clang" ;
  CLANG_DIR on $(targets) = "$(clang-dir)" ;

  local objdir = "$(INTRO_ROOT_DIR)/objdir" ;
  OBJDIR on $(targets) = "$(objdir)" ;

  local triplet = [ feature.get-values <triplet> : $(properties) ] ;
  TRIPLET on $(targets) = $(triplet) ;

  OPTIONS on $(targets) = ;

  # Set the '--build', '--host' and '--target' options for the 'configure' script.
  OPTIONS on $(targets) += --build=$(triplet) ;
  OPTIONS on $(targets) += --host=$(triplet) ;
  OPTIONS on $(targets) += --target=$(triplet) ;

  local gcc = [ feature.get-values <gcc> : $(properties) ] ;
  GCC on $(targets) = $(gcc) ;

  # Set the '--prefix' option for the 'configure' script.
  local prefix-leaf = [ "$(INTRO_ROOT_DIR)/compilers.get-prefix-leaf" $(compiler) : $(GCC_FOR_CLANG) ] ;
  local compiler-prefix = "$(PREFIX)/$(prefix-leaf)" ;
  COMPILER_PREFIX on $(targets) = "$(compiler-prefix)" ;
  OPTIONS on $(targets) += "--prefix=\"$(compiler-prefix)\"" ;

  OPTIONS on $(targets) += "--enable-bindings=none" ;

  if ! [ "$(INTRO_ROOT_DIR)/compilers.is-builtin-gcc" $(compiler) ]
  {
    OPTIONS on $(targets) += "--with-c-include-dirs=\"$(compiler-prefix)/include:/usr/include\"" ;
    OPTIONS on $(targets) += "--with-cxx-include-root=\"$(compiler-prefix)/include/c++/\"`\"$(compiler-prefix)/bin/g++\" -dumpversion`" ;
    OPTIONS on $(targets) += --with-cxx-include-arch=$(triplet) ;
    if $(triplet) = x86_64-unknown-linux-gnu || $(triplet) = x86_64-w64-mingw32
    {
      OPTIONS on $(targets) += --with-cxx-include-32bit-dir=32 ;
    }
  }

  if ! [ "$(INTRO_ROOT_DIR)/compilers.is-builtin-gcc" $(compiler) ]
  {
    OPTIONS on $(targets) += "CC=\"$(compiler-prefix)/bin/gcc-wrapper\"" ;
    OPTIONS on $(targets) += "CXX=\"$(compiler-prefix)/bin/g++-wrapper\"" ;
  }

  # `PATH' and `LD_LIBRARY_PATH' environment variables are required to
  # complete `make check' because it internally uses built tools that cannot
  # find necessary libraries including `libstdc++.so' without specifying
  # these environment variables. `LD_RUN_PATH' does not work for this
  # purpose.
  PREPEND_SHARED_LIBRARY_PATH_VARIABLE_COMMAND on $(targets) = [ "$(INTRO_ROOT_DIR)/compilers.prepend-shared-library-path-variable-command" "$(PREFIX)" : $(compiler) : $(GCC_FOR_CLANG) ] ;
}
actions make-install
{
  [ -x "$(LLVM_DIR)/autoconf/config.sub" ] || exit 1
  [ `"$(LLVM_DIR)/autoconf/config.sub" $(TRIPLET)` = $(TRIPLET) ] || exit 1
  [ -x "$(LLVM_DIR)/configure" ] || exit 1

  if [ $(VERSION) = trunk ]; then
  # Extract the revision number of Clang.
    version=`( cd "$(CLANG_DIR)" && { env LANG=C svn info || exit 1; } | { grep -E 'Revision: [[:digit:]]+' || exit 1; } | { grep -oE '[[:digit:]]+' || exit 1; } )`
    [ $? -eq 0 ] || exit 1
    version="trunk rev.$version"
  else
    version=$(VERSION)
  fi

  # Clean up objdir `$(OBJDIR)'.
  { mkdir -p "$(OBJDIR)" && ( cd "$(OBJDIR)" && rm -rf * ); } || exit 1

  $(PREPEND_SHARED_LIBRARY_PATH_VARIABLE_COMMAND)

  if [ -n "$(STREAM)" ]; then
    ( cd "$(OBJDIR)" && "$(LLVM_DIR)/configure" $(OPTIONS) >> "$(STREAM)" 2>&1 )
  else
    ( cd "$(OBJDIR)" && "$(LLVM_DIR)/configure" $(OPTIONS) )
  fi
  if [ $? -ne 0 ]; then
    echo    "ERROR: failed to \`configure' LLVM & Clang $version ($(COMPILER_DESCRIPTION), $(TRIPLET))." 1>&2
    echo -n "ERROR: failed to \`configure' LLVM & Clang $version ($(COMPILER_DESCRIPTION), $(TRIPLET))." | $(AWACS)
    exit 1
  fi

  # Check the creation of `Makefile'.
  [ -f "$(OBJDIR)/Makefile" ] || exit 1

  if [ -n "$(STREAM)" ]; then
    ( cd "$(OBJDIR)" && make --jobs=$(CONCURRENCY) >> "$(STREAM)" 2>&1 )
  else
    ( cd "$(OBJDIR)" && make --jobs=$(CONCURRENCY) )
  fi
  if [ $? -ne 0 ]; then
    echo    "ERROR: failed to \`make' LLVM & Clang $version ($(COMPILER_DESCRIPTION), $(TRIPLET))." 1>&2
    echo -n "ERROR: failed to \`make' LLVM & Clang $version ($(COMPILER_DESCRIPTION), $(TRIPLET))." | $(AWACS)
    exit 1
  fi

  if [ -n "$(STREAM)" ]; then
    ( cd "$(OBJDIR)" && make check >> "$(STREAM)" 2>&1 )
  else
    ( cd "$(OBJDIR)" && make check )
  fi
  if [ $? -ne 0 ]; then
    echo    "ERROR: failed to \`make check' LLVM & Clang $version ($(COMPILER_DESCRIPTION), $(TRIPLET))." 1>&2
    echo -n "ERROR: failed to \`make check' LLVM & Clang $version ($(COMPILER_DESCRIPTION), $(TRIPLET))." | $(AWACS)
    exit 1
  fi

  if [ -n "$(STREAM)" ]; then
    ( cd "$(OBJDIR)" && make install >> "$(STREAM)" 2>&1 )
  else
    ( cd "$(OBJDIR)" && make install )
  fi
  if [ $? -ne 0 ]; then
    echo    "ERROR: failed to \`make install' LLVM & Clang $version ($(COMPILER_DESCRIPTION), $(TRIPLET))." 1>&2
    echo -n "ERROR: failed to \`make install' LLVM & Clang $version ($(COMPILER_DESCRIPTION), $(TRIPLET))." | $(AWACS)
    exit 1
  fi

  install --mode=755 "$(INTRO_ROOT_DIR)/clang/clang-wrapper" "$(INTRO_ROOT_DIR)/clang/clang++-wrapper" "$(COMPILER_PREFIX)/bin"
  if [ $? -ne 0 ]; then
    echo    "ERROR: failed to install the wrapper scripts for LLVM & Clang $version ($(COMPILER_DESCRIPTION), $(TRIPLET))." 1>&2
    echo -n "ERROR: failed to install the wrapper scripts for LLVM & Clang $version ($(COMPILER_DESCRIPTION), $(TRIPLET))." | $(AWACS)
    exit 1
  fi

  # Check the creation of `clang++-wrapper'.
  [ -x "$(<)" ] || exit 1

  # Clean up objdir "$(OBJDIR)".
  rm -rf "$(OBJDIR)" || exit 1

  echo -n "LLVM & Clang $version ($(COMPILER_DESCRIPTION), $(TRIPLET)) was successfully built." | $(AWACS)
  exit 0
}


rule install-req ( properties * )
{
  assert-specified   <triplet>            : $(properties) ;
  assert-unspecified <multitarget>        : $(properties) ;
  assert-specified   <multitarget-hidden> : $(properties) ;
  assert-unspecified <binutils>           : $(properties) ;
  assert-unspecified <binutils-hidden>    : $(properties) ;
  assert-unspecified <gmp>                : $(properties) ;
  assert-unspecified <gmp-hidden>         : $(properties) ;
  assert-unspecified <mpfr>               : $(properties) ;
  assert-unspecified <mpfr-hidden>        : $(properties) ;
  assert-unspecified <mpc>                : $(properties) ;
  assert-unspecified <mpc-hidden>         : $(properties) ;
  assert-unspecified <ppl>                : $(properties) ;
  assert-unspecified <ppl-hidden>         : $(properties) ;
  assert-unspecified <cloog>              : $(properties) ;
  assert-unspecified <cloog-hidden>       : $(properties) ;
  assert-specified   <compiler>           : $(properties) ;
  assert-unspecified <compiler-hidden>    : $(properties) ;
  assert-unspecified <icu4c>              : $(properties) ;
  assert-unspecified <icu4c-hidden>       : $(properties) ;
  assert-unspecified <mpi>                : $(properties) ;
  assert-unspecified <mpi-hidden>         : $(properties) ;
  assert-unspecified <openmpi>            : $(properties) ;
  assert-unspecified <openmpi-hidden>     : $(properties) ;
  assert-unspecified <boost>              : $(properties) ;
  assert-unspecified <boost-hidden>       : $(properties) ;
  #assert-specified   <clang>              : $(properties) ;
  assert-unspecified <clang-hidden>       : $(properties) ;
  assert-unspecified <valgrind>           : $(properties) ;
  assert-unspecified <valgrind-hidden>    : $(properties) ;

  local compiler = [ feature.get-values <compiler> : $(properties) ] ;
  local prefix-leaf = [ "$(INTRO_ROOT_DIR)/compilers.get-prefix-leaf" $(compiler) : "$(GCC_FOR_CLANG)" ] ;
  local compiler-prefix = "$(PREFIX)/$(prefix-leaf)" ;
  return <source>"$(compiler-prefix)/bin/clang++-wrapper" ;
}

alias install : : <conditional>@install-req ;
explicit install ;

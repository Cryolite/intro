project intro/clang ;

import alias ;
import errors ;
import feature ;
import make ;
import path ;
import regex ;
import "$(INTRO_ROOT_DIR)/compilers"
  : is-gcc
    is-builtin-gcc
    is-clang
    is-icc
    get-frontend-version
    get-backend-gcc
    get-compiler-description
    get-compiler-prefix
    get-full-prefix
    get-compiler-triplets
    get-triplets
    get-cc
    get-cflags
    get-cxx
    get-cxxflags
    get-environment-commands
    get-logfile-path
    get-property-dump-commands
  ;


rule compiler-dep-req ( properties * )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  local result ;
  if [ is-gcc "$(compiler)" ] {
    result += "<source>../gcc//install" ;
  }
  else if [ is-clang "$(compiler)" ] {
    result += "<source>../gcc//install" ;
  }
  else if [ is-icc "$(compiler)" ] {
    result += "<source>../gcc//install" ;
    result += "<source>../icc//install" ;
  }
  else {
    errors.error "an internal error." ;
  }
  return $(result) ;
}

alias compiler-dep : : <conditional>@compiler-dep-req ;
explicit compiler-dep ;



local rule get-version-impl ( properties * )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  local clang = [ feature.get-values <clang-hidden> : $(properties) ] ;

  local result ;
  if [ is-gcc "$(compiler)" ] {
    if "$(clang)" = "unspecified" {
      errors.error "an internal error" ;
    }
    result = "$(clang)" ;
  }
  else if [ is-clang "$(compiler)" ] {
    if [ regex.match "^(clang-trunk-.+)" : "$(compiler)" : 1 ] {
      result = "trunk" ;
    }
    else {
      result = [ get-frontend-version "$(compiler)" ] ;
    }
  }
  else if [ is-icc "$(compiler)" ] {
    if "$(clang)" = "unspecified" {
      errors.error "an internal error." ;
    }
    result = "$(clang)" ;
  }
  else {
    errors.error "an internal error" ;
  }
  return $(result) ;
}



for local version in $(CLANG_VERSIONS) {
  if $(version) != trunk {
    make "$(INTRO_ROOT_DIR)/llvm-$(version).src.tar.gz" : : @download ;
    explicit "$(INTRO_ROOT_DIR)/llvm-$(version).src.tar.gz" ;
  }
}

rule download ( targets * : sources * : properties * )
{
  local version = [ get-version-impl $(properties) ] ;
  VERSION on $(targets) = $(version) ;
  LLVM_SRC_URL on $(targets) = "http://llvm.org/releases/$(version)/llvm-$(version).src.tar.gz" ;
  CLANG_SRC_URL on $(targets) = "http://llvm.org/releases/$(version)/clang-$(version).src.tar.gz" ;
  COMPILER_RT_SRC_URL on $(targets) = "http://llvm.org/releases/$(version)/compiler-rt-$(version).src.tar.gz" ;
  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) : "$(STREAM)" : "/dev/null" ] ;
}
actions download
{
$(PROPERTY_DUMP_COMMANDS)

  ( cd '$(INTRO_ROOT_DIR)' && rm -rf 'llvm-$(VERSION).src.tar.gz' ) || exit 1
  ( cd '$(INTRO_ROOT_DIR)' && rm -rf 'clang-$(VERSION).src.tar.gz' ) || exit 1
  ( cd '$(INTRO_ROOT_DIR)' && rm -rf 'compiler-rt-$(VERSION).src.tar.gz' ) || exit 1

  ( cd '$(<:D)' && wget -- '$(LLVM_SRC_URL)' >> '$(STREAM)' 2>&1 )
  if [ $? -ne 0 ]; then
    echo    'ERROR: failed to download LLVM $(VERSION) tarball.' 1>&2
    echo -n 'ERROR: failed to download LLVM $(VERSION) tarball.' | $(AWACS)
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf 'llvm-$(VERSION).src.tar.gz' ) || exit 1
    exit 1
  fi
  [ -f '$(INTRO_ROOT_DIR)/llvm-$(VERSION).src.tar.gz' ] || exit 1

  ( cd '$(<:D)' && wget -- '$(CLANG_SRC_URL)' >> '$(STREAM)' 2>&1 )
  if [ $? -ne 0 ]; then
    echo    'ERROR: failed to download clang $(VERSION) tarball.' 1>&2
    echo -n 'ERROR: failed to download clang $(VERSION) tarball.' | $(AWACS)
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf 'clang-$(VERSION).src.tar.gz' ) || exit 1
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf 'llvm-$(VERSION).src.tar.gz' ) || exit 1
    exit 1
  fi
  [ -f '$(INTRO_ROOT_DIR)/clang-$(VERSION).src.tar.gz' ] || exit 1

  ( cd '$(<:D)' && wget -- '$(COMPILER_RT_SRC_URL)' >> '$(STREAM)' 2>&1 )
  if [ $? -ne 0 ]; then
    echo    'ERROR: failed to download Compiler-RT $(VERSION) tarball.' 1>&2
    echo -n 'ERROR: failed to download Compiler-RT $(VERSION) tarball.' | $(AWACS)
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf 'compiler-rt-$(VERSION).src.tar.gz' ) || exit 1
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf 'clang-$(VERSION).src.tar.gz' ) || exit 1
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf 'llvm-$(VERSION).src.tar.gz' ) || exit 1
    exit 1
  fi
  [ -f '$(INTRO_ROOT_DIR)/compiler-rt-$(VERSION).src.tar.gz' ] || exit 1

  [ -f '$(<)' ] || exit 1
  exit 0
}



for local version in $(CLANG_VERSIONS) {
  # Use `README.txt' file as a target representing the completion of
  # decompression action. It is suitable for the purpose because of the
  # following reasons;
  #
  #   - The name of this file is considered stable even if the version
  #     changes.
  #   - This file won't be modified during the build procedure.
  #
  if "$(version)" != "trunk" {
    make "$(INTRO_ROOT_DIR)/llvm-$(version)/README.txt"
      : "$(INTRO_ROOT_DIR)/llvm-$(version).src.tar.gz"
      : @expand
      ;
    explicit "$(INTRO_ROOT_DIR)/llvm-$(version)/README.txt" ;
  }
}

rule expand ( targets * : sources * : properties * )
{
  local version = [ get-version-impl $(properties) ] ;
  VERSION on $(targets) = "$(version)" ;
  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) : "$(STREAM)" : "/dev/null" ] ;
}
actions expand
{
$(PROPERTY_DUMP_COMMANDS)

  rm -rf '$(<:D)' || exit 1

  [ -f '$(INTRO_ROOT_DIR)/llvm-$(VERSION).src.tar.gz' ] || exit 1
  [ -f '$(INTRO_ROOT_DIR)/clang-$(VERSION).src.tar.gz' ] || exit 1
  [ -f '$(INTRO_ROOT_DIR)/compiler-rt-$(VERSION).src.tar.gz' ] || exit 1

  tar xzvf '$(INTRO_ROOT_DIR)/llvm-$(VERSION).src.tar.gz' --directory='$(INTRO_ROOT_DIR)' >> '$(STREAM)' 2>&1
  if [ $? -ne 0 ]; then
    echo    'ERROR: failed to expand LLVM $(VERSION) tarball.' 1>&2
    echo -n 'ERROR: failed to expand LLVM $(VERSION) tarball.' | $(AWACS)
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf llvm-$(VERSION).src )
    exit 1
  fi
  [ -d '$(INTRO_ROOT_DIR)/llvm-$(VERSION).src' ] || exit 1
  ( cd '$(INTRO_ROOT_DIR)' && mv --no-target-directory llvm-$(VERSION).src llvm-$(VERSION) ) || exit 1
  [ -d '$(INTRO_ROOT_DIR)/llvm-$(VERSION)' ] || exit 1
  [ ! -e '$(INTRO_ROOT_DIR)/llvm-$(VERSION).src' ] || exit 1

  tar xzvf '$(INTRO_ROOT_DIR)/clang-$(VERSION).src.tar.gz' --directory='$(INTRO_ROOT_DIR)' >> '$(STREAM)' 2>&1
  if [ $? -ne 0 ]; then
    echo    'ERROR: failed to expand clang $(VERSION) tarball.' 1>&2
    echo -n 'ERROR: failed to expand clang $(VERSION) tarball.' | $(AWACS)
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf clang-$(VERSION).src )
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf llvm-$(VERSION) )
    exit 1
  fi
  [ -d '$(INTRO_ROOT_DIR)/clang-$(VERSION).src' ] || exit 1
  ( cd '$(INTRO_ROOT_DIR)' && mv --no-target-directory clang-$(VERSION).src llvm-$(VERSION)/tools/clang ) || exit 1
  [ -d '$(INTRO_ROOT_DIR)/llvm-$(VERSION)/tools/clang' ] || exit 1
  [ ! -e '$(INTRO_ROOT_DIR)/clang-$(VERSION).src' ] || exit 1

  tar xzvf '$(INTRO_ROOT_DIR)/compiler-rt-$(VERSION).src.tar.gz' --directory='$(INTRO_ROOT_DIR)' >> '$(STREAM)' 2>&1
  if [ $? -ne 0 ]; then
    echo    'ERROR: failed to expand Compiler-RT $(VERSION) tarball.' 1>&2
    echo -n 'ERROR: failed to expand Compiler-RT $(VERSION) tarball.' | $(AWACS)
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf compiler-rt-$(VERSION).src )
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf llvm-$(VERSION) )
    exit 1
  fi
  [ -d '$(INTRO_ROOT_DIR)/compiler-rt-$(VERSION).src' ] || exit 1
  ( cd '$(INTRO_ROOT_DIR)' && mv --no-target-directory compiler-rt-$(VERSION).src llvm-$(VERSION)/projects/compiler-rt ) || exit 1
  [ -d '$(INTRO_ROOT_DIR)/llvm-$(VERSION)/projects/compiler-rt' ] || exit 1
  [ ! -e '$(INTRO_ROOT_DIR)/compiler-rt-$(VERSION).src' ] || exit 1

  # If the timestamp of the tarball's contents is restored, the modification
  # time of the source directory could be older than the one of the tarball.
  # Such behavior is not desirable because the decompression always happens.
  # Therefore, `touch' is required.
  touch --no-create '$(<)'
  [ -f '$(<)' ] || exit 1
  exit 0
}



for local version in $(CLANG_VERSIONS) {
  if "$(version)" = "trunk" {
    make "$(INTRO_ROOT_DIR)/llvm-trunk/README.txt"
      : # no source
      : @update-trunk
      ;
    explicit "$(INTRO_ROOT_DIR)/llvm-trunk/README.txt" ;
    #always "$(INTRO_ROOT_DIR)/llvm-trunk/README.txt" ;
  }
}

rule update-trunk ( targets * : sources * : properties * )
{
  local llvm-dir = "$(INTRO_ROOT_DIR)/llvm-trunk" ;
  LLVM_DIR on $(targets) = [ path.native "$(llvm-dir)" ] ;

  local clang-dir = "$(llvm-dir)/tools/clang" ;
  CLANG_DIR on $(targets) = [ path.native "$(clang-dir)" ] ;

  local extra-clang-tools-dir = "$(llvm-dir)/tools/clang/tools/extra" ;
  EXTRA_CLANG_TOOLS_DIR on $(targets) = [ path.native "$(extra-clang-tools-dir)" ] ;

  local compiler-rt-dir = "$(llvm-dir)/projects/compiler-rt" ;
  COMPILER_RT_DIR on $(targets) = [ path.native "$(compiler-rt-dir)" ] ;

  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) : "$(STREAM)" : "/dev/null" ] ;
}
actions update-trunk
{
$(PROPERTY_DUMP_COMMANDS)

  if [ ! -f '$(LLVM_DIR)/README.txt' ]; then
    ( cd '$(INTRO_ROOT_DIR)' && svn checkout 'http://llvm.org/svn/llvm-project/llvm/trunk' llvm-trunk >> '$(STREAM)' 2>&1 )
    if [ $? -ne 0 ]; then
      ( cd '$(INTRO_ROOT_DIR)' && rm -rf llvm-trunk )
      echo    "ERROR: failed to \`svn checkout' LLVM repository." 1>&2
      echo -n "ERROR: failed to \`svn checkout' LLVM repository." | $(AWACS)
      exit 1
    fi
    [ -f '$(LLVM_DIR)/README.txt' ] || exit 1
  fi

  if [ ! -d '$(CLANG_DIR)' ]; then
    ( cd '$(INTRO_ROOT_DIR)/llvm-trunk/tools' && svn checkout 'http://llvm.org/svn/llvm-project/cfe/trunk' clang >> '$(STREAM)' 2>&1 )
    if [ $? -ne 0 ]; then
      ( cd '$(INTRO_ROOT_DIR)' && rm -rf llvm-trunk )
      echo    "ERROR: failed to \`svn checkout' clang repository." 1>&2
      echo -n "ERROR: failed to \`svn checkout' clang repository." | $(AWACS)
      exit 1
    fi
    [ -d '$(CLANG_DIR)' ] || exit 1
  fi

  if [ ! -d '$(EXTRA_CLANG_TOOLS_DIR)' ]; then
    ( cd '$(INTRO_ROOT_DIR)/llvm-trunk/tools/clang/tools' && svn checkout 'http://llvm.org/svn/llvm-project/clang-tools-extra/trunk' extra >> '$(STREAM)' 2>&1 )
    if [ $? -ne 0 ]; then
      ( cd '$(INTRO_ROOT_DIR)' && rm -rf llvm-trunk )
      echo    "ERROR: failed to \`svn checkout' extra clang tools repository." 1>&2
      echo -n "ERROR: failed to \`svn checkout' extra clang tools repository." | $(AWACS)
      exit 1
    fi
    [ -d '$(EXTRA_CLANG_TOOLS_DIR)' ] || exit 1
  fi

  if [ ! -e '$(COMPILER_RT_DIR)' ]; then
    ( cd '$(INTRO_ROOT_DIR)/llvm-trunk/projects' && svn checkout 'http://llvm.org/svn/llvm-project/compiler-rt/trunk' compiler-rt >> '$(STREAM)' 2>&1 )
    if [ $? -ne 0 ]; then
      ( cd '$(INTRO_ROOT_DIR)' && rm -rf llvm-trunk )
      echo    "ERROR: failed to \`svn checkout' Compiler-RT repository." 1>&2
      echo -n "ERROR: failed to \`svn checkout' Compiler-RT repository." | $(AWACS)
      exit 1
    fi
    [ -d '$(COMPILER_RT_DIR)' ] || exit 1
  fi

  ( cd '$(LLVM_DIR)' && svn update >> '$(STREAM)' 2>&1 )
  if [ $? -ne 0 ]; then
    echo    "ERROR: failed to \`svn update' LLVM repository." 1>&2
    echo -n "ERROR: failed to \`svn update' LLVM repository." | $(AWACS)
    exit 1
  fi

  ( cd '$(CLANG_DIR)' && svn update >> '$(STREAM)' 2>&1 )
  if [ $? -ne 0 ]; then
    echo    "ERROR: failed to \`svn update' clang repository." 1>&2
    echo -n "ERROR: failed to \`svn update' clang repository." | $(AWACS)
    exit 1
  fi

  ( cd '$(EXTRA_CLANG_TOOLS_DIR)' && svn update >> '$(STREAM)' 2>&1 )
  if [ $? -ne 0 ]; then
    echo    "ERROR: failed to \`svn update' extra clang tools repository." 1>&2
    echo -n "ERROR: failed to \`svn update' extra clang tools repository." | $(AWACS)
    exit 1
  fi

  ( cd '$(COMPILER_RT_DIR)' && svn update >> '$(STREAM)' 2>&1 )
  if [ $? -ne 0 ]; then
    echo    "ERROR: failed to \`svn update' Compiler-RT repository." 1>&2
    echo -n "ERROR: failed to \`svn update' Compiler-RT repository." | $(AWACS)
    exit 1
  fi

  touch --no-create '$(<)'
  [ -f '$(<)' ] || exit 1
  exit 0
}



rule srcdir-req ( properties * )
{
  local version = [ get-version-impl $(properties) ] ;
  return "<source>$(INTRO_ROOT_DIR)/llvm-$(version)/README.txt/$(DEFAULT_PROPERTIES)" ;
}

alias srcdir
  : # no source
  : <conditional>@srcdir-req
  ;
explicit srcdir ;



rule default-location-conditional ( properties * )
{
  local compiler-prefix = [ get-compiler-prefix "$(PREFIX)" : $(properties) ] ;
  return "<location>$(compiler-prefix)/bin" ;
}

make clang-wrapper
  : compiler-dep
    srcdir
  : @make-install
  : $(USE_COMPILER)
    $(USE_MULTITARGET)
    $(USE_CLANG)
    $(USE_ADDRESS_MODEL)
    $(USE_INSTRUCTION_SET)
    <conditional>@default-location-conditional
  ;
explicit clang-wrapper ;

rule location-conditional ( properties * )
{
  local full-prefix = [ get-full-prefix "$(PREFIX)" : $(properties) ] ;
  return "<location>$(full-prefix)/bin" ;
}

make clang++-wrapper
  : compiler-dep
    srcdir
    clang-wrapper/$(DEFAULT_COMPILER_PROPERTIES)
  : @make-install
  : $(USE_COMPILER)
    $(USE_MULTITARGET)
    $(USE_CLANG)
    $(USE_ADDRESS_MODEL)
    $(USE_INSTRUCTION_SET)
    <conditional>@location-conditional
  ;
explicit clang++-wrapper ;

rule make-install ( targets * : sources * : properties * )
{
  local is-default ;
  if [ regex.match "(clang-wrapper)" : "$(targets[1])" : 1 ] {
    is-default = "yes" ;
    IS_DEFAULT on $(targets) = "1" ;
  }
  else if [ regex.match "(clang\\+\\+-wrapper)" : "$(targets[1])" : 1 ] {
    # Do nothing.
    IS_DEFAULT on $(targets) = "0" ;
  }
  else {
    errors.error "an internal error" ;
  }

  if "$(targets[2])" {
    errors.error "an internal error" ;
  }

  local compiler = [ feature.get-values <compiler> : $(properties) ] ;
  local compiler-description ;
  if "$(is-default)" {
    if [ is-gcc "$(compiler)" ] {
      compiler-description = [ get-compiler-description "$(compiler)" ] ;
    }
    else if [ is-clang "$(compiler)" ] {
      local backend-gcc = [ get-backend-gcc "$(compiler)" ] ;
      compiler-description = [ get-compiler-description "$(backend-gcc)" ] ;
    }
    else if [ is-icc "$(compiler)" ] {
      compiler-description = [ get-compiler-description "$(compiler)" ] ;
    }
    else if ! "$(compiler)" {
      errors.error "the value of `<compiler>' is empty" ;
    }
    else {
      errors.error "unknown property `<compiler>$(compiler)'" ;
    }
  }
  else {
    compiler-description = [ get-compiler-description "$(compiler)" ] ;
  }
  COMPILER_DESCRIPTION on $(targets) = "$(compiler-description)" ;

  local version = [ get-version-impl $(properties) ] ;
  VERSION on $(targets) = "$(version)" ;

  local llvm-dir = "$(INTRO_ROOT_DIR)/llvm-$(version)" ;
  LLVM_DIR on $(targets) = [ path.native "$(llvm-dir)" ] ;

  local clang-dir = "$(llvm-dir)/tools/clang" ;
  CLANG_DIR on $(targets) = [ path.native "$(clang-dir)" ] ;

  local objdir = "$(INTRO_ROOT_DIR)/objdir" ;
  local objdir-native = [ path.native "$(objdir)" ] ;
  OBJDIR on $(targets) = "$(objdir-native)" ;

  OPTIONS on $(targets) = ;

  local compiler-prefix = [ get-compiler-prefix "$(PREFIX)" : $(properties) ] ;
  local compiler-prefix-native = [ path.native "$(compiler-prefix)" ] ;

  local full-prefix = [ get-full-prefix "$(PREFIX)" : $(properties) ] ;
  local full-prefix-native = [ path.native "$(full-prefix)" ] ;

  # Set `--prefix' option for `configure' script.
  if "$(is-default)" {
    CLANG_PREFIX on $(targets) = "$(compiler-prefix-native)" ;
    OPTIONS on $(targets) += "--prefix='$(compiler-prefix-native)'" ;
  }
  else {
    CLANG_PREFIX on $(targets) = "$(full-prefix-native)" ;
    OPTIONS on $(targets) += "--prefix='$(full-prefix-native)'" ;
  }

  local build-triplet ;
  local host-triplet ;
  local target-triplet ;
  local enabled-targets ;
  if [ is-clang "$(compiler)" ] {
    local triplets = [ get-compiler-triplets $(properties) ] ;
    build-triplet = "$(triplets[1])" ;
    host-triplet = "$(triplets[2])" ;
    target-triplet = "$(triplets[3])" ;
    enabled-targets = "$(triplets[4])" ;
  }
  else {
    local triplets = [ get-triplets $(properties) ] ;
    build-triplet = "$(triplets[1])" ;
    host-triplet = "$(triplets[1])" ;
    target-triplet = "$(triplets[2])" ;
  }
  BUILD_TRIPLET on $(targets) = "$(build-triplet)" ;
  HOST_TRIPLET on $(targets) = "$(host-triplet)" ;
  TARGET_TRIPLET on $(targets) = "$(target-triplet)" ;
  # Set `--build', `--host' and `--target' options for `configure' script.
  OPTIONS on $(targets) += "--build=$(build-triplet)" ;
  OPTIONS on $(targets) += "--host=$(host-triplet)" ;
  OPTIONS on $(targets) += "--target=$(target-triplet)" ;

  local std = [ feature.get-values <std> : $(properties) ] ;
  if "$(is-default)" {
    if "$(std)" != "c++03" {
      errors.error "an internal error" ;
    }
  }
  else {
    switch "$(std)" {
    case "c++03" :
      # Do nothing.
    case "c++11" :
      OPTIONS on $(targets) += "--enable-cxx11" ;
    case "" :
      errors.error "the value of `<std>' is empty" ;
    case "*" :
      errors.error "unknown property `<std>$(std)'" ;
    }
  }

  local variant = [ feature.get-values <variant> : $(properties) ] ;
  if "$(is-default)" {
    # Do nothing.
  }
  else {
    switch "$(variant)" {
    case "debug" :
      OPTIONS on $(targets) += "--disable-optimized" ;
    case "release" :
      OPTIONS on $(targets) += "--enable-optimized" ;
    case "profile" :
      OPTIONS on $(targets) += "--enable-optimized" ;
      OPTIONS on $(targets) += "--enable-profiling" ;
    case "" :
      errors.error "the value of `<variant>' is empty" ;
    case "*" :
      errors.error "<variant>$(variant): unknown property" ;
    }
  }

  #OPTIONS on $(targets) += "--enable-targets=x86_64,x86" ;

  OPTIONS on $(targets) += "--enable-bindings=none" ;

  local multittarget = [ feature.get-values <multitarget> : $(properties) ] ;

  #local rpaths ;
  #if [ is-clang "$(compiler)" ] {
  #  if ( "$(host-triplet)" = "x86_64-unknown-linux-gnu" && "$(target-triplet)" = "x86_64-unknown-linux-gnu" )
  #     || ( "$(host-triplet)" = "x86_64-unknown-linux-gnu" && "$(target-triplet)" = "i686-pc-linux-gnu" )
  #     || ( "$(host-triplet)" = "i686-pc-linux-gnu" && "$(target-triplet)" = "i686-pc-linux-gnu" ) {
  #    OPTIONS on $(targets) += "--with-extra-ld-options='-Wl,-rpath=\"$(prefix-native)/lib\"'" ;
  #  }
  #}

  #if ! [ is-builtin-gcc "$(compiler)" ] {
  #  OPTIONS on $(targets) += "--with-cxx-include-root=\"$(compiler-prefix-native)/include/c++/`'$(compiler-prefix-native)/bin/gcc' -dumpversion`\"" ;
  #  OPTIONS on $(targets) += "--with-cxx-include-arch=$(target-triplet)" ;
  #  if "$(target-triplet)" = "x86_64-unknown-linux-gnu" && "$(multitarget)" = "yes" {
  #    OPTIONS on $(targets) += --with-cxx-include-32bit-dir=32 ;
  #  }
  #}
  OPTIONS on $(targets) += "--with-gcc-toolchain='$(compiler-prefix-native)'" ;

  if "$(is-default)" {
    # Enables LLVM gold plugin support. See http://llvm.org/docs/GoldPlugin.html.
    OPTIONS on $(targets) += "--with-binutils-include='$(compiler-prefix-native)/include'" ;
  }

  if "$(is-default)" {
    OPTIONS on $(targets) += "CC='$(compiler-prefix-native)/bin/gcc-wrapper'" ;
  }
  else {
    local cc = [ get-cc "$(PREFIX)" : $(properties) ] ;
    local cc-native = [ path.native "$(cc)" ] ;
    OPTIONS on $(targets) += "CC='$(cc-native)'" ;
  }

  if ! "$(is-default)" {
    local cflags = [ get-cflags $(properties) ] ;
    if "$(cflags)" {
      CFLAGS on $(targets) = "$(cflags)" ;
      OPTIONS on $(targets) += "CFLAGS='@$(objdir-native)/cflags'" ;
    }
  }

  if "$(is-default)" {
    OPTIONS on $(targets) += "CXX='$(compiler-prefix-native)/bin/g++-wrapper'" ;
  }
  else {
    local cxx = [ get-cxx "$(PREFIX)" : $(properties) ] ;
    local cxx-native = [ path.native "$(cxx)" ] ;
    OPTIONS on $(targets) += "CXX='$(cxx-native)'" ;
  }

  if ! "$(is-default)" {
    local cxxflags = [ get-cxxflags $(properties) ] ;
    if "$(cxxflags)" {
      CXXFLAGS on $(targets) = "$(cxxflags)" ;
      OPTIONS on $(targets) += "CXXFLAGS='@$(objdir-native)/cxxflags'" ;
    }
  }

  local environment-commands = [ get-environment-commands "$(PREFIX)" : $(properties) ] ;
  ENVIRONMENT_COMMANDS on $(targets) = "$(environment-commands)" ;

  local logfile ;
  if "$(is-default)" {
    logfile = "$(compiler-prefix)/clang.txt" ;
    local logfile-native = [ path.native "$(logfile)" ] ;
    LOGFILE on $(targets) = "$(logfile-native)" ;
  }
  else {
    logfile = [ get-logfile-path "clang" : "$(PREFIX)" : $(properties) ] ;
    local logfile-native = [ path.native "$(logfile)" ] ;
    LOGFILE on $(targets) = "$(logfile-native)" ;
  }

  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) : "$(STREAM)" : "$(logfile)" ] ;
}
actions make-install
{
  exit_with_error ()
  {
    echo "`LANG=C date`:ERROR: $1 (LLVM & clang $2, $(COMPILER_DESCRIPTION))" | tee -a '$(LOGFILE)' >> '$(STREAM)'
    echo -n "ERROR: $1 (LLVM & clang $2, $(COMPILER_DESCRIPTION))" | $(AWACS)
    exit 1
  }

  mkdir -p `dirname '$(LOGFILE)'`
  echo "`LANG=C date`:INFO: initiation of LLVM & clang build process" | tee '$(LOGFILE)' >> '$(STREAM)'

$(ENVIRONMENT_COMMANDS)

$(PROPERTY_DUMP_COMMANDS)

  if [ '$(VERSION)' = 'trunk' ]; then
    # Extract the revision number of clang trunk.
    version=`( cd '$(CLANG_DIR)' && { env LANG=C svn info || exit 1; } | { grep -E 'Revision: [[:digit:]]+' || exit 1; } | { grep -oE '[[:digit:]]+' || exit 1; } )`
    if [ $? -ne 0 ]; then
      exit_with_error 'failed to extract trunk revision'
    fi
    version="trunk rev.$version"
  else
    version='$(VERSION)'
  fi

  # Clean up objdir `$(OBJDIR)'.
  { mkdir -p '$(OBJDIR)' && ( cd '$(OBJDIR)' && rm -rf * ); } || exit_with_error 'failed to clean up the old objdir' "$version"

  [ -x '$(LLVM_DIR)/configure' ] || exit_with_error "\`$(LLVM_DIR)/configure' is not executable" "$version"
  [ -x '$(LLVM_DIR)/autoconf/config.sub' ] || exit_with_error "\`$(LLVM_DIR)/autoconf/config.sub' is not executable" "$version"
  [ `'$(LLVM_DIR)/autoconf/config.sub' $(BUILD_TRIPLET)` = $(BUILD_TRIPLET) ] || exit_with_error "\`--build=$(BUILD_TRIPLET)' is not supported" "$version"
  [ `'$(LLVM_DIR)/autoconf/config.sub' $(HOST_TRIPLET)` = $(HOST_TRIPLET) ] || exit_with_error "\`--host=$(HOST_TRIPLET)' is not supported" "$version"
  [ `'$(LLVM_DIR)/autoconf/config.sub' $(TARGET_TRIPLET)` = $(TARGET_TRIPLET) ] || exit_with_error "\`--target=$(TARGET_TRIPLET)' is not supported" "$version"

  if [ $(IS_DEFAULT) -eq 0 ]; then
    echo "`LANG=C date`:INFO: @cflags: $(CFLAGS)" | tee -a '$(LOGFILE)' >> '$(STREAM)'
    echo "`LANG=C date`:INFO: @cxxflags: $(CXXFLAGS)" | tee -a '$(LOGFILE)' >> '$(STREAM)'
    ( cd '$(OBJDIR)' && echo -n '$(CFLAGS)' > cflags ) || exit_with_error 'failed to create @cflags' "$version"
    ( cd '$(OBJDIR)' && echo -n '$(CXXFLAGS)' > cxxflags ) || exit_with_error 'failed to create @cxxflags' "$version"
  fi

  echo "`LANG=C date`:COMMAND: $(LLVM_DIR)/configure $(OPTIONS:J= )" | tee -a '$(LOGFILE)' >> '$(STREAM)'
  tail --follow --lines=0 --sleep-interval=0.1 '$(LOGFILE)' >> '$(STREAM)' &
  ( cd '$(OBJDIR)' && '$(LLVM_DIR)/configure' $(OPTIONS) >> '$(LOGFILE)' 2>&1 )
  result=$?
  kill -TERM $!
  if [ $result -ne 0 ]; then
    exit_with_error "failed to \`configure'" "$version"
  fi

  # Check the creation of `Makefile'.
  [ -f '$(OBJDIR)/Makefile' ] || exit_with_error "failed to confirm the creation of \`Makefile'" "$version"

  echo "`LANG=C date`:COMMAND: make" | tee -a '$(LOGFILE)' >> '$(STREAM)'
  tail --follow --lines=0 --sleep-interval=0.1 '$(LOGFILE)' >> '$(STREAM)' &
  ( cd '$(OBJDIR)' && make --jobs=$(CONCURRENCY) >> '$(LOGFILE)' 2>&1 )
  result=$?
  kill -TERM $!
  if [ $result -ne 0 ]; then
    exit_with_error "failed to \`make'" "$version"
  fi

  echo "`LANG=C date`:COMMAND: make check" | tee -a '$(LOGFILE)' >> '$(STREAM)'
  tail --follow --lines=0 --sleep-interval=0.1 '$(LOGFILE)' >> '$(STREAM)' &
  ( cd '$(OBJDIR)' && make check >> '$(LOGFILE)' 2>&1 )
  result=$?
  kill -TERM $!
  if [ $result -ne 0 ]; then
    exit_with_error "failed to \`make check'" "$version"
  fi

  echo "`LANG=C date`:COMMAND: make install" | tee -a '$(LOGFILE)' >> '$(STREAM)'
  tail --follow --lines=0 --sleep-interval=0.1 '$(LOGFILE)' >> '$(STREAM)' &
  ( cd '$(OBJDIR)' && make install >> '$(LOGFILE)' 2>&1 )
  result=$?
  kill -TERM $!
  if [ $result -ne 0 ]; then
    exit_with_error "failed to \`make install'" "$version"
  fi

  if [ $(IS_DEFAULT) -ne 0 ]; then
    # LLVM plugin for binutils tools (`ar' and `nm'). See http://llvm.org/docs/GoldPlugin.html.
    ( cd '$(CLANG_PREFIX)/lib' && mkdir -p bfd-plugins )
    if [ $? -ne 0 ]; then
      exit_with_error "failed to create \`bfd-plugins' subdirectory in \`$(CLANG_PREFIX)'" "$version"
    fi
    ( cd '$(CLANG_PREFIX)/lib/bfd-plugins' && ln -sf '../LLVMgold.so' . )
    if [ $? -ne 0 ]; then
      exit_with_error "failed to create a symlink to \`LLVMgold.so' in \`$(CLANG_PREFIX)/bfd-plugins'" "$version"
    fi
  fi

  install --mode=755 '$(INTRO_ROOT_DIR)/template/$(HOST_TRIPLET)/clang-wrapper' '$(INTRO_ROOT_DIR)/template/$(HOST_TRIPLET)/clang++-wrapper' '$(CLANG_PREFIX)/bin'
  if [ $? -ne 0 ]; then
    exit_with_error "failed to install the wrapper scripts" "$version"
  fi

  # Clean up objdir `$(OBJDIR)'.
  rm -rf '$(OBJDIR)' || exit_with_error 'failed to clean up the objdir' "$version"

  # Check the creation of `clang++-wrapper'.
  [ -x '$(<)' ] || exit_with_error 'failed to confirm the creation of the build target' "$version"

  echo -n "LLVM & clang $version ($(COMPILER_DESCRIPTION)) was successfully built." | $(AWACS)
  echo "`LANG=C date`:INFO: successful completion of LLVM & clang build process" | tee -a '$(LOGFILE)' >> '$(STREAM)'
  exit 0
}



#rule install-conditional ( properties * )
#{
#  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
#  if [ is-clang "$(compiler)" ] {
#    result = "<source>clang++-wrapper/$(DEFAULT_COMPILER_PROPERTIES)" ;
#  }
#  else if [ is-gcc "$(compiler)" ] || [ is-icc "$(compiler)" ] {
#    result = "<source>clang++-wrapper" ;
#  }
#  else {
#    errors.error "an internal error." ;
#  }
#  return $(result) ;
#}

alias install : clang++-wrapper ;
explicit install ;

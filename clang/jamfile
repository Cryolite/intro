project intro/clang ;

import alias ;
import errors ;
import feature ;
import make ;
import regex ;


rule assert-specified ( feature : properties * )
{
  local val = [ feature.get-values $(feature) : $(properties) ] ;
  if $(val) = unspecified {
    errors.error "$(feature) is not specified for the LLVM & Clang build." ;
  }
}

rule assert-unspecified ( feature : properties * )
{
  local val = [ feature.get-values $(feature) : $(properties) ] ;
  if $(val) != unspecified {
    errors.error "$(feature) is not valid for the LLVM & Clang build." ;
  }
}


rule gcc-dep-req ( properties * )
{
  assert-specified   <triplet>         : $(properties) ;
  assert-unspecified <multilib>        : $(properties) ;
  assert-specified   <multilib-hidden> : $(properties) ;
  assert-specified   <binutils>        : $(properties) ;
  assert-unspecified <binutils-hidden> : $(properties) ;
  assert-unspecified <gmp>             : $(properties) ;
  assert-specified   <gmp-hidden>      : $(properties) ;
  assert-unspecified <mpfr>            : $(properties) ;
  assert-specified   <mpfr-hidden>     : $(properties) ;
  assert-unspecified <mpc>             : $(properties) ;
  assert-specified   <mpc-hidden>      : $(properties) ;
  assert-unspecified <ppl>             : $(properties) ;
  assert-specified   <ppl-hidden>      : $(properties) ;
  assert-unspecified <cloog>           : $(properties) ;
  assert-specified   <cloog-hidden>    : $(properties) ;
  assert-specified   <gcc>             : $(properties) ;
  assert-unspecified <gcc-hidden>      : $(properties) ;
  assert-unspecified <icu4c>           : $(properties) ;
  assert-unspecified <icu4c-hidden>    : $(properties) ;
  assert-unspecified <mpi>             : $(properties) ;
  assert-unspecified <mpi-hidden>      : $(properties) ;
  assert-unspecified <openmpi>         : $(properties) ;
  assert-unspecified <openmpi-hidden>  : $(properties) ;
  assert-unspecified <boost>           : $(properties) ;
  assert-unspecified <boost-hidden>    : $(properties) ;
  local result = <source>../gcc//install ;
  local multilib = [ feature.get-values <multilib-hidden> : $(properties) ] ;
  result = $(result)/<multilib>$(multilib)/<multilib-hidden>unspecified ;
  local gmp = [ feature.get-values <gmp-hidden> : $(properties) ] ;
  result = $(result)/<gmp>$(gmp)/<gmp-hidden>unspecified ;
  local mpfr = [ feature.get-values <mpfr-hidden> : $(properties) ] ;
  result = $(result)/<mpfr>$(mpfr)/<mpfr-hidden>unspecified ;
  local mpc = [ feature.get-values <mpc-hidden> : $(properties) ] ;
  result = $(result)/<mpc>$(mpc)/<mpc-hidden>unspecified ;
  local ppl = [ feature.get-values <ppl-hidden> : $(properties) ] ;
  result = $(result)/<ppl>$(ppl)/<ppl-hidden>unspecified ;
  local cloog = [ feature.get-values <cloog-hidden> : $(properties) ] ;
  result = $(result)/<cloog>$(cloog)/<cloog-hidden>unspecified ;
  return $(result) ;
}

alias gcc-dep : : <conditional>@gcc-dep-req ;
explicit gcc-dep ;


make make
  : gcc-dep
  : @make-clang
  ;
explicit make ;

rule make-clang ( targets * : sources * : properties * )
{
  assert-specified   <triplet>         : $(properties) ;
  assert-unspecified <multilib>        : $(properties) ;
  assert-specified   <multilib-hidden> : $(properties) ;
  assert-specified   <binutils>        : $(properties) ;
  assert-unspecified <binutils-hidden> : $(properties) ;
  assert-unspecified <gmp>             : $(properties) ;
  assert-specified   <gmp-hidden>      : $(properties) ;
  assert-unspecified <mpfr>            : $(properties) ;
  assert-specified   <mpfr-hidden>     : $(properties) ;
  assert-unspecified <mpc>             : $(properties) ;
  assert-specified   <mpc-hidden>      : $(properties) ;
  assert-unspecified <ppl>             : $(properties) ;
  assert-specified   <ppl-hidden>      : $(properties) ;
  assert-unspecified <cloog>           : $(properties) ;
  assert-specified   <cloog-hidden>    : $(properties) ;
  assert-specified   <gcc>             : $(properties) ;
  assert-unspecified <gcc-hidden>      : $(properties) ;
  assert-unspecified <icu4c>           : $(properties) ;
  assert-unspecified <icu4c-hidden>    : $(properties) ;
  assert-unspecified <mpi>             : $(properties) ;
  assert-unspecified <mpi-hidden>      : $(properties) ;
  assert-unspecified <openmpi>         : $(properties) ;
  assert-unspecified <openmpi-hidden>  : $(properties) ;
  assert-unspecified <boost>           : $(properties) ;
  assert-unspecified <boost-hidden>    : $(properties) ;

  local llvm-dir = "$(INTRO_ROOT_DIR)/llvm" ;
  LLVM_DIR on $(targets) = "$(llvm-dir)" ;

  local clang-dir = "$(llvm-dir)/tools/clang" ;
  CLANG_DIR on $(targets) = "$(clang-dir)" ;

  local configure = "$(llvm-dir)/configure" ;
  CONFIGURE on $(targets) = "$(configure)" ;

  local config-sub = "$(llvm-dir)/autoconf/config.sub" ;
  CONFIG_SUB on $(targets) = "$(configure:D)/autoconf/config.sub" ;

  local triplet = [ feature.get-values <triplet> : $(properties) ] ;
  TRIPLET on $(targets) = $(triplet) ;

  OPTIONS on $(targets) = ;

  # Set the '--build', '--host' and '--target' options for the 'configure' script.
  OPTIONS on $(targets) += --build=$(triplet) ;
  OPTIONS on $(targets) += --host=$(triplet) ;
  OPTIONS on $(targets) += --target=$(triplet) ;

  # Set the '--prefix' option for the 'configure' script.
  local gcc-raw = [ feature.get-values <gcc> : $(properties) ] ;
  local gcc ;
  if [ regex.match "^([0123456789]+\\.[0123456789]+\\.[0123456789]+)$" : $(gcc-raw) : 1 ] {
    gcc = $(gcc-raw) ;
  }
  else if [ regex.match "^([0123456789]+\\.[0123456789]+-[0123456789][0123456789][0123456789][0123456789][0123456789][0123456789][0123456789][0123456789])$" : $(gcc-raw) : 1 ] {
    gcc = [ regex.replace "$(gcc-raw)" "-[0123456789][0123456789][0123456789][0123456789][0123456789][0123456789][0123456789][0123456789]$" ".0" ] ;
  }
  else if [ regex.match "^([0123456789]+\\.[0123456789]+.0-RC-[0123456789][0123456789][0123456789][0123456789][0123456789][0123456789][0123456789][0123456789])$" : $(gcc-raw) : 1 ] {
    gcc = [ regex.replace "$(gcc-raw)" "-RC-[0123456789][0123456789][0123456789][0123456789][0123456789][0123456789][0123456789][0123456789]$" "" ] ;
  }
  else {
    errors.error "ERROR: an invalid GCC version." ;
  }
  OPTIONS on $(targets) += --prefix=\"$(PREFIX)/$(gcc)\" ;

  if $(gcc) != $(GCC_BUILTIN) {
    OPTIONS on $(targets) += "--with-c-include-dirs=\"$(PREFIX)/$(gcc)/include:/usr/include\"" ;
    OPTIONS on $(targets) += "--with-cxx-include-root=\"$(PREFIX)/$(gcc)/include/c++/$(gcc)\"" ;
    OPTIONS on $(targets) += --with-cxx-include-arch=$(triplet) ;
    if $(triplet) = x86_64-unknown-linux-gnu || $(triplet) = x86_64-w64-mingw32 {
      OPTIONS on $(targets) += --with-cxx-include-32bit-dir=32 ;
    }
  }

  if $(gcc) != $(GCC_BUILTIN) {
    OPTIONS on $(targets) += CC="\"$(PREFIX)/$(gcc)/bin/gcc-wrapper\"" ;
    OPTIONS on $(targets) += CXX="\"$(PREFIX)/$(gcc)/bin/g++-wrapper\"" ;
  }

  SET_RUN_VARS on $(targets) = ;
  if $(gcc) != $(GCC_BUILTIN) {
    if $(triplet) = i686-pc-cygwin || $(triplet) = i686-w64-mingw32 || $(triplet) = x86_64-w64-mingw32 {
      SET_RUN_VARS on $(targets) = "PATH=\"$(PREFIX)/$(gcc)/bin${PATH:+:$PATH}\"; export PATH" ;
    }
    else {
      SET_RUN_VARS on $(targets) = "LD_LIBRARY_PATH=\"$(PREFIX)/$(gcc)/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}\"; export LD_LIBRARY_PATH" ;
    }
  }

  GCC_RAW on $(targets) = ;
  if $(gcc) = $(GCC_BUILTIN) {
    GCC_RAW on $(targets) = [ feature.get-values <toolset-gcc:version> : $(properties) ] ;
  }
  else {
    GCC_RAW on $(targets) = $(gcc-raw) ;
  }

  local version-prefix = "$(PREFIX)/$(gcc)" ;
  VERSION_PREFIX on $(targets) = $(version-prefix) ;

  ENV_DYN_LINK_VARS on $(targets) = ;
  if $(gcc) != $(GCC_BUILTIN) {
    if $(triplet) = i686-pc-cygwin || $(triplet) = i686-w64-mingw32 || $(triplet) = x86_64-w64-mingw32 {
      if $(gcc) != $(GCC_BUILTIN) {
        ENV_DYN_LINK_VARS on $(targets) = "/usr/bin/env PATH=\"$(PREFIX)/$(gcc)/bin${PATH:+:$PATH}\"" ;
      }
    }
    else {
      if $(version) != $(GCC_BUILTIN) {
        ENV_DYN_LINK_VARS on $(targets) = "/usr/bin/env LD_LIBRARY_PATH=\"$(PREFIX)/$(gcc)/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}\"" ;
      }
    }
  }
}
actions make-clang
{
  rm -f "$(<)" || exit $?
  if [ ! -d "$(LLVM_DIR)" ]; then
    if [ -n "$(STREAM)" ]; then
      ( cd "$(INTRO_ROOT_DIR)" && svn checkout http://llvm.org/svn/llvm-project/llvm/trunk llvm >> "$(STREAM)" 2>&1 )
    else
      ( cd "$(INTRO_ROOT_DIR)" && svn checkout http://llvm.org/svn/llvm-project/llvm/trunk llvm )
    fi
    if [ $? -ne 0 ]; then
      ( cd "$(INTRO_ROOT_DIR)" && rm -rf llvm )
      echo "ERROR: failed to 'svn checkout' LLVM repository." 1>&2
      /bin/echo -n "ERROR: failed to 'svn checkout' LLVM repository." | $(AWACS)
      exit 1
    fi
    [ -d "$(LLVM_DIR)" ] || exit 1
  fi
  [ -x "$(CONFIG_SUB)" ] || exit 1
  [ `"$(CONFIG_SUB)" $(TRIPLET)` = $(TRIPLET) ] || exit 1
  [ -x "$(CONFIGURE)" ] || exit 1
  if [ ! -d "$(CLANG_DIR)" ]; then
    if [ -n "$(STREAM)" ]; then
      ( cd "$(INTRO_ROOT_DIR)/llvm/tools" && svn checkout http://llvm.org/svn/llvm-project/cfe/trunk clang >> "$(STREAM)" 2>&1 )
    else
      ( cd "$(INTRO_ROOT_DIR)/llvm/tools" && svn checkout http://llvm.org/svn/llvm-project/cfe/trunk clang )
    fi
    if [ $? -ne 0 ]; then
      ( cd "$(INTRO_ROOT_DIR)/llvm/tools" && rm -rf clang )
      echo "ERROR: failed to 'svn checkout' Clang repository." 1>&2
      /bin/echo -n "ERROR: failed to 'svn checkout' Clang repository." | $(AWACS)
      exit 1
    fi
    [ -d "$(CLANG_DIR)" ] || exit 1
  fi
  if [ -n "$(STREAM)" ]; then
    ( cd "$(LLVM_DIR)" && svn update >> "$(STREAM)" 2>&1 )
  else
    ( cd "$(LLVM_DIR)" && svn update )
  fi
  if [ $? -ne 0 ]; then
    echo "ERROR: failed to 'svn update' LLVM repository." 1>&2
    /bin/echo -n "ERROR: failed to 'svn update' LLVM repository." | $(AWACS)
    exit 1
  fi
  if [ -n "$(STREAM)" ]; then
    ( cd "$(CLANG_DIR)" && svn update >> "$(STREAM)" 2>&1 )
  else
    ( cd "$(CLANG_DIR)" && svn update )
  fi
  if [ $? -ne 0 ]; then
    echo "ERROR: failed to 'svn update' Clang repository." 1>&2
    /bin/echo -n "ERROR: failed to 'svn update' Clang repository." | $(AWACS)
    exit 1
  fi
  llvm_rev=`( cd "$(LLVM_DIR)" && { LANG=C svn info || exit 1; } | { grep -E '^Revision: [[:digit:]]+$' || exit 1; } | { grep -oE '[[:digit:]]+$' || exit 1; } )`
  [ $? -eq 0 ] || $?
  mkdir -p "$(<:D)/build" || exit $?
  if [ -n "$(STREAM)" ]; then
    ( cd "$(<:D)/build" && "$(CONFIGURE)" $(OPTIONS) >> "$(STREAM)" 2>&1 )
  else
    ( cd "$(<:D)/build" && "$(CONFIGURE)" $(OPTIONS) )
  fi
  if [ $? -ne 0 ]; then
    echo "ERROR: failed to 'configure' LLVM & Clang Rev.${llvm_rev} ($(TRIPLET)-gcc-$(GCC_RAW))." 1>&2
    /bin/echo -n "ERROR: failed to 'configure' LLVM & Clang Rev.${llvm_rev} ($(TRIPLET)-gcc-$(GCC_RAW))." | $(AWACS)
    exit 1
  fi
  [ -f "$(<:D)/build/Makefile" ] || exit 1
  if [ -n "$(STREAM)" ]; then
    ( cd "$(<:D)/build" && make --jobs=$(CONCURRENCY) >> "$(STREAM)" 2>&1 )
  else
    ( cd "$(<:D)/build" && make --jobs=$(CONCURRENCY) )
  fi
  if [ $? -ne 0 ]; then
    echo "ERROR: failed to 'make' LLVM & Clang Rev.${llvm_rev} ($(TRIPLET)-gcc-$(GCC_RAW))." 1>&2
    /bin/echo -n "ERROR: failed to 'make' LLVM & Clang Rev.${llvm_rev} ($(TRIPLET)-gcc-$(GCC_RAW))." | $(AWACS)
    exit 1
  fi
  if [ -n "$(STREAM)" ]; then
    ( cd "$(<:D)/build" && $(ENV_DYN_LINK_VARS) make check >> "$(STREAM)" 2>&1 )
  else
    ( cd "$(<:D)/build" && $(ENV_DYN_LINK_VARS) make check )
  fi
  if [ $? -ne 0 ]; then
    echo "ERROR: failed to 'make check' LLVM & Clang Rev.${llvm_rev} ($(TRIPLET)-gcc-$(GCC_RAW))." 1>&2
    /bin/echo -n "ERROR: failed to 'make check' LLVM & Clang Rev.${llvm_rev} ($(TRIPLET)-gcc-$(GCC_RAW))." | $(AWACS)
    exit 1
  fi
  if [ -n "$(STREAM)" ]; then
    ( cd "$(<:D)/build" && make install >> "$(STREAM)" 2>&1 )
  else
    ( cd "$(<:D)/build" && make install )
  fi
  if [ $? -ne 0 ]; then
    echo "ERROR: failed to 'make install' LLVM & Clang Rev.${llvm_rev} ($(TRIPLET)-gcc-$(GCC_RAW))." 1>&2
    /bin/echo -n "ERROR: failed to 'make install' LLVM & Clang Rev.${llvm_rev} ($(TRIPLET)-gcc-$(GCC_RAW))." | $(AWACS)
    exit 1
  fi
  install --mode=755 "$(INTRO_ROOT_DIR)/clang/clang++-wrapper" "$(VERSION_PREFIX)/bin"
  if [ $? -ne 0 ]; then
    echo "ERROR: failed to install the wrapper script for LLVM & Clang Rev.${llvm_rev} ($(TRIPLET)-gcc-$(GCC_RAW))." 1>&2
    /bin/echo -n "ERROR: failed to install the wrapper script for LLVM & Clang Rev.${llvm_rev} ($(TRIPLET)-gcc-$(GCC_RAW))." | $(AWACS)
    exit 1
  fi
  /bin/echo -n "LLVM & Clang Rev.${llvm_rev} ($(TRIPLET)-gcc-$(GCC_RAW)) was successfully built." | $(AWACS)
  [ -e "$(<)" ] && exit 1
  touch "$(<)"
}


rule install-req ( properties * )
{
  assert-specified   <triplet>         : $(properties) ;
  assert-unspecified <multilib>        : $(properties) ;
  assert-specified   <multilib-hidden> : $(properties) ;
  assert-specified   <binutils>        : $(properties) ;
  assert-unspecified <binutils-hidden> : $(properties) ;
  assert-unspecified <gmp>             : $(properties) ;
  assert-specified   <gmp-hidden>      : $(properties) ;
  assert-unspecified <mpfr>            : $(properties) ;
  assert-specified   <mpfr-hidden>     : $(properties) ;
  assert-unspecified <mpc>             : $(properties) ;
  assert-specified   <mpc-hidden>      : $(properties) ;
  assert-unspecified <ppl>             : $(properties) ;
  assert-specified   <ppl-hidden>      : $(properties) ;
  assert-unspecified <cloog>           : $(properties) ;
  assert-specified   <cloog-hidden>    : $(properties) ;
  assert-specified   <gcc>             : $(properties) ;
  assert-unspecified <gcc-hidden>      : $(properties) ;
  assert-unspecified <icu4c>           : $(properties) ;
  assert-unspecified <icu4c-hidden>    : $(properties) ;
  assert-unspecified <mpi>             : $(properties) ;
  assert-unspecified <mpi-hidden>      : $(properties) ;
  assert-unspecified <openmpi>         : $(properties) ;
  assert-unspecified <openmpi-hidden>  : $(properties) ;
  assert-unspecified <boost>           : $(properties) ;
  assert-unspecified <boost-hidden>    : $(properties) ;
}

alias install : make : <conditional>@install-req ;
explicit install ;

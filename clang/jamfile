project intro/clang ;

import alias ;
import errors ;
import feature ;
import make ;
import "$(INTRO_ROOT_DIR)/compilers" ;


rule assert-specified ( feature : properties * )
{
  local val = [ feature.get-values $(feature) : $(properties) ] ;
  if $(val) = unspecified {
    errors.error "$(feature) is not specified for the LLVM & Clang build." ;
  }
}

rule assert-unspecified ( feature : properties * )
{
  local val = [ feature.get-values $(feature) : $(properties) ] ;
  if $(val) != unspecified {
    errors.error "$(feature) is not valid for the LLVM & Clang build." ;
  }
}


rule gcc-dep-req ( properties * )
{
  assert-specified   <triplet>         : $(properties) ;
  assert-unspecified <multilib>        : $(properties) ;
  assert-specified   <multilib-hidden> : $(properties) ;
  assert-unspecified <binutils>        : $(properties) ;
  assert-unspecified <binutils-hidden> : $(properties) ;
  assert-unspecified <gmp>             : $(properties) ;
  assert-unspecified <gmp-hidden>      : $(properties) ;
  assert-unspecified <mpfr>            : $(properties) ;
  assert-unspecified <mpfr-hidden>     : $(properties) ;
  assert-unspecified <mpc>             : $(properties) ;
  assert-unspecified <mpc-hidden>      : $(properties) ;
  assert-unspecified <ppl>             : $(properties) ;
  assert-unspecified <ppl-hidden>      : $(properties) ;
  assert-unspecified <cloog>           : $(properties) ;
  assert-unspecified <cloog-hidden>    : $(properties) ;
  assert-specified   <compiler>        : $(properties) ;
  assert-unspecified <compiler-hidden> : $(properties) ;
  assert-unspecified <icu4c>           : $(properties) ;
  assert-unspecified <icu4c-hidden>    : $(properties) ;
  assert-unspecified <mpi>             : $(properties) ;
  assert-unspecified <mpi-hidden>      : $(properties) ;
  assert-unspecified <openmpi>         : $(properties) ;
  assert-unspecified <openmpi-hidden>  : $(properties) ;
  assert-unspecified <boost>           : $(properties) ;
  assert-unspecified <boost-hidden>    : $(properties) ;
  local multilib = [ feature.get-values <multilib-hidden> : $(properties) ] ;
  local compiler = [ feature.get-values <compiler> : $(properties) ] ;
  local result ;
  if [ "$(INTRO_ROOT_DIR)/compilers.is-gcc" $(compiler) ]
  {
    result = <source>../gcc//install/<multilib>$(multilib)/<multilib-hidden>unspecified ;
  }
  else if [ "$(INTRO_ROOT_DIR)/compilers.is-clang" $(compiler) ]
  {
    if ! $(GCC_FOR_CLANG)
    {
      errors.error "an internal error." ;
    }
    result = <source>../gcc//install/<multilib>$(multilib)/<multilib-hidden>unspecified ;
  }
  else
  {
    errors.error "an internal error." ;
  }
  return $(result) ;
}

alias gcc-dep : : <conditional>@gcc-dep-req ;
explicit gcc-dep ;


for local compiler in $(COMPILERS)
{
  local prefix-leaf = [ "$(INTRO_ROOT_DIR)/compilers.get-prefix-leaf" "$(compiler)" : "$(GCC_FOR_CLANG)" ] ;
  local compiler-prefix = "$(PREFIX)/$(prefix-leaf)" ;
  make "$(compiler-prefix)/bin/clang++-wrapper"
    : gcc-dep
    : @make-install
    ;
  explicit "$(compiler-prefix)/bin/clang++-wrapper" ;
}

rule make-install ( targets * : sources * : properties * )
{
  assert-specified   <triplet>         : $(properties) ;
  assert-unspecified <multilib>        : $(properties) ;
  assert-specified   <multilib-hidden> : $(properties) ;
  assert-unspecified <binutils>        : $(properties) ;
  assert-unspecified <binutils-hidden> : $(properties) ;
  assert-unspecified <gmp>             : $(properties) ;
  assert-unspecified <gmp-hidden>      : $(properties) ;
  assert-unspecified <mpfr>            : $(properties) ;
  assert-unspecified <mpfr-hidden>     : $(properties) ;
  assert-unspecified <mpc>             : $(properties) ;
  assert-unspecified <mpc-hidden>      : $(properties) ;
  assert-unspecified <ppl>             : $(properties) ;
  assert-unspecified <ppl-hidden>      : $(properties) ;
  assert-unspecified <cloog>           : $(properties) ;
  assert-unspecified <cloog-hidden>    : $(properties) ;
  assert-specified   <compiler>        : $(properties) ;
  assert-unspecified <compiler-hidden> : $(properties) ;
  assert-unspecified <icu4c>           : $(properties) ;
  assert-unspecified <icu4c-hidden>    : $(properties) ;
  assert-unspecified <mpi>             : $(properties) ;
  assert-unspecified <mpi-hidden>      : $(properties) ;
  assert-unspecified <openmpi>         : $(properties) ;
  assert-unspecified <openmpi-hidden>  : $(properties) ;
  assert-unspecified <boost>           : $(properties) ;
  assert-unspecified <boost-hidden>    : $(properties) ;

  local compiler = [ feature.get-values <compiler> : $(properties) ] ;
  local compiler-description ;
  if [ "$(INTRO_ROOT_DIR)/compilers.is-gcc" $(compiler) ]
  {
    compiler-description = [ "$(INTRO_ROOT_DIR)/compilers.get-compiler-description" $(compiler) ] ;
  }
  else if [ "$(INTRO_ROOT_DIR)/compilers.is-clang" $(compiler) ]
  {
    compiler-description = [ "$(INTRO_ROOT_DIR)/compilers.get-compiler-description" $(GCC_FOR_CLANG) ] ;
  }
  else
  {
    errors.error "an internal error." ;
  }
  COMPILER_DESCRIPTION on $(targets) = "$(compiler-description)" ;

  local llvm-dir = "$(INTRO_ROOT_DIR)/llvm" ;
  LLVM_DIR on $(targets) = "$(llvm-dir)" ;

  local clang-dir = "$(llvm-dir)/tools/clang" ;
  CLANG_DIR on $(targets) = "$(clang-dir)" ;

  local compiler-rt-dir = "$(llvm-dir)/projects/compiler-rt" ;
  COMPILER_RT_DIR on $(targets) = "$(compiler-rt-dir)" ;

  local objdir = "$(INTRO_ROOT_DIR)/objdir" ;
  OBJDIR on $(targets) = "$(objdir)" ;

  local triplet = [ feature.get-values <triplet> : $(properties) ] ;
  TRIPLET on $(targets) = $(triplet) ;

  OPTIONS on $(targets) = ;

  # Set the '--build', '--host' and '--target' options for the 'configure' script.
  OPTIONS on $(targets) += --build=$(triplet) ;
  OPTIONS on $(targets) += --host=$(triplet) ;
  OPTIONS on $(targets) += --target=$(triplet) ;

  local gcc = [ feature.get-values <gcc> : $(properties) ] ;
  GCC on $(targets) = $(gcc) ;

  # Set the '--prefix' option for the 'configure' script.
  local prefix-leaf = [ "$(INTRO_ROOT_DIR)/compilers.get-prefix-leaf" $(compiler) : $(GCC_FOR_CLANG) ] ;
  local compiler-prefix = "$(PREFIX)/$(prefix-leaf)" ;
  COMPILER_PREFIX on $(targets) = "$(compiler-prefix)" ;
  OPTIONS on $(targets) += "--prefix=\"$(compiler-prefix)\"" ;

  OPTIONS on $(targets) += "--enable-bindings=none" ;

  if ! [ "$(INTRO_ROOT_DIR)/compilers.is-builtin-gcc" $(compiler) ]
  {
    OPTIONS on $(targets) += "--with-c-include-dirs=\"$(compiler-prefix)/include:/usr/include\"" ;
    OPTIONS on $(targets) += "--with-cxx-include-root=\"$(compiler-prefix)/include/c++/\"`\"$(compiler-prefix)/bin/g++\" -dumpversion`" ;
    OPTIONS on $(targets) += --with-cxx-include-arch=$(triplet) ;
    if $(triplet) = x86_64-unknown-linux-gnu || $(triplet) = x86_64-w64-mingw32
    {
      OPTIONS on $(targets) += --with-cxx-include-32bit-dir=32 ;
    }
  }

  if ! [ "$(INTRO_ROOT_DIR)/compilers.is-builtin-gcc" $(compiler) ]
  {
    OPTIONS on $(targets) += "CC=\"$(compiler-prefix)/bin/gcc-wrapper\"" ;
    OPTIONS on $(targets) += "CXX=\"$(compiler-prefix)/bin/g++-wrapper\"" ;
  }

  # `PATH' and `LD_LIBRARY_PATH' environment variables are required to
  # complete `make check' because it internally uses built tools that cannot
  # find necessary libraries including `libstdc++.so' without specifying
  # these environment variables. `LD_RUN_PATH' does not work for this
  # purpose.
  PREPEND_SHARED_LIBRARY_PATH_VARIABLE_COMMAND on $(targets) = [ "$(INTRO_ROOT_DIR)/compilers.prepend-shared-library-path-variable-command" "$(PREFIX)" : $(compiler) : $(GCC_FOR_CLANG) ] ;
}
actions make-install
{
  if [ ! -d "$(LLVM_DIR)" ]; then
    if [ -n "$(STREAM)" ]; then
      ( cd "$(INTRO_ROOT_DIR)" && svn checkout http://llvm.org/svn/llvm-project/llvm/trunk llvm >> "$(STREAM)" 2>&1 )
    else
      ( cd "$(INTRO_ROOT_DIR)" && svn checkout http://llvm.org/svn/llvm-project/llvm/trunk llvm )
    fi
    if [ $? -ne 0 ]; then
      ( cd "$(INTRO_ROOT_DIR)" && rm -rf llvm )
      echo "ERROR: failed to 'svn checkout' LLVM repository." 1>&2
      echo -n "ERROR: failed to 'svn checkout' LLVM repository." | $(AWACS)
      exit 1
    fi
    [ -d "$(LLVM_DIR)" ] || exit 1
  fi

  [ -x "$(LLVM_DIR)/autoconf/config.sub" ] || exit 1
  [ `"$(LLVM_DIR)/autoconf/config.sub" $(TRIPLET)` = $(TRIPLET) ] || exit 1
  [ -x "$(LLVM_DIR)/configure" ] || exit 1

  if [ ! -d "$(CLANG_DIR)" ]; then
    if [ -n "$(STREAM)" ]; then
      ( cd "$(INTRO_ROOT_DIR)/llvm/tools" && svn checkout http://llvm.org/svn/llvm-project/cfe/trunk clang >> "$(STREAM)" 2>&1 )
    else
      ( cd "$(INTRO_ROOT_DIR)/llvm/tools" && svn checkout http://llvm.org/svn/llvm-project/cfe/trunk clang )
    fi
    if [ $? -ne 0 ]; then
      ( cd "$(INTRO_ROOT_DIR)/llvm/tools" && rm -rf clang )
      echo "ERROR: failed to 'svn checkout' Clang repository." 1>&2
      echo -n "ERROR: failed to 'svn checkout' Clang repository." | $(AWACS)
      exit 1
    fi
    [ -d "$(CLANG_DIR)" ] || exit 1
  fi

  if [ ! -d "$(COMPILER_RT_DIR)" ]; then
    if [ -n "$(STREAM)" ]; then
      ( cd "$(INTRO_ROOT_DIR)/llvm/projects" && svn checkout http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt >> "$(STREAM)" 2>&1 )
    else
      ( cd "$(INTRO_ROOT_DIR)/llvm/projects" && svn checkout http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt )
    fi
    if [ $? -ne 0 ]; then
      ( cd "$(INTRO_ROOT_DIR)/llvm/projects" && rm -rf compiler-rt )
      echo "ERROR: failed to 'svn checkout' Compiler-RT repository." 1>&2
      echo -n "ERROR: failed to 'svn checkout' Compiler-RT repository." | $(AWACS)
      exit 1
    fi
    [ -d "$(COMPILER_RT_DIR)" ] || exit 1
  fi

  if [ -n "$(STREAM)" ]; then
    ( cd "$(LLVM_DIR)" && svn update >> "$(STREAM)" 2>&1 )
  else
    ( cd "$(LLVM_DIR)" && svn update )
  fi
  if [ $? -ne 0 ]; then
    echo "ERROR: failed to \`svn update' LLVM repository." 1>&2
    echo -n "ERROR: failed to \`svn update' LLVM repository." | $(AWACS)
    exit 1
  fi

  if [ -n "$(STREAM)" ]; then
    ( cd "$(CLANG_DIR)" && svn update >> "$(STREAM)" 2>&1 )
  else
    ( cd "$(CLANG_DIR)" && svn update )
  fi
  if [ $? -ne 0 ]; then
    echo "ERROR: failed to \`svn update' Clang repository." 1>&2
    echo -n "ERROR: failed to \`svn update' Clang repository." | $(AWACS)
    exit 1
  fi

  if [ -n "$(STREAM)" ]; then
    ( cd "$(COMPILER_RT_DIR)" && svn update >> "$(STREAM)" 2>&1 )
  else
    ( cd "$(COMPILER_RT_DIR)" && svn update )
  fi
  if [ $? -ne 0 ]; then
    echo "ERROR: failed to \`svn update' Compiler-RT repository." 1>&2
    echo -n "ERROR: failed to \`svn update' Compiler-RT repository." | $(AWACS)
    exit 1
  fi

  # Extract the revision number of Clang.
  clang_rev=`( cd "$(CLANG_DIR)" && { env LANG=C svn info || exit 1; } | { grep -E 'Revision: [[:digit:]]+' || exit 1; } | { grep -oE '[[:digit:]]+' || exit 1; } )`
  [ $? -eq 0 ] || exit 1

  # Clean up objdir `$(OBJDIR)'.
  { mkdir -p "$(OBJDIR)" && ( cd "$(OBJDIR)" && rm -rf * ); } || exit 1

  $(PREPEND_SHARED_LIBRARY_PATH_VARIABLE_COMMAND)

  if [ -n "$(STREAM)" ]; then
    ( cd "$(OBJDIR)" && "$(LLVM_DIR)/configure" $(OPTIONS) >> "$(STREAM)" 2>&1 )
  else
    ( cd "$(OBJDIR)" && "$(LLVM_DIR)/configure" $(OPTIONS) )
  fi
  if [ $? -ne 0 ]; then
    echo "ERROR: failed to 'configure' LLVM & Clang Rev.${clang_rev} ($(COMPILER_DESCRIPTION), $(TRIPLET))." 1>&2
    echo -n "ERROR: failed to 'configure' LLVM & Clang Rev.${clang_rev} ($(COMPILER_DESCRIPTION), $(TRIPLET))." | $(AWACS)
    exit 1
  fi

  # Check the creation of `Makefile'.
  [ -f "$(OBJDIR)/Makefile" ] || exit 1

  if [ -n "$(STREAM)" ]; then
    ( cd "$(OBJDIR)" && make --jobs=$(CONCURRENCY) >> "$(STREAM)" 2>&1 )
  else
    ( cd "$(OBJDIR)" && make --jobs=$(CONCURRENCY) )
  fi
  if [ $? -ne 0 ]; then
    echo "ERROR: failed to 'make' LLVM & Clang Rev.${clang_rev} ($(COMPILER_DESCRIPTION), $(TRIPLET))." 1>&2
    echo -n "ERROR: failed to 'make' LLVM & Clang Rev.${clang_rev} ($(COMPILER_DESCRIPTION), $(TRIPLET))." | $(AWACS)
    exit 1
  fi

  if [ -n "$(STREAM)" ]; then
    ( cd "$(OBJDIR)" && make check >> "$(STREAM)" 2>&1 )
  else
    ( cd "$(OBJDIR)" && make check )
  fi
  if [ $? -ne 0 ]; then
    echo "ERROR: failed to 'make check' LLVM & Clang Rev.${clang_rev} ($(COMPILER_DESCRIPTION), $(TRIPLET))." 1>&2
    echo -n "ERROR: failed to 'make check' LLVM & Clang Rev.${clang_rev} ($(COMPILER_DESCRIPTION), $(TRIPLET))." | $(AWACS)
    exit 1
  fi

  if [ -n "$(STREAM)" ]; then
    ( cd "$(OBJDIR)" && make install >> "$(STREAM)" 2>&1 )
  else
    ( cd "$(OBJDIR)" && make install )
  fi
  if [ $? -ne 0 ]; then
    echo "ERROR: failed to 'make install' LLVM & Clang Rev.${clang_rev} ($(COMPILER_DESCRIPTION), $(TRIPLET))." 1>&2
    echo -n "ERROR: failed to 'make install' LLVM & Clang Rev.${clang_rev} ($(COMPILER_DESCRIPTION), $(TRIPLET))." | $(AWACS)
    exit 1
  fi

  install --mode=755 "$(INTRO_ROOT_DIR)/clang/clang-wrapper" "$(INTRO_ROOT_DIR)/clang/clang++-wrapper" "$(COMPILER_PREFIX)/bin"
  if [ $? -ne 0 ]; then
    echo "ERROR: failed to install the wrapper scripts for LLVM & Clang Rev.${clang_rev} ($(COMPILER_DESCRIPTION), $(TRIPLET))." 1>&2
    echo -n "ERROR: failed to install the wrapper scripts for LLVM & Clang Rev.${clang_rev} ($(COMPILER_DESCRIPTION), $(TRIPLET))." | $(AWACS)
    exit 1
  fi

  # Check the creation of `clang++-wrapper'.
  [ -x "$(<)" ] || exit 1

  # Clean up objdir "$(OBJDIR)".
  rm -rf "$(OBJDIR)" || exit 1

  echo -n "LLVM & Clang Rev.${clang_rev} ($(COMPILER_DESCRIPTION), $(TRIPLET)) was successfully built." | $(AWACS)
  exit 0
}


rule install-req ( properties * )
{
  assert-specified   <triplet>         : $(properties) ;
  assert-unspecified <multilib>        : $(properties) ;
  assert-specified   <multilib-hidden> : $(properties) ;
  assert-unspecified <binutils>        : $(properties) ;
  assert-unspecified <binutils-hidden> : $(properties) ;
  assert-unspecified <gmp>             : $(properties) ;
  assert-unspecified <gmp-hidden>      : $(properties) ;
  assert-unspecified <mpfr>            : $(properties) ;
  assert-unspecified <mpfr-hidden>     : $(properties) ;
  assert-unspecified <mpc>             : $(properties) ;
  assert-unspecified <mpc-hidden>      : $(properties) ;
  assert-unspecified <ppl>             : $(properties) ;
  assert-unspecified <ppl-hidden>      : $(properties) ;
  assert-unspecified <cloog>           : $(properties) ;
  assert-unspecified <cloog-hidden>    : $(properties) ;
  assert-specified   <compiler>        : $(properties) ;
  assert-unspecified <compiler-hidden> : $(properties) ;
  assert-unspecified <icu4c>           : $(properties) ;
  assert-unspecified <icu4c-hidden>    : $(properties) ;
  assert-unspecified <mpi>             : $(properties) ;
  assert-unspecified <mpi-hidden>      : $(properties) ;
  assert-unspecified <openmpi>         : $(properties) ;
  assert-unspecified <openmpi-hidden>  : $(properties) ;
  assert-unspecified <boost>           : $(properties) ;
  assert-unspecified <boost-hidden>    : $(properties) ;
  local compiler = [ feature.get-values <compiler> : $(properties) ] ;
  local prefix-leaf = [ "$(INTRO_ROOT_DIR)/compilers.get-prefix-leaf" $(compiler) : "$(GCC_FOR_CLANG)" ] ;
  local compiler-prefix = "$(PREFIX)/$(prefix-leaf)" ;
  return <source>"$(compiler-prefix)/bin/clang++-wrapper" ;
}

alias install : : <conditional>@install-req ;
explicit install ;

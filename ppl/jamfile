project intro/ppl ;

import alias ;
import errors ;
import feature ;
import make ;
import path ;
import "$(INTRO_ROOT_DIR)/compilers"
  : is-gcc
    is-clang
    is-icc
    get-compiler-description
    get-full-prefix
    get-triplets
    get-cc
    get-cflags
    get-cxx
    get-cxxflags
    get-environment-commands
    get-logfile-path
    get-property-dump-commands
  ;


rule compiler-dep-req ( properties * )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  local result ;
  if [ is-gcc "$(compiler)" ] {
    result += "<source>../gcc//install" ;
  }
  else if [ is-clang "$(compiler)" ] {
    result += "<source>../gcc//install" ;
    result += "<source>../clang//install" ;
  }
  else if [ is-icc "$(compiler)" ] {
    result += "<source>../gcc//install" ;
    result += "<source>../icc//install" ;
  }
  else {
    errors.error "an internal error." ;
  }
  return $(result) ;
}

alias compiler-dep : : <conditional>@compiler-dep-req ;
explicit compiler-dep ;



make "$(INTRO_ROOT_DIR)/ppl-$(PPL).tar.bz2" : : @download ;
explicit "$(INTRO_ROOT_DIR)/ppl-$(PPL).tar.bz2" ;

rule download ( targets * : sources * : properties * )
{
  local version = [ feature.get-values <ppl-hidden> : $(properties) ] ;
  VERSION on $(targets) = "$(version)" ;
  URL on $(targets) = http://bugseng.com/products/ppl/download/ftp/releases/$(version)/ppl-$(version).tar.bz2 ;
  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) : "$(STREAM)" : "/dev/null" ] ;
}
actions download
{
$(PROPERTY_DUMP_COMMANDS)

  rm -rf '$(<)' || exit 1
  if [ -n '$(STREAM)' ]; then
    ( cd '$(<:D)' && wget -- '$(URL)' >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(<:D)' && wget --quiet -- '$(URL)' )
  fi
  if [ $? -ne 0 ]; then
    echo    'ERROR: failed to download PPL $(VERSION) tarball.' 1>&2
    echo -n 'ERROR: failed to download PPL $(VERSION) tarball.' | $(AWACS)
    rm -rf '$(<)'
    exit 1
  fi
  [ -f '$(<)' ] || exit 1
  exit 0
}



# Use `README' file as a target representing the completion of
# decompression action. It is suitable for the purpose because of the
# following reasons;
#
#   - The name of this file is considered stable even if the version
#     changes.
#   - This file won't be modified during the build procedure.
#
make "$(INTRO_ROOT_DIR)/ppl-$(PPL)/README"
  : "$(INTRO_ROOT_DIR)/ppl-$(PPL).tar.bz2"
  : @expand
  ;
explicit "$(INTRO_ROOT_DIR)/ppl-$(PPL)/README" ;

rule expand ( targets * : sources * : properties * )
{
  local version = [ feature.get-values <ppl-hidden> : $(properties) ] ;
  VERSION on $(targets) = "$(version)" ;
  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) : "$(STREAM)" : "/dev/null" ] ;
}
actions expand
{
$(PROPERTY_DUMP_COMMANDS)

  rm -rf '$(<:D)' || exit 1
  [ -f '$(>)' ] || exit 1
  if [ -n '$(STREAM)' ]; then
    tar xjvf '$(>)' --directory='$(INTRO_ROOT_DIR)' >> '$(STREAM)' 2>&1
  else
    tar xjf '$(>)' --directory='$(INTRO_ROOT_DIR)'
  fi
  if [ $? -ne 0 ]; then
    echo    'ERROR: failed to expand PPL $(VERSION) tarball.' 1>&2
    echo -n 'ERROR: failed to expand PPL $(VERSION) tarball.' | $(AWACS)
    rm -rf '$(<:D)'
    exit 1
  fi
  # If the timestamp of the tarball's contents is restored, the modification
  # time of the source directory could be older than the one of the tarball.
  # Such behavior is not desirable because the decompression always happens.
  # Therefore, `touch' is required.
  touch --no-create '$(<)'
  [ -f '$(<)' ] || exit 1
  exit 0
}



rule srcdir-req ( properties * )
{
  local version = [ feature.get-values <ppl-hidden> : $(properties) ] ;
  return "<source>$(INTRO_ROOT_DIR)/ppl-$(version)/README/$(DEFAULT_PROPERTIES)" ;
}

alias srcdir : : <conditional>@srcdir-req ;
explicit srcdir ;



rule location-conditional ( properties * )
{
  local full-prefix = [ get-full-prefix "$(PREFIX)" : $(properties) ] ;
  local includedir = "$(full-prefix)/include" ;
  return "<location>$(includedir)" ;
}

make ppl.hh
  : compiler-dep
    ../gmp//install
    srcdir
  : @make-install
  : $(USE_COMPILER)
    $(USE_MULTITARGET)
    $(USE_GMP)
    $(USE_PPL)
    $(USE_ADDRESS_MODEL)
    $(USE_INSTRUCTION_SET)
    <conditional>@location-conditional
  ;
explicit ppl.hh ;

rule make-install ( targets * : sources * : properties * )
{
  local compiler = [ feature.get-values <compiler> : $(properties) ] ;
  local compiler-description = [ get-compiler-description "$(compiler)" ] ;
  COMPILER_DESCRIPTION on $(targets) = "$(compiler-description)" ;

  local version = [ feature.get-values <ppl> : $(properties) ] ;
  VERSION on $(targets) = "$(version)" ;

  # Set the path to the source directory.
  local srcdir = "$(INTRO_ROOT_DIR)/ppl-$(version)" ;
  SRCDIR on $(targets) = [ path.native "$(srcdir)" ] ;

  # Set the path to objdir.
  local objdir = "$(INTRO_ROOT_DIR)/objdir" ;
  local objdir-native = [ path.native "$(objdir)" ] ;
  OBJDIR on $(targets) = "$(objdir-native)" ;

  OPTIONS on $(targets) = ;

  # Set `--prefix' option for `configure' script.
  local full-prefix = [ get-full-prefix "$(PREFIX)" : $(properties) ] ;
  local full-prefix-native = [ path.native "$(full-prefix)" ] ;
  OPTIONS on $(targets) += "--prefix='$(full-prefix-native)'" ;

  # Set `--build' and `--host' options for `configure' script.
  local triplets = [ get-triplets $(properties) ] ;
  local build-triplet = "$(triplets[1])" ;
  local host-triplet = "$(triplets[2])" ;
  BUILD_TRIPLET on $(targets) = "$(build-triplet)" ;
  HOST_TRIPLET on $(targets) = "$(host-triplet)" ;
  OPTIONS on $(targets) += "--build=$(build-triplet)" ;
  OPTIONS on $(targets) += "--host=$(host-triplet)" ;

  local variant = [ feature.get-values <variant> : $(properties) ] ;
  switch "$(variant)" {
  case "debug" :
    OPTIONS on $(targets) += "--enable-debugging" ;
    OPTIONS on $(targets) += "--enable-assertions" ;
    #OPTIONS on $(targets) += "--enable-more-assertions" ;
  case "release" :
    # Do nothing.
  case "profile" :
    OPTIONS on $(targets) += "--enable-profiling" ;
  case "" :
    errors.error "the value for `<variant>' is empty" ;
  case "*" :
    errors.error "<variant>$(variant): unknown property" ;
  }

  #OPTIONS on $(targets) += "--enable-pch" ;

  # Set the link variants for `configure' script.
  local link = [ feature.get-values <link> : $(properties) ] ;
  switch "$(link)" {
  case "shared" :
    OPTIONS on $(targets) += "--enable-shared" ;
    OPTIONS on $(targets) += "--disable-static" ;
  case "static" :
    OPTIONS on $(targets) += "--disable-shared" ;
    OPTIONS on $(targets) += "--enable-static" ;
    OPTIONS on $(targets) += "--without-pic" ;
  case "" :
    errors.error "the value for `<link>' is empty" ;
  case "*" :
    errors.error "<link>$(link): unknown property" ;
  }

  # The following options are necessary for `libtool' to guess the correct
  # include/library paths to installed GMP.
  #OPTIONS on $(targets) += "--with-gmp='$(full-prefix-native)'" ;
  ##OPTIONS on $(targets) += "--with-gmp-include='$(full-prefix-native)/include'" ;
  ##OPTIONS on $(targets) += "--with-gmp-lib='$(full-prefix-native)/lib'" ;

  local cc = [ get-cc "$(PREFIX)" : $(properties) ] ;
  local cc-native = [ path.native "$(cc)" ] ;
  OPTIONS on $(targets) += "--with-cc='$(cc-native)'" ;

  local lto = [ feature.get-values <lto> : $(properties) ] ;

  # C compiler options are `-DNDEBUG=1 -pedantic -std=c89 -Werror -pg -DPPL_PROFILING=1 -g -O2 -frounding-math CFLAGS -W -Wall'.
  # `-pg -DPPL_PROFILING=1' is added iff `--enable-profiling' is specified.
  local cflags = [ get-cflags $(properties) ] ;
  if "$(cflags)" {
    if [ is-gcc "$(compiler)" ] && "$(lto)" = "on" {
      # GCC's LTO is not compatible with `-g' option, so negates the preceding one.
      cflags = "$(cflags) -g0" ;
    }
    cflags = "$(cflags) -frounding-math" ;
    CFLAGS on $(targets) = "$(cflags)" ;
    OPTIONS on $(targets) += "CFLAGS='@$(objdir-native)/cflags'" ;
  }

  local cxx = [ get-cxx "$(PREFIX)" : $(properties) ] ;
  local cxx-native = [ path.native "$(cxx)" ] ;
  OPTIONS on $(targets) += "--with-cxx='$(cxx-native)'" ;

  # C++ compiler options are `-pg -DPPL_PROFILING=1 -g -O2 -frounding-math CXXFLAGS -W -Wall'.
  # `-pg -DPPL_PROFILING=1' is added iff `--enable-profiling' is specified.
  local cxxflags = [ get-cxxflags $(properties) ] ;
  if "$(cxxflags)" {
    # The build of PPL requires GNU extensions.
    local std = [ feature.get-values <std> : $(properties) ] ;
    switch "$(std)" {
    case "c++03" :
      if [ is-clang "$(compiler)" ] {
        # Clang does not support `-std=gnu++03'.
        cxxflags = "$(cxxflags) -std=gnu++98" ;
      }
      else {
        cxxflags = "$(cxxflags) -std=gnu++03" ;
      }
    case "c++11" :
      if [ is-gcc "$(compiler)" ] {
        # GCC 4.6.x does not support `-std=gnu++11'.
        cxxflags = "$(cxxflags) -std=gnu++0x" ;
      }
      else {
        cxxflags = "$(cxxflags) -std=gnu++11" ;
      }
    case "" :
      errors.error "the value for `<std>' is empty" ;
    case "*" :
      errors.error "<std>$(std): unknown property" ;
    }
    if [ is-gcc "$(compiler)" ] && "$(lto)" = "on" {
      # GCC's LTO is not compatible with `-g' option, so negates the preceding one.
      cxxflags = "$(cxxflags) -g0" ;
    }
    cxxflags = "$(cxxflags) -frounding-math" ;
    CXXFLAGS on $(targets) = "$(cxxflags)" ;
    OPTIONS on $(targets) += "CXXFLAGS='@$(objdir-native)/cxxflags'" ;
  }

  local environment-commands = [ get-environment-commands "$(PREFIX)" : $(properties) ] ;
  ENVIRONMENT_COMMANDS on $(targets) = "$(environment-commands)" ;

  local logfile = [ get-logfile-path "ppl" : "$(PREFIX)" : $(properties) ] ;
  local logfile-native = [ path.native "$(logfile)" ] ;
  LOGFILE on $(targets) = "$(logfile-native)" ;

  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) : "$(STREAM)" : "$(logfile)" ] ;
}
actions make-install
{
  exit_with_error ()
  {
    echo "`LANG=C date`:ERROR: $1 (PPL $(VERSION), $(COMPILER_DESCRIPTION))" | tee -a '$(LOGFILE)' >> '$(STREAM)'
    echo -n "ERROR: $1 (PPL $(VERSION), $(COMPILER_DESCRIPTION))" | $(AWACS)
    exit 1
  }

  echo "`LANG=C date`:INFO: initiation of PPL build process" | tee '$(LOGFILE)' >> '$(STREAM)'

$(ENVIRONMENT_COMMANDS)

$(PROPERTY_DUMP_COMMANDS)

  # Restore the hacked configure script. See also `../gcc/jamfile'.
  if [ -e '$(SRCDIR)/real-configure' ]; then
    [ -x '$(SRCDIR)/real-configure' ] || exit_with_error 'failed to restore the hacked script'
    mv -f '$(SRCDIR)/real-configure' '$(SRCDIR)/configure' || exit_with_error 'failed to restore the hacked script'
  fi

  [ -x '$(SRCDIR)/configure' ] || exit_with_error "\`$(SRCDIR)/configure' is not executable"
  [ -x '$(SRCDIR)/config.sub' ] || exit_with_error "\`$(SRCDIR)/config.sub' is not executable"
  [ `'$(SRCDIR)/config.sub' $(BUILD_TRIPLET)` = $(BUILD_TRIPLET) ] || exit_with_error "\`--build=$(BUILD_TRIPLET)' is not supported"
  [ `'$(SRCDIR)/config.sub' $(HOST_TRIPLET)` = $(HOST_TRIPLET) ] || exit_with_error "\`--host=$(HOST_TRIPLET)' is not supported"

  # Clean up objdir `$(OBJDIR)'.
  { mkdir -p '$(OBJDIR)' && ( cd '$(OBJDIR)' && rm -rf * ); } || exit_with_error 'failed to clean up the old objdir'

  echo "`LANG=C date`:INFO: @cflags: $(CFLAGS)" | tee -a '$(LOGFILE)' >> '$(STREAM)'
  echo "`LANG=C date`:INFO: @cxxflags: $(CXXFLAGS)" | tee -a '$(LOGFILE)' >> '$(STREAM)'
  ( cd '$(OBJDIR)' && echo -n '$(CFLAGS)' > cflags ) || exit_with_error 'failed to create @cflags'
  ( cd '$(OBJDIR)' && echo -n '$(CXXFLAGS)' > cxxflags ) || exit_with_error 'failed to create @cxxflags'

  echo "`LANG=C date`:COMMAND: ./configure $(OPTIONS:J= )" | tee -a '$(LOGFILE)' >> '$(STREAM)'
  tail --follow --lines=0 --sleep-interval=0.1 '$(LOGFILE)' >> '$(STREAM)' &
  ( cd '$(OBJDIR)' && '$(SRCDIR)/configure' $(OPTIONS) >> '$(LOGFILE)' 2>&1 )
  result=$?
  kill -TERM $!
  if [ $result -ne 0 ]; then
    exit_with_error "failed to \`configure'"
  fi

  # Check the creation of `Makefile'.
  [ -f '$(OBJDIR)/Makefile' ] || exit_with_error "failed to confirm the creation of \`Makefile'"

  echo "`LANG=C date`:COMMAND: make" | tee -a '$(LOGFILE)' >> '$(STREAM)'
  tail --follow --lines=0 --sleep-interval=0.1 '$(LOGFILE)' >> '$(STREAM)' &
  ( cd '$(OBJDIR)' && make --jobs=$(CONCURRENCY) >> '$(LOGFILE)' 2>&1 )
  result=$?
  kill -TERM $!
  if [ $result -ne 0 ]; then
    exit_with_error "failed to \`make'"
  fi

  echo "`LANG=C date`:COMMAND: make check" | tee -a '$(LOGFILE)' >> '$(STREAM)'
  tail --follow --lines=0 --sleep-interval=0.1 '$(LOGFILE)' >> '$(STREAM)' &
  ( cd '$(OBJDIR)' && make --jobs=$(CONCURRENCY) check >> '$(LOGFILE)' 2>&1 )
  result=$?
  kill -TERM $!
  if [ $result -ne 0 ]; then
    exit_with_error "failed to \`make check'"
  fi

  echo "`LANG=C date`:COMMAND: make install" | tee -a '$(LOGFILE)' >> '$(STREAM)'
  tail --follow --lines=0 --sleep-interval=0.1 '$(LOGFILE)' >> '$(STREAM)' &
  ( cd '$(OBJDIR)' && make install >> '$(LOGFILE)' 2>&1 )
  result=$?
  kill -TERM $!
  if [ $result -ne 0 ]; then
    exit_with_error "failed to \`make install'"
  fi

  # Clean up objdir `$(OBJDIR)'.
  rm -rf '$(OBJDIR)' || exit_with_error 'failed to clean up the objdir'

  [ -f '$(<)' ] || exit_with_error 'failed to confirm the creation of the build target'

  echo -n 'PPL $(VERSION) ($(COMPILER_DESCRIPTION)) was successfully built.' | $(AWACS)
  echo "`LANG=C date`:INFO: successful completion of PPL build process" | tee -a '$(LOGFILE)' >> '$(STREAM)'
  exit 0
}



alias install : ppl.hh ;
explicit install ;

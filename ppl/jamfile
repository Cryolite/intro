project intro/ppl ;

import alias ;
import errors ;
import feature ;
import make ;
import path ;
import regex ;
import "$(INTRO_ROOT_DIR)/compilers"
  : is-gcc
    is-clang
    is-icc
    get-full-prefix
    get-triplets
    get-cc
    get-cflags
    get-cxx
    get-cxxflags
    get-environment-commands
    get-property-dump-commands
  ;

.here = [ regex.match "Jamfile<(.*)>" : "$(__name__)" : 1 ] ;
.here = [ path.make "$(.here)" ] ;
.here-relative = [ path.relative "$(.here)" "$(INTRO_ROOT_DIR)" ] ;


rule compiler-dep-req ( properties * )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  local result ;
  if [ is-gcc "$(compiler)" ] {
    result += "<source>../gcc//install" ;
  }
  else if [ is-clang "$(compiler)" ] {
    result += "<source>../gcc//install" ;
    result += "<source>../clang//install" ;
  }
  else if [ is-icc "$(compiler)" ] {
    result += "<source>../gcc//install" ;
    result += "<source>../icc//install" ;
  }
  else {
    errors.error "an internal error." ;
  }
  return $(result) ;
}

alias compiler-dep : : <conditional>@compiler-dep-req ;
explicit compiler-dep ;


make "$(INTRO_ROOT_DIR)/ppl-$(PPL).tar.bz2" : : @download ;
explicit "$(INTRO_ROOT_DIR)/ppl-$(PPL).tar.bz2" ;

rule download ( targets * : sources * : properties * )
{
  HERE on $(targets) = [ path.native "$(.here)" ] ;
  HERE_RELATIVE on $(targets) = [ path.native "$(.here-relative)" ] ;
  local version = [ feature.get-values <ppl-hidden> : $(properties) ] ;
  URL on $(targets) = http://bugseng.com/products/ppl/download/ftp/releases/$(version)/ppl-$(version).tar.bz2 ;
  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions download
{
  bash -s << 'EOS'
  exec >> '$(STDOUT_)' 2>> '$(STDERR_)'
$(PROPERTY_DUMP_COMMANDS)
  LINENO_ADJ=`grep -Fn 9fe39b16-4a7c-4891-bc43-06351b859c18 '$(HERE)/jamfile' | grep -Eo '^[[:digit:]]+'`
  LINENO_ADJ=`expr $LINENO_ADJ - $LINENO + 1`
  PS4='+$(HERE_RELATIVE)/jamfile:`expr $LINENO + $LINENO_ADJ`: '
  set -ex
  rm -f '$(<)'
  trap "rm -f '$(<)'" ERR HUP INT QUIT TERM
  ( cd '$(<:D)' && wget -q -t 3 --no-clobber -- '$(URL)' )
  [ -f '$(<)' ]
EOS
}


# Use `README' file as a target representing the completion of
# decompression action. It is suitable for the purpose because of the
# following reasons;
#
#   - The name of this file is considered stable even if the version
#     changes.
#   - This file won't be modified during the build procedure.
#
make "$(INTRO_ROOT_DIR)/ppl-$(PPL)/README"
  : "$(INTRO_ROOT_DIR)/ppl-$(PPL).tar.bz2"
  : @expand
  ;
explicit "$(INTRO_ROOT_DIR)/ppl-$(PPL)/README" ;

rule expand ( targets * : sources * : properties * )
{
  HERE on $(targets) = [ path.native "$(.here)" ] ;
  HERE_RELATIVE on $(targets) = [ path.native "$(.here-relative)" ] ;
  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions expand
{
  bash -s << 'EOS'
  exec >> '$(STDOUT_)' 2>> '$(STDERR_)'
$(PROPERTY_DUMP_COMMANDS)
  LINENO_ADJ=`grep -Fn ef532952-962c-482d-89d5-076234f3c521 '$(HERE)/jamfile' | grep -Eo '^[[:digit:]]+'`
  LINENO_ADJ=`expr $LINENO_ADJ - $LINENO + 1`
  PS4='+$(HERE_RELATIVE)/jamfile:`expr $LINENO + $LINENO_ADJ`: '
  set -ex
  rm -rf '$(<:D)'
  [ -f '$(>)' ]
  trap "rm -rf '$(>)' '$(<:D)'" ERR HUP INT QUIT TERM
  tar xjvf '$(>)' -C '$(INTRO_ROOT_DIR)'
  # If the timestamp of the tarball's contents is restored, the modification
  # time of the source directory could be older than the one of the tarball.
  # Such behavior is not desirable because the decompression always happens.
  # Therefore, `touch' is required.
  touch --no-create '$(<)'
  [ -f '$(<)' ]
EOS
}


rule srcdir-req ( properties * )
{
  local version = [ feature.get-values <ppl-hidden> : $(properties) ] ;
  return "<source>$(INTRO_ROOT_DIR)/ppl-$(version)/README/$(DEFAULT_PROPERTIES)" ;
}

alias srcdir : : <conditional>@srcdir-req ;
explicit srcdir ;


rule location-conditional ( properties * )
{
  local full-prefix = [ get-full-prefix "$(PREFIX)" : $(properties) ] ;
  local includedir = "$(full-prefix)/include" ;
  return "<location>$(includedir)" ;
}

make ppl.hh
  : compiler-dep
    ../gmp//install
    srcdir
  : @make-install
  : $(USE_COMPILER)
    $(USE_MULTITARGET)
    $(USE_GMP)
    $(USE_PPL)
    <conditional>@location-conditional
  ;
explicit ppl.hh ;

rule make-install ( targets * : sources * : properties * )
{
  HERE on $(targets) = [ path.native "$(.here)" ] ;
  HERE_RELATIVE on $(targets) = [ path.native "$(.here-relative)" ] ;

  # Sets the path to the source directory.
  local version = [ feature.get-values <ppl> : $(properties) ] ;
  local srcdir = "$(INTRO_ROOT_DIR)/ppl-$(version)" ;
  SRCDIR on $(targets) = [ path.native "$(srcdir)" ] ;

  # Sets the path to `objdir`.
  local objdir = "$(INTRO_ROOT_DIR)/objdir" ;
  local objdir-native = [ path.native "$(objdir)" ] ;
  OBJDIR on $(targets) = "$(objdir-native)" ;

  OPTIONS on $(targets) = ;

  # Sets `--prefix' option for `configure' script.
  local full-prefix = [ get-full-prefix "$(PREFIX)" : $(properties) ] ;
  local full-prefix-native = [ path.native "$(full-prefix)" ] ;
  OPTIONS on $(targets) += "--prefix='$(full-prefix-native)'" ;

  # Sets `--build' and `--host' options for `configure' script.
  local triplets = [ get-triplets $(properties) ] ;
  local build-triplet = "$(triplets[1])" ;
  local host-triplet = "$(triplets[2])" ;
  BUILD_TRIPLET on $(targets) = "$(build-triplet)" ;
  HOST_TRIPLET on $(targets) = "$(host-triplet)" ;
  OPTIONS on $(targets) += "--build=$(build-triplet)" ;
  OPTIONS on $(targets) += "--host=$(host-triplet)" ;

  local variant = [ feature.get-values <variant> : $(properties) ] ;
  switch "$(variant)" {
  case "debug" :
    OPTIONS on $(targets) += "--enable-debugging" ;
    OPTIONS on $(targets) += "--enable-assertions" ;
    #OPTIONS on $(targets) += "--enable-more-assertions" ;
  case "release" :
    # Do nothing.
  case "profile" :
    OPTIONS on $(targets) += "--enable-profiling" ;
  case "" :
    errors.error "the value for `<variant>' is empty" ;
  case "*" :
    errors.error "<variant>$(variant): an unknown property" ;
  }

  #OPTIONS on $(targets) += "--enable-pch" ;

  # Sets the link variants for `configure' script.
  local link = [ feature.get-values <link> : $(properties) ] ;
  switch "$(link)" {
  case "shared" :
    OPTIONS on $(targets) += "--enable-shared" ;
    OPTIONS on $(targets) += "--disable-static" ;
  case "static" :
    OPTIONS on $(targets) += "--disable-shared" ;
    OPTIONS on $(targets) += "--enable-static" ;
    OPTIONS on $(targets) += "--without-pic" ;
  case "" :
    errors.error "the value for `<link>' is empty" ;
  case "*" :
    errors.error "<link>$(link): an unknown property" ;
  }

  # The following options are necessary for `libtool' to guess the correct
  # include/library paths to installed GMP.
  #OPTIONS on $(targets) += "--with-gmp='$(full-prefix-native)'" ;
  ##OPTIONS on $(targets) += "--with-gmp-include='$(full-prefix-native)/include'" ;
  ##OPTIONS on $(targets) += "--with-gmp-lib='$(full-prefix-native)/lib'" ;

  local cc = [ get-cc "$(PREFIX)" : $(properties) ] ;
  local cc-native = [ path.native "$(cc)" ] ;
  OPTIONS on $(targets) += "--with-cc='$(cc-native)'" ;

  local compiler = [ feature.get-values <compiler> : $(properties) ] ;
  local lto = [ feature.get-values <lto> : $(properties) ] ;

  # C compiler options are `-DNDEBUG=1 -pedantic -std=c89 -Werror -pg -DPPL_PROFILING=1 -g -O2 -frounding-math CFLAGS -W -Wall'.
  # `-pg -DPPL_PROFILING=1' is added iff `--enable-profiling' is specified.
  local cflags = [ get-cflags $(properties) ] ;
  if "$(cflags)" {
    if [ is-gcc "$(compiler)" ] && "$(lto)" = "on" {
      # GCC's LTO is not compatible with `-g' option, so negates the preceding one.
      cflags = "$(cflags) -g0" ;
    }
    cflags = "$(cflags) -frounding-math" ;
    CFLAGS on $(targets) = "$(cflags)" ;
    OPTIONS on $(targets) += "CFLAGS='@$(objdir-native)/cflags'" ;
  }

  local cxx = [ get-cxx "$(PREFIX)" : $(properties) ] ;
  local cxx-native = [ path.native "$(cxx)" ] ;
  OPTIONS on $(targets) += "--with-cxx='$(cxx-native)'" ;

  # C++ compiler options are `-pg -DPPL_PROFILING=1 -g -O2 -frounding-math CXXFLAGS -W -Wall'.
  # `-pg -DPPL_PROFILING=1' is added iff `--enable-profiling' is specified.
  local cxxflags = [ get-cxxflags $(properties) ] ;
  if "$(cxxflags)" {
    # The build of PPL requires GNU extensions.
    local std = [ feature.get-values <std> : $(properties) ] ;
    switch "$(std)" {
    case "c++03" :
      if [ is-clang "$(compiler)" ] {
        # Clang does not support `-std=gnu++03'.
        cxxflags = "$(cxxflags) -std=gnu++98" ;
      }
      else {
        cxxflags = "$(cxxflags) -std=gnu++03" ;
      }
    case "c++11" :
      cxxflags = "$(cxxflags) -std=gnu++11" ;
    case "c++1y" :
      errors.error "check if PPL really requires `-std=gnu++1y' instead of `-std=c++1y'" ;
      cxxflags = "$(cxxflags) -std=gnu++1y" ;
    case "" :
      errors.error "the value for `<std>' is empty" ;
    case "*" :
      errors.error "<std>$(std): unknown property" ;
    }
    if [ is-gcc "$(compiler)" ] && "$(lto)" = "on" {
      # GCC's LTO is not compatible with `-g' option, so negates the preceding one.
      cxxflags = "$(cxxflags) -g0" ;
    }
    cxxflags = "$(cxxflags) -frounding-math" ;
    CXXFLAGS on $(targets) = "$(cxxflags)" ;
    OPTIONS on $(targets) += "CXXFLAGS='@$(objdir-native)/cxxflags'" ;
  }

  local environment-commands = [ get-environment-commands "$(PREFIX)" : $(properties) ] ;
  ENVIRONMENT_COMMANDS on $(targets) = "$(environment-commands)" ;

  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions make-install
{
  bash -s << 'EOS'
  exec >> '$(STDOUT_)' 2>> '$(STDERR_)'
$(ENVIRONMENT_COMMANDS)
$(PROPERTY_DUMP_COMMANDS)
  LINENO_ADJ=`grep -Fn bad39f88-9b1f-4847-a88b-89549d214b8f '$(HERE)/jamfile' | grep -Eo '^[[:digit:]]+'`
  LINENO_ADJ=`expr $LINENO_ADJ - $LINENO + 1`
  PS4='+$(HERE_RELATIVE)/jamfile:`expr $LINENO + $LINENO_ADJ`: '
  set -ex

  rm -rf '$(OBJDIR)'

  cleanup ()
  {
    if [ -d '$(OBJDIR)' ]; then
      mv -n '$(OBJDIR)' "$(INTRO_ROOT_DIR)/objdir_$$"
    fi
  }
  trap cleanup ERR HUP INT QUIT TERM

  # Creates `objdir`.
  ( cd '$(INTRO_ROOT_DIR)' && mkdir objdir )

  [ -x '$(SRCDIR)/configure' ]
  [ -x '$(SRCDIR)/config.sub' ]
  [ `'$(SRCDIR)/config.sub' $(BUILD_TRIPLET)` = $(BUILD_TRIPLET) ]
  [ `'$(SRCDIR)/config.sub' $(HOST_TRIPLET)` = $(HOST_TRIPLET) ]

  ( cd '$(OBJDIR)' && echo -n '$(CFLAGS)' > cflags )
  ( cd '$(OBJDIR)' && echo -n '$(CXXFLAGS)' > cxxflags )

  ( cd '$(OBJDIR)' && '$(SRCDIR)/configure' $(OPTIONS) )

  # Checks the creation of `Makefile`.
  [ -f '$(OBJDIR)/Makefile' ]

  ( cd '$(OBJDIR)' && make --jobs=$(CONCURRENCY) )

  ( cd '$(OBJDIR)' && make --jobs=$(CONCURRENCY) check )

  ( cd '$(OBJDIR)' && make install )

  # Cleans up `objdir`.
  rm -r '$(OBJDIR)'

  [ -f '$(<)' ]
EOS
}


alias install : ppl.hh ;
explicit install ;

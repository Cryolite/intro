project mpc ;

import alias ;
import errors ;
import feature : feature ;
import make ;
import regex ;
import string ;

path-constant THIS_DIR : . ;


rule gmp-dep-req ( properties * )
{
  local result = <source>../gmp//install ;

  # `<mpc-version>' is automatically propagated.

  result = $(result)/<intro-build>unspecified ;

  local build = [ feature.get-values <intro-build> : $(properties) ] ;
  local host = [ feature.get-values <intro-host> : $(properties) ] ;
  if $(build) = $(host)
  {
    result = $(result)/<intro-host>unspecified ;
  }
  else
  {
    result = $(result)/<intro-host>$(host) ;
  }

  # `<intro-abi>' is automatically propagated.

  # `<intro-prefix>' is automatically propagated.

  # `<intro-link>' is automatically propagated.

  # `<intro-check>' is automatically propagated.

  # `<intro-stdour>' is automatically propagated.

  # `<intro-stderr>' is automatically propagated.

  #errors.error $(result) ;

  return $(result) ;
}

alias gmp.dep
  : # sources are introduced by the indirect conditional requirements.
  : <conditional>@gmp-dep-req
  ;
explicit gmp.dep ;


rule mpfr-dep-req ( properties * )
{
  local result = <source>../mpfr//install ;

  # `<mpc-version>' is automatically propagated.

  result = $(result)/<intro-build>unspecified ;

  local build = [ feature.get-values <intro-build> : $(properties) ] ;
  local host = [ feature.get-values <intro-host> : $(properties) ] ;
  if $(build) = $(host)
  {
    result = $(result)/<intro-host>unspecified ;
  }
  else
  {
    result = $(result)/<intro-host>$(host) ;
  }

  # `<intro-abi>' is automatically propagated.

  # `<intro-prefix>' is automatically propagated.

  # `<intro-link>' is automatically propagated.

  # `<intro-check>' is automatically propagated.

  # `<intro-stdour>' is automatically propagated.

  # `<intro-stderr>' is automatically propagated.

  #errors.error $(result) ;

  return $(result) ;
}

alias mpfr.dep
  : # sources are introduced by the indirect conditional requirements.
  : <conditional>@mpfr-dep-req
  ;
explicit mpfr.dep ;


make mpc.download
  : # No sources.
  : @download-mpc
  ;
explicit mpc.download ;

rule download-mpc ( targets * : sources * : properties * )
{
  local ver = [ feature.get-values <mpc-version> : $(properties) ] ;
  URL on $(targets) = http://www.multiprecision.org/mpc/download/mpc-$(ver).tar.gz ;
  TARBALL on $(targets) = $(THIS_DIR)/mpc-$(ver).tar.gz ;
  STDOUT_ on $(targets) = [ feature.get-values <intro-stdout> : $(properties) ] ;
  STDERR_ on $(targets) = [ feature.get-values <intro-stderr> : $(properties) ] ;
}
actions download-mpc
{
  rm -f "$(<)" || exit $?
  rm -f "$(TARBALL)" || exit $?
  ( cd "$(TARBALL:D)" && wget --quiet --timestamping -- '$(URL)' ) \
    || { echo "ERROR: failed to download the MPC tarball." 2>"$(STDOUT_)" 1>&2; exit 1; }
  [ ! -f "$(TARBALL)" ] && exit 1
  [ -e "$(<)" ] && exit 1
  touch "$(<)"
}


rule mpc-expand-req ( properties * )
{
  local result = ;
  local ver = [ feature.get-values <mpc-version> : $(properties) ] ;
  if [ path.exists $(THIS_DIR)/mpc-$(ver).tar.gz ]
  {
    result = <source>$(THIS_DIR)/mpc-$(ver).tar.gz ;
  }
  else if [ path.exists $(THIS_DIR)/mpc-$(ver).tar.bz2 ]
  {
    result = <source>$(THIS_DIR)/mpc-$(ver).tar.bz2 ;
  }
  else
  {
    result = <source>mpc.download ;
  }
  return $(result) ;
}

make mpc.expand
  : # Sources are introduced by the following indirect conditional requirements.
  : @expand-mpc
  : <conditional>@mpc-expand-req
  ;
explicit mpc.expand ;

rule expand-mpc ( targets * : sources * : properties * )
{
  if $(sources[2])
  {
    errors.error "ERROR: wrong number of sources." ;
  }
  local source = $(sources[1]) ;
  if ! $(source)
  {
    errors.error "ERROR: no source." ;
  }

  local ver = [ feature.get-values <mpc-version> : $(properties) ] ;
  if [ regex.match (mpc-$(ver)\\.tar\\.gz)$ : $(source) : 1 ]
  {
    TARBALL on $(targets) = $(THIS_DIR)/mpc-$(ver).tar.gz ;
    OPTIONS on $(targets) = xzf ;
  }
  else if [ regex.match (mpc-$(ver)\\.tar\\.bz2)$ : $(source) : 1 ]
  {
    TARBALL on $(targets) = $(THIS_DIR)/mpc-$(ver).tar.bz2 ;
    OPTIONS on $(targets) = xjf ;
  }
  else if [ regex.match (mpc.download)$ : $(source) : 1 ]
  {
    TARBALL on $(targets) = $(THIS_DIR)/mpc-$(ver).tar.gz ;
    OPTIONS on $(targets) = xzf ;
  }
  else
  {
    errors.error "ERROR: an invalid source." ;
  }

  DEST_DIR on $(targets) = $(THIS_DIR)/mpc-$(ver) ;
  STDOUT_ on $(targets) = [ feature.get-values <intro-stdout> : $(properties) ] ;
  STDERR_ on $(targets) = [ feature.get-values <intro-stderr> : $(properties) ] ;
}
actions expand-mpc
{
  rm -f "$(<)" || exit $?
  rm -rf "$(DEST_DIR)" || exit $?
  [ ! -f "$(>)" ] && exit 1
  [ ! -f "$(TARBALL)" ] && exit 1
  tar $(OPTIONS) "$(TARBALL)" -C "$(TARBALL:D)" \
    || { echo "ERROR: failed to expand the tarball for the MPC build." 2>"$(STDERR_)" 1>&2; exit 1; }
  [ ! -f "$(DEST_DIR)/configure" ] && exit 1
  [ -e "$(<)" ] && exit 1
  touch "$(<)"
}


rule makefile-req ( properties * )
{
  local results = ;
  local ver = [ feature.get-values <mpc-version> : $(properties) ] ;
  if [ path.exists $(THIS_DIR)/mpc-$(ver)/configure ]
  {
    results += <source>$(THIS_DIR)/mpc-$(ver)/configure ;
  }
  else
  {
    local tmp = <source>mpc.expand ;
    tmp = $(tmp)/<intro-host>unspecified ;
    tmp = $(tmp)/<intro-abi>unspecified ;
    tmp = $(tmp)/<intro-link>unspecified ;
    results += $(tmp) ;
  }
  #errors.error $(results) ;
  return $(results) ;
}

make Makefile
  : gmp.dep
    mpfr.dep
    # Other sources are introduced by the indirect conditional requirements.
  : @configure
  : <conditional>@makefile-req
  ;
explicit Makefile ;

rule configure ( targets * : sources * : properties * )
{
  OPTIONS on $(targets) = ;

  local ver = [ feature.get-values <mpc-version> : $(properties) ] ;

  # Set the path to the 'configure' file.
  local configure = $(THIS_DIR)/mpc-$(ver)/configure ;
  CONFIGURE on $(targets) = $(configure) ;

  # Set the 'build' option for the 'configure' script.
  local build = [ feature.get-values <intro-build> : $(properties) ] ;
  OPTIONS on $(targets) += --build=$(build) ;

  # Set the 'host' option for the 'configure' script.
  local host = [ feature.get-values <intro-host> : $(properties) ] ;
  OPTIONS on $(targets) += --host=$(host) ;

  # Set the 'CC' option for the 'configure' script.
  local abi = [ feature.get-values <intro-abi> : $(properties) ] ;
  local cc = [ SHELL "\"$(THIS_DIR)/../cc.sh\" $(build) $(host) $(abi) || /bin/echo -n 'error'" ] ;
  if $(cc) = error
  {
    errors.error "ERROR: cannot determine the 'CC' option for the MPC build." ;
  }
  CC on $(targets) = ;
  if $(cc)
  {
    CC on $(targets) = "CC='$(cc)'" ;
  }

  # Set the 'prefix' option for the 'configure' script.
  local prefix = [ feature.get-values <intro-prefix> : $(properties) ] ;
  OPTIONS on $(targets) += --prefix=\"$(prefix)\" ;

  # Set the link variants for the 'configure' script.
  local link = [ feature.get-values <intro-link> : $(properties) ] ;
  if $(link) = both || $(link) = static
  {
    OPTIONS on $(targets) += --enable-static ;
  }
  else
  {
    OPTIONS on $(targets) += --disable-static ;
  }
  if $(link) = both || $(link) = shared
  {
    OPTIONS on $(targets) += --enable-shared ;
  }
  else
  {
    OPTIONS on $(targets) += --disable-shared ;
  }

  # Set the 'with-gmp' option for the 'configure' script.
  OPTIONS on $(targets) += --with-gmp=\"$(prefix)\" ;

  # Set the 'with-mpfr' option for the 'configure' script.
  OPTIONS on $(targets) += --with-mpfr=\"$(prefix)\" ;

  STDOUT_ on $(targets) = [ feature.get-values <intro-stdout> : $(properties) ] ;
  STDERR_ on $(targets) = [ feature.get-values <intro-stderr> : $(properties) ] ;
}
actions configure
{
  ( cd "$(<:D)" && rm -rf * ) || exit $?
  [ ! -f "$(CONFIGURE)" ] && exit 1
  ( cd "$(<:D)" && $(CC) "$(CONFIGURE)" $(OPTIONS) 1>"$(STDOUT_)" 2>"$(STDERR_)" ) \
    || { echo "ERROR: failed to 'configure' for the MPC build." 2>"$(STDERR_)" 1>&2; exit 1; }
  [ ! -f "$(<)" ] && exit 1
  exit 0
}


make mpc.make
  : Makefile
  : @make-mpc
  ;
explicit mpc.make ;

rule make-mpc ( targets * : sources * : properties * )
{
  local prefix = [ feature.get-values <intro-prefix> : $(properties) ] ;
  local build = [ feature.get-values <intro-build> : $(properties) ] ;
  if [ regex.match "(-mingw32)$" : $(build) : 1 ]
  {
    RUN_VAR on $(targets) = "PATH=$(prefix)/bin:$PATH" ;
  }
  else if [ regex.match "(-cygwin)$" : $(build) : 1 ]
  {
    RUN_VAR on $(targets) = "PATH=$(prefix)/bin:$PATH" ;
  }
  else
  {
    RUN_VAR on $(targets) = "LD_LIBRARY_PATH=$(prefix)/lib:$LD_LIBRARY_PATH" ;
  }

  CHECK on $(targets) = [ feature.get-values <intro-check> : $(properties) ] ;
  STDOUT_ on $(targets) = [ feature.get-values <intro-stdout> : $(properties) ] ;
  STDERR_ on $(targets) = [ feature.get-values <intro-stderr> : $(properties) ] ;
}
actions make-mpc
{
  rm -f "$(<)" || exit $?
  [ ! -f "$(>)" ] && exit 1
  ( cd "$(<:D)" && make 1>"$(STDOUT_)" 2>"$(STDERR_)" ) \
    || { echo "ERROR: failed to 'make' for the MPC build." 2>"$(STDERR_)" 1>&2; exit 1; }
  if [ $(CHECK) = yes ]; then
    ( cd "$(<:D)" && $(RUN_VAR) make check 1>"$(STDOUT_)" 2>"$(STDERR_)" ) \
      || { echo "ERROR: failed to 'make check' for the MPC build." 2>"$(STDERR_)" 1>&2; exit 1; }
  fi
  ( cd "$(<:D)" && make install 1>"$(STDOUT_)" 2>"$(STDERR_)" ) \
    || { echo "ERROR: failed to 'make install' for the MPC build." 2>"$(STDERR_)" 1>&2; exit 1; }
  [ -e "$(<)" ] && exit 1
  touch "$(<)"
}


make mpc.test
  : mpc.make
  : @test-mpc
  ;
explicit mpc.test ;

rule test-mpc ( targets * : sources * : properties * )
{
  COMMAND on $(targets) = $(THIS_DIR)/test.sh ;
  VERSION on $(targets) = [ feature.get-values <mpc-version> : $(properties) ] ;
  BUILD on $(targets) = [ feature.get-values <intro-build> : $(properties) ] ;
  HOST on $(targets) = [ feature.get-values <intro-host> : $(properties) ] ;
  ABI on $(targets) = [ feature.get-values <intro-abi> : $(properties) ] ;
  PREFIX on $(targets) = [ feature.get-values <intro-prefix> : $(properties) ] ;
  LINK on $(targets) = [ feature.get-values <intro-link> : $(properties) ] ;
  CHECK on $(targets) = [ feature.get-values <intro-check> : $(properties) ] ;
  STDERR_ on $(targets) = [ feature.get-values <intro-stderr> : $(properties) ] ;
}
actions test-mpc
{
  rm -f "$(<)" || exit 1
  x=`"$(COMMAND)" $(VERSION) $(BUILD) $(HOST) $(ABI) "$(PREFIX)" $(LINK) $(CHECK)`
  if [ $? -ne 0 ]; then
    /bin/echo 'ERROR: post-installation test failed for the MPC build.' 2>"$(STDERR_)" 1>&2
    exit 1
  fi
  [ "$x" != 'yes' ] && exit 1
  [ -e "$(<)" ] && exit 1
  touch "$(<)"
}


rule install-req ( properties * )
{
  local result = <source>mpc.test ;

  local tmp = ;

  local build = [ feature.get-values <intro-build> : $(properties) ] ;
  tmp = [ SHELL "\"$(THIS_DIR)/config.guess\" | tr --delete '\n'" ] ;
  if $(build) = unspecified
  {
    build = $(tmp) ;
  }
  if $(build) != $(tmp)
  {
    errors.error "ERROR: the given property '<intro-build>$(build)' is not valid." ;
  }
  tmp = [ SHELL "\"$(THIS_DIR)/config.sub\" $(build) | tr --delete '\n'" ] ;
  if $(tmp) != $(build)
  {
    errors.error "ERROR: the given property '<intro-build>$(build)' is not canonical." ;
  }
  result = $(result)/<intro-build>$(build) ;

  local host = [ feature.get-values <intro-host> : $(properties) ] ;
  if $(host) = unspecified
  {
    host = $(build) ;
  }
  tmp = [ SHELL "\"$(THIS_DIR)/config.sub\" $(host) | tr --delete '\n'" ] ;
  if $(tmp) != $(host)
  {
    errors.error "ERROR: the property '<intro-host>$(host)' is not canonical." ;
  }
  result = $(result)/<intro-host>$(host) ;

  local target = [ feature.get-values <intro-target> : $(properties) ] ;
  if ! $(target) = unspecified
  {
    errors.error "ERROR: the property '<intro-target>$(target)' is specified for MPC build." ;
  }

  local link = [ feature.get-values <intro-link> : $(properties) ] ;
  if $(link) = unspecified
  {
    errors.error "ERROR: '<intro-link>' is not specified for the MPC build." ;
  }

  local check = [ feature.get-values <intro-check> : $(properties) ] ;
  if $(check) = unspecified
  {
    if $(build) = $(host)
    {
      check = yes ;
    }
    else {
      check = no ;
    }
  }
  result = $(result)/<intro-check>$(check) ;

  #errors.error $(result) ;

  return $(result) ;
}

alias install
  : # The source 'install-normalized' is introduced by the following indirect conditional requirements.
  : <conditional>@install-req
  ;
explicit install ;

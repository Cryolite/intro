project intro/mpc ;

import alias ;
import errors ;
import feature ;
import make ;
import path ;
import "$(INTRO_ROOT_DIR)/compilers"
  : is-gcc
    is-clang
    is-icc
    get-compiler-description
    get-full-prefix
    get-triplets
    get-cc
    get-cflags
    get-cxx
    get-cxxflags
    get-environment-commands
    get-logfile-path
    get-property-dump-commands
  ;


rule compiler-dep-req ( properties * )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  local result ;
  if [ is-gcc "$(compiler)" ] {
    result += "<source>../gcc//install" ;
  }
  else if [ is-clang "$(compiler)" ] {
    result += "<source>../gcc//install" ;
    result += "<source>../clang//install" ;
  }
  else if [ is-icc "$(compiler)" ] {
    result += "<source>../gcc//install" ;
    result += "<source>../icc//install" ;
  }
  else {
    errors.error "an internal error." ;
  }
  return $(result) ;
}

alias compiler-dep : : <conditional>@compiler-dep-req ;
explicit compiler-dep ;



for local version in $(MPC_VERSIONS) {
  make "$(INTRO_ROOT_DIR)/mpc-$(version).tar.gz" : : @download ;
  explicit "$(INTRO_ROOT_DIR)/mpc-$(version).tar.gz" ;
}

rule download ( targets * : sources * : properties * )
{
  local version = [ feature.get-values <mpc-hidden> : $(properties) ] ;
  VERSION on $(targets) = "$(version)" ;
  URLS on $(targets) = "'http://ftp.tsukuba.wide.ad.jp/software/mpc/mpc-$(version).tar.gz' \\
                        'http://www.multiprecision.org/mpc/download/mpc-$(version).tar.gz' \\
                        'http://ftp.dti.ad.jp/pub/lang/gcc/infrastructure/mpc-$(version).tar.gz'" ;
  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) : "$(STREAM)" : "/dev/null" ] ;
}
actions download
{
$(PROPERTY_DUMP_COMMANDS)

  rm -rf '$(<)' || exit 1

  for url in $(URLS) ; do
    if [ -n '$(STREAM)' ]; then
      ( cd '$(<:D)' && wget -- "$url" >> '$(STREAM)' 2>&1 )
    else
      ( cd '$(<:D)' && wget --quiet -- "$url" )
    fi
    if [ $? -eq 0 ]; then
      break
    fi
  done

  if [ ! -f '$(<)' ]; then
    echo    'ERROR: failed to download MPC $(VERSION) tarball.' 1>&2
    echo -n 'ERROR: failed to download MPC $(VERSION) tarball.' | $(AWACS)
    rm -rf '$(<)'
    exit 1
  fi

  exit 0
}



for local version in $(MPC_VERSIONS) {
  # Use `README' file as a target representing the completion of
  # decompression action. It is suitable for the purpose because of the
  # following reasons;
  #
  #   - The name of this file is considered stable even if the version
  #     changes.
  #   - This file won't be modified during the build procedure.
  #
  make "$(INTRO_ROOT_DIR)/mpc-$(version)/README"
    : "$(INTRO_ROOT_DIR)/mpc-$(version).tar.gz"
    : @expand
    ;
  explicit "$(INTRO_ROOT_DIR)/mpc-$(version)/README" ;
}

rule expand ( targets * : sources * : properties * )
{
  local version = [ feature.get-values <mpc-hidden> : $(properties) ] ;
  VERSION on $(targets) = "$(version)" ;
  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) : "$(STREAM)" : "/dev/null" ] ;
}
actions expand
{
$(PROPERTY_DUMP_COMMANDS)

  rm -rf '$(<:D)' || exit 1
  [ -f '$(>)' ] || exit 1
  if [ -n '$(STREAM)' ]; then
    tar xzvf '$(>)' --directory='$(INTRO_ROOT_DIR)' >> '$(STREAM)' 2>&1
  else
    tar xzf '$(>)' --directory='$(INTRO_ROOT_DIR)'
  fi
  if [ $? -ne 0 ]; then
    echo    'ERROR: failed to expand MPC $(VERSION) tarball.' 1>&2
    echo -n 'ERROR: failed to expand MPC $(VERSION) tarball.' | $(AWACS)
    rm -rf '$(<:D)'
    exit 1
  fi
  # If the timestamp of the tarball's contents is restored, the modification
  # time of the source directory could be older than the one of the tarball.
  # Such behavior is not desirable because the decompression always happens.
  # Therefore, `touch' is required.
  touch --no-create '$(<)'
  [ -f '$(<)' ] || exit 1
  exit 0
}



rule srcdir-req ( properties * )
{
  local version = [ feature.get-values <mpc-hidden> : $(properties) ] ;
  return "<source>$(INTRO_ROOT_DIR)/mpc-$(version)/README/$(DEFAULT_PROPERTIES)" ;
}

alias srcdir : : <conditional>@srcdir-req ;
explicit srcdir ;



rule location-conditional ( properties * )
{
  local full-prefix = [ get-full-prefix "$(PREFIX)" : $(properties) ] ;
  local includedir = "$(full-prefix)/include" ;
  return "<location>$(includedir)" ;
}

make mpc.h
  : compiler-dep
    ../gmp//install
    ../mpfr//install
    srcdir
  : @make-install
  : $(USE_COMPILER)
    $(USE_MULTITARGET)
    $(USE_GMP)
    $(USE_MPFR)
    $(USE_MPC)
    $(USE_ADDRESS_MODEL)
    $(USE_INSTRUCTION_SET)
    <conditional>@location-conditional
  ;
explicit mpc.h ;

rule make-install ( targets * : sources * : properties * )
{
  local compiler = [ feature.get-values <compiler> : $(properties) ] ;
  local compiler-description = [ get-compiler-description "$(compiler)" ] ;
  COMPILER_DESCRIPTION on $(targets) = "$(compiler-description)" ;

  local version = [ feature.get-values <mpc> : $(properties) ] ;
  VERSION on $(targets) = "$(version)" ;

  # Set the path to the source directory.
  local srcdir = "$(INTRO_ROOT_DIR)/mpc-$(version)" ;
  SRCDIR on $(targets) = [ path.native "$(srcdir)" ] ;

  # Set the path to objdir.
  local objdir = "$(INTRO_ROOT_DIR)/objdir" ;
  local objdir-native = [ path.native "$(objdir)" ] ;
  OBJDIR on $(targets) = "$(objdir-native)" ;

  OPTIONS on $(targets) = ;

  # Set `--prefix' option for `configure' script.
  local full-prefix = [ get-full-prefix "$(PREFIX)" : $(properties) ] ;
  local full-prefix-native = [ path.native "$(full-prefix)" ] ;
  OPTIONS on $(targets) += "--prefix='$(full-prefix-native)'" ;

  # Set `--build' and `--host' options for `configure' script.
  local triplets = [ get-triplets $(properties) ] ;
  local build-triplet = "$(triplets[1])" ;
  local host-triplet = "$(triplets[2])" ;
  BUILD_TRIPLET on $(targets) = "$(build-triplet)" ;
  HOST_TRIPLET on $(targets) = "$(host-triplet)" ;
  OPTIONS on $(targets) += "--build=$(build-triplet)" ;
  OPTIONS on $(targets) += "--host=$(host-triplet)" ;

  # Set the link variants for `configure' script.
  local link = [ feature.get-values <link> : $(properties) ] ;
  switch "$(link)" {
  case "shared" :
    OPTIONS on $(targets) += "--enable-shared" ;
    OPTIONS on $(targets) += "--disable-static" ;
  case "static" :
    OPTIONS on $(targets) += "--disable-shared" ;
    OPTIONS on $(targets) += "--enable-static" ;
    OPTIONS on $(targets) += "--without-pic" ;
  case "" :
    errors.error "the value for `<link>' is empty" ;
  case "*" :
    errors.error "<link>$(link): an unknown property" ;
  }

  # `--with-mpfr` option is necessary for MPC to detect the correct location
  # of MPFR, even if `CPATH`, `LIBRARY_PATH` and `LD_LIBRARY_PATH` include
  # the path to installed MPFR headers and libraries. This seems due to old
  # versions of `libtool`.
  OPTIONS on $(targets) += "--with-mpfr='$(full-prefix-native)'" ;

  # `--with-gmp` option is necessary for MPC to detect the correct location
  # of GMP, even if `CPATH`, `LIBRARY_PATH` and `LD_LIBRARY_PATH` include
  # the path to installed GMP headers and libraries. This seems due to old
  # versions of `libtool`.
  OPTIONS on $(targets) += "--with-gmp='$(full-prefix-native)'" ;

  local cc = [ get-cc "$(PREFIX)" : $(properties) ] ;
  local cc-native = [ path.native "$(cc)" ] ;
  OPTIONS on $(targets) += "CC='$(cc-native)'" ;

  local lto = [ feature.get-values <lto> : $(properties) ] ;

  # Default `CFLAGS' seems `-g -O2'.
  local cflags = [ get-cflags $(properties) ] ;
  if "$(cflags)" {
    #if "$(lto)" = "off" {
    #  cflags = "$(cflags) -g" ;
    #}
    #else if "$(lto)" = "on" {
    #  # Do nothing.
    #}
    #else {
    #  errors.error "an internal error." ;
    #}
    CFLAGS on $(targets) = "$(cflags)" ;
    OPTIONS on $(targets) += "CFLAGS='@$(objdir-native)/cflags'" ;
  }

  # `CXX' and `CXXFLAGS' are not used for MPFR build.
  local cxx = [ get-cxx "$(PREFIX)" : $(properties) ] ;
  local cxx-native = [ path.native "$(cxx)" ] ;
  OPTIONS on $(targets) += "CXX='$(cxx-native)'" ;

  local cxxflags = [ get-cxxflags $(properties) ] ;
  if "$(cxxflags)" {
    #if "$(lto)" = "off" {
    #  cxxflags = "$(cxxflags) -g" ;
    #}
    #else if "$(lto)" = "on" {
    #  # Do nothing.
    #}
    #else {
    #  errors.error "an internal error." ;
    #}
    CXXFLAGS on $(targets) = "$(cxxflags)" ;
    OPTIONS on $(targets) += "CXXFLAGS='@$(objdir-native)/cxxflags'" ;
  }

  local environment-commands = [ get-environment-commands "$(PREFIX)" : $(properties) ] ;
  ENVIRONMENT_COMMANDS on $(targets) = "$(environment-commands)" ;

  local logfile = [ get-logfile-path "mpc" : "$(PREFIX)" : $(properties) ] ;
  local logfile-native = [ path.native "$(logfile)" ] ;
  LOGFILE on $(targets) = "$(logfile-native)" ;

  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) : "$(STREAM)" : "$(logfile)" ] ;
}
actions make-install
{
  exit_with_error ()
  {
    echo "`LANG=C date`:ERROR: $1 (MPC $(VERSION), $(COMPILER_DESCRIPTION))" | tee -a '$(LOGFILE)' >> '$(STREAM)'
    echo -n "ERROR: $1 (MPC $(VERSION), $(COMPILER_DESCRIPTION))" | $(AWACS)
    exit 1
  }

  echo "`LANG=C date`:INFO: initiation of MPC build process" | tee '$(LOGFILE)' >> '$(STREAM)'

$(ENVIRONMENT_COMMANDS)

$(PROPERTY_DUMP_COMMANDS)

  [ -x '$(SRCDIR)/configure' ] || exit_with_error "\`$(SRCDIR)/configure' is not executable"
  [ -x '$(SRCDIR)/config.sub' ] || exit_with_error "\`$(SRCDIR)/config.sub' is not executable"
  [ `'$(SRCDIR)/config.sub' $(BUILD_TRIPLET)` = $(BUILD_TRIPLET) ] || exit_with_error "\`--build=$(BUILD_TRIPLET)' is not supported"
  [ `'$(SRCDIR)/config.sub' $(HOST_TRIPLET)` = $(HOST_TRIPLET) ] || exit_with_error "\`--host=$(HOST_TRIPLET)' is not supported"

  # Clean up objdir `$(OBJDIR)'.
  { mkdir -p '$(OBJDIR)' && ( cd '$(OBJDIR)' && rm -rf * ); } || exit_with_error 'failed to clean up the old objdir'

  echo "`LANG=C date`:INFO: @cflags: $(CFLAGS)" | tee -a '$(LOGFILE)' >> '$(STREAM)'
  echo "`LANG=C date`:INFO: @cxxflags: $(CXXFLAGS)" | tee -a '$(LOGFILE)' >> '$(STREAM)'
  ( cd '$(OBJDIR)' && echo -n '$(CFLAGS)' > cflags ) || exit_with_error 'failed to create @cflags'
  ( cd '$(OBJDIR)' && echo -n '$(CXXFLAGS)' > cxxflags ) || exit_with_error 'failed to create @cxxflags'

  echo "`LANG=C date`:COMMAND: ./configure $(OPTIONS:J= )" | tee -a '$(LOGFILE)' >> '$(STREAM)'
  tail --follow --lines=0 --sleep-interval=0.1 '$(LOGFILE)' >> '$(STREAM)' &
  ( cd '$(OBJDIR)' && '$(SRCDIR)/configure' $(OPTIONS) >> '$(LOGFILE)' 2>&1 )
  result=$?
  kill -TERM $!
  if [ $result -ne 0 ]; then
    exit_with_error "failed to \`configure'"
  fi

  # Check the creation of `Makefile'.
  [ -f '$(OBJDIR)/Makefile' ] || exit_with_error "failed to confirm the creation of \`Makefile'"

  echo "`LANG=C date`:COMMAND: make" | tee -a '$(LOGFILE)' >> '$(STREAM)'
  tail --follow --lines=0 --sleep-interval=0.1 '$(LOGFILE)' >> '$(STREAM)' &
  ( cd '$(OBJDIR)' && make --jobs=$(CONCURRENCY) >> '$(LOGFILE)' 2>&1 )
  result=$?
  kill -TERM $!
  if [ $result -ne 0 ]; then
    exit_with_error "failed to \`make'"
  fi

  echo "`LANG=C date`:COMMAND: make check" | tee -a '$(LOGFILE)' >> '$(STREAM)'
  tail --follow --lines=0 --sleep-interval=0.1 '$(LOGFILE)' >> '$(STREAM)' &
  ( cd '$(OBJDIR)' && make --jobs=$(CONCURRENCY) check >> '$(LOGFILE)' 2>&1 )
  result=$?
  kill -TERM $!
  if [ $result -ne 0 ]; then
    exit_with_error "failed to \`make check'"
  fi

  echo "`LANG=C date`:COMMAND: make install" | tee -a '$(LOGFILE)' >> '$(STREAM)'
  tail --follow --lines=0 --sleep-interval=0.1 '$(LOGFILE)' >> '$(STREAM)' &
  ( cd '$(OBJDIR)' && make install >> '$(LOGFILE)' 2>&1 )
  result=$?
  kill -TERM $!
  if [ $result -ne 0 ]; then
    exit_with_error "failed to \`make install'"
  fi

  # Clean up objdir `$(OBJDIR)'.
  rm -rf '$(OBJDIR)' || exit_with_error 'failed to clean up the objdir'

  [ -f '$(<)' ] || exit_with_error 'failed to confirm the creation of the build target'

  echo -n 'MPC $(VERSION) ($(COMPILER_DESCRIPTION)) was successfully built.' | $(AWACS)
  echo "`LANG=C date`:INFO: successful completion of MPC build process" | tee -a '$(LOGFILE)' >> '$(STREAM)'
  exit 0
}



alias install : mpc.h ;
explicit install ;

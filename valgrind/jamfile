project intro/valgrind ;

import alias ;
import errors ;
import feature ;
import make ;
import path ;
import "$(INTRO_ROOT_DIR)/compilers"
  : is-gcc
    is-clang
    is-icc
    get-compiler-description
    get-compiler-prefix
    get-default-bindir
    get-default-libdir
    get-default-includedir
    get-triplets
    get-cc
    get-cflags
    get-cxx
    get-cxxflags
    get-environment-commands
    get-property-dump-commands
  ;


rule compiler-dep-req ( properties * )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  local result ;
  if [ is-gcc "$(compiler)" ] {
    result += "<source>../gcc//install" ;
  }
  else if [ is-clang "$(compiler)" ] {
    result += "<source>../gcc//install" ;
    result += "<source>../clang//install" ;
  }
  else if [ is-icc "$(compiler)" ] {
    result += "<source>../gcc//install" ;
    result += "<source>../icc//install" ;
  }
  else {
    errors.error "an internal error." ;
  }
  return $(result) ;
}

alias compiler-dep : : <conditional>@compiler-dep-req ;
explicit compiler-dep ;



make "$(INTRO_ROOT_DIR)/valgrind-$(VALGRIND).tar.bz2" : : @download ;
explicit "$(INTRO_ROOT_DIR)/valgrind-$(VALGRIND).tar.bz2" ;

rule download ( targets * : sources * : properties * )
{
  local version = [ feature.get-values <valgrind-hidden> : $(properties) ] ;
  VERSION on $(targets) = "$(version)" ;
  URL on $(targets) = http://valgrind.org/downloads/valgrind-$(version).tar.bz2 ;
  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions download
{
  $(PROPERTY_DUMP_COMMANDS)

  rm -rf '$(<)' || exit 1
  if [ -n '$(STREAM)' ]; then
    ( cd '$(<:D)' && wget -- '$(URL)' >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(<:D)' && wget --quiet -- '$(URL)' )
  fi
  if [ $? -ne 0 ]; then
    echo    'ERROR: failed to download Valgrind $(VERSION) tarball.' 1>&2
    echo -n 'ERROR: failed to download Valgrind $(VERSION) tarball.' | $(AWACS)
    rm -rf '$(<)'
    exit 1
  fi
  [ -f '$(<)' ] || exit 1
  exit 0
}



if "$(VALGRIND)" != "trunk" {
  # Use `README' file as a target representing the completion of
  # decompression action. It is suitable for the purpose because of the
  # following reasons;
  #
  #   - The name of this file is considered stable even if the version
  #     changes.
  #   - This file won't be modified during the build procedure.
  #
  make "$(INTRO_ROOT_DIR)/valgrind-$(VALGRIND)/README"
    : "$(INTRO_ROOT_DIR)/valgrind-$(VALGRIND).tar.bz2"
    : @expand
    ;
  explicit "$(INTRO_ROOT_DIR)/valgrind-$(VALGRIND)/README" ;
}

rule expand ( targets * : sources * : properties * )
{
  local version = [ feature.get-values <valgrind-hidden> : $(properties) ] ;
  VERSION on $(targets) = "$(version)" ;
  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions expand
{
  $(PROPERTY_DUMP_COMMANDS)

  rm -rf '$(<:D)' || exit 1
  [ -f '$(>)' ] || exit 1
  if [ -n '$(STREAM)' ]; then
    tar xjvf '$(>)' --directory='$(INTRO_ROOT_DIR)' >> '$(STREAM)' 2>&1
  else
    tar xjf '$(>)' --directory='$(INTRO_ROOT_DIR)'
  fi
  if [ $? -ne 0 ]; then
    echo    'ERROR: failed to expand Valgrind $(VERSION) tarball.' 1>&2
    echo -n 'ERROR: failed to expand Valgrind $(VERSION) tarball.' | $(AWACS)
    rm -rf '$(<:D)'
    exit 1
  fi
  # If the timestamp of the tarball's contents is restored, the modification
  # time of the source directory could be older than the one of the tarball.
  # Such behavior is not desirable because the decompression always happens.
  # Therefore, `touch' is required.
  touch --no-create '$(<)'
  [ -f '$(<)' ] || exit 1
  exit 0
}



if "$(VALGRIND)" = "trunk" {
  make "$(INTRO_ROOT_DIR)/valgrind-trunk/README"
    : # no source
    : @checkout-trunk
    ;
  explicit "$(INTRO_ROOT_DIR)/valgrind-trunk/README" ;
  always "$(INTRO_ROOT_DIR)/valgrind-trunk/README" ;
}

rule checkout-trunk ( targets * : sources * : properties * )
{
  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions checkout-trunk
{
  $(PROPERTY_DUMP_COMMANDS)

  if [ ! -f '$(INTRO_ROOT_DIR)/valgrind-trunk/README' ]; then
    if [ -n '$(STREAM)' ]; then
      ( cd '$(INTRO_ROOT_DIR)' && svn checkout svn://svn.valgrind.org/valgrind/trunk valgrind-trunk >> '$(STREAM)' 2>&1 )
    else
      ( cd '$(INTRO_ROOT_DIR)' && svn checkout svn://svn.valgrind.org/valgrind/trunk valgrind-trunk )
    fi
    if [ $? -ne 0 ]; then
      ( cd '$(INTRO_ROOT_DIR)' && rm -rf valgrind-trunk )
      echo    "ERROR: failed to \`svn checkout' Valgrind repository." 1>&2
      echo -n "ERROR: failed to \`svn checkout' Valgrind repository." | $(AWACS)
      exit 1
    fi
    [ -f '$(INTRO_ROOT_DIR)/valgrind-trunk/README' ] || exit 1
  fi

  if [ -n '$(STREAM)' ]; then
    ( cd '$(INTRO_ROOT_DIR)/valgrind-trunk' && svn update >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(INTRO_ROOT_DIR)/valgrind-trunk' && svn update )
  fi
  if [ $? -ne 0 ]; then
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf valgrind-trunk )
    echo    "ERROR: failed to \`svn update' Valgrind repository." 1>&2
    echo -n "ERROR: failed to \`svn update' Valgrind repository." | $(AWACS)
    exit 1
  fi

  if [ -n '$(STREAM)' ]; then
    ( cd '$(INTRO_ROOT_DIR)/valgrind-trunk' && ./autogen.sh >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(INTRO_ROOT_DIR)/valgrind-trunk' && ./autogen.sh )
  fi
  if [ $? -ne 0 ]; then
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf valgrind-trunk )
    echo    "ERROR: failed to \`autogen.sh' Valgrind repository." 1>&2
    echo -n "ERROR: failed to \`autogen.sh' Valgrind repository." | $(AWACS)
    exit 1
  fi

  [ -f '$(<)' ] || exit 1

  exit 0
}



rule srcdir-req ( properties * )
{
  local version = [ feature.get-values <valgrind-hidden> : $(properties) ] ;
  return "<source>$(INTRO_ROOT_DIR)/valgrind-$(version)/README/$(DEFAULT_PROPERTIES)" ;
}

alias srcdir : : <conditional>@srcdir-req ;
explicit srcdir ;



rule location-conditional ( properties * )
{
  local includedir = [ get-default-includedir "$(PREFIX)" : $(properties) ] ;
  return "<location>$(includedir)" ;
}

make valgrind/valgrind.h
  : compiler-dep
    ../openmpi//install
    srcdir
  : @make-install
  : $(USE_COMPILER)
    $(USE_MULTITARGET)
    $(USE_MPI_BACKEND)
    $(USE_OPENMPI)
    $(USE_VALGRIND)
    $(USE_ADDRESS_MODEL)
    $(USE_INSTRUCTION_SET)
    <conditional>@location-conditional
  ;
explicit valgrind/valgrind.h ;

rule make-install ( targets * : sources * : properties * )
{
  local compiler = [ feature.get-values <compiler> : $(properties) ] ;
  local compiler-description = [ get-compiler-description "$(compiler)" ] ;
  COMPILER_DESCRIPTION on $(targets) = "$(compiler-description)" ;

  local version = [ feature.get-values <valgrind> : $(properties) ] ;
  VERSION on $(targets) = "$(version)" ;

  # Set the path to the source directory.
  local srcdir = "$(INTRO_ROOT_DIR)/valgrind-$(version)" ;
  SRCDIR on $(targets) = [ path.native "$(srcdir)" ] ;

  local objdir = "$(INTRO_ROOT_DIR)/objdir" ;
  OBJDIR on $(targets) = [ path.native "$(objdir)" ] ;

  OPTIONS on $(targets) = ;

  # Set `--prefix' option for `configure' script.
  local compiler-prefix = [ get-compiler-prefix "$(PREFIX)" : $(properties) ] ;
  local compiler-prefix-native = [ path.native "$(compiler-prefix)" ] ;
  OPTIONS on $(targets) += "--prefix='$(compiler-prefix-native)'" ;

  # Set `--bindir' option for `configure' script.
  local bindir = [ get-default-bindir "$(PREFIX)" : $(properties) ] ;
  local bindir-native = [ path.native "$(bindir)" ] ;
  OPTIONS on $(targets) += "--bindir='$(bindir-native)'" ;

  # Set `--libdir' option for `configure' script.
  local libdir = [ get-default-libdir "$(PREFIX)" : $(properties) ] ;
  local libdir-native = [ path.native "$(libdir)" ] ;
  OPTIONS on $(targets) += "--libdir='$(libdir-native)'" ;

  # Set `--includedir' option for `configure' script.
  local includedir = [ get-default-includedir "$(PREFIX)" : $(properties) ] ;
  local includedir-native = [ path.native "$(includedir)" ] ;
  OPTIONS on $(targets) += "--includedir='$(includedir-native)'" ;

  local triplets = [ get-triplets $(properties) ] ;
  local build-triplet = "$(triplets[1])" ;
  local host-triplet = "$(triplets[2])" ;
  BUILD_TRIPLET on $(targets) = "$(build-triplet)" ;
  HOST_TRIPLET on $(targets) = "$(host-triplet)" ;

  # Set `--build' and `--host' options for `configure' script.
  OPTIONS on $(targets) += "--build=$(build-triplet)" ;
  OPTIONS on $(targets) += "--host=$(host-triplet)" ;

  OPTIONS on $(targets) += "--enable-tls" ;

  OPTIONS on $(targets) += "--with-mpicc='$(compiler-prefix-native)/bin/mpicc'" ;

  local cc = [ get-cc "$(PREFIX)" : $(properties) ] ;
  local cc-native = [ path.native "$(cc)" ] ;
  OPTIONS on $(targets) += "CC='$(cc-native)'" ;

  #local cflags = [ get-cflags $(properties) ] ;
  #if "$(cflags)" {
  #  OPTIONS on $(targets) += "CFLAGS='$(cflags)'" ;
  #}

  local cxx = [ get-cxx "$(PREFIX)" : $(properties) ] ;
  local cxx-native = [ path.native "$(cxx)" ] ;
  OPTIONS on $(targets) += "CXX='$(cxx-native)'" ;

  #local cxxflags = [ get-cxxflags $(properties) ] ;
  #if "$(cxxflags)" {
  #  OPTIONS on $(targets) += "CXXFLAGS='$(cxxflags)'" ;
  #}

  local environment-commands = [ get-environment-commands "$(PREFIX)" : $(properties) ] ;
  ENVIRONMENT_COMMANDS on $(targets) = "$(environment-commands)" ;

  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions make-install
{
  $(PROPERTY_DUMP_COMMANDS)

  # Clean up objdir `$(OBJDIR)'.
  { mkdir -p '$(OBJDIR)' && ( cd '$(OBJDIR)' && rm -rf * ); } || exit 1

  # Valgrind sources should compile in the `SRCDIR', not `OBJDIR' that is
  # different from `SRCDIR'. So, let's first copy all the contents of
  # `SRCDIR' to `OBJDIR'.
  cp -rT '$(SRCDIR)' '$(OBJDIR)' || exit 1

  [ -x '$(OBJDIR)/configure' ] || exit 1
  [ -x '$(OBJDIR)/config.sub' ] || exit 1
  [ `'$(OBJDIR)/config.sub' $(BUILD_TRIPLET)` = $(BUILD_TRIPLET) ] || exit 1
  [ `'$(OBJDIR)/config.sub' $(HOST_TRIPLET)` = $(HOST_TRIPLET) ] || exit 1

  $(ENVIRONMENT_COMMANDS)

  if [ -n '$(STREAM)' ]; then
    ( cd '$(OBJDIR)' && ./configure $(OPTIONS) >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(OBJDIR)' && ./configure $(OPTIONS) )
  fi
  if [ $? -ne 0 ]; then
    echo    "ERROR: failed to \`configure' Valgrind $(VERSION) ($(COMPILER_DESCRIPTION))." 1>&2
    echo -n "ERROR: failed to \`configure' Valgrind $(VERSION) ($(COMPILER_DESCRIPTION))." | $(AWACS)
    exit 1
  fi

  # Check the creation of `Makefile'.
  [ -f '$(OBJDIR)/Makefile' ] || exit 1

  if [ -n '$(STREAM)' ]; then
    ( cd '$(OBJDIR)' && make --jobs=$(CONCURRENCY) >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(OBJDIR)' && make --jobs=$(CONCURRENCY) )
  fi
  if [ $? -ne 0 ]; then
    echo    "ERROR: failed to \`make' Valgrind $(VERSION) ($(COMPILER_DESCRIPTION))." 1>&2
    echo -n "ERROR: failed to \`make' Valgrind $(VERSION) ($(COMPILER_DESCRIPTION))." | $(AWACS)
    exit 1
  fi

  if [ -n '$(STREAM)' ]; then
    ( cd '$(OBJDIR)' && make --jobs=$(CONCURRENCY) check >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(OBJDIR)' && make --jobs=$(CONCURRENCY) check )
  fi
  if [ $? -ne 0 ]; then
    echo    "ERROR: failed to \`make check' Valgrind $(VERSION) ($(COMPILER_DESCRIPTION))." 1>&2
    echo -n "ERROR: failed to \`make check' Valgrind $(VERSION) ($(COMPILER_DESCRIPTION))." | $(AWACS)
    exit 1
  fi

  if [ -n '$(STREAM)' ]; then
    ( cd '$(OBJDIR)' && make install >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(OBJDIR)' && make install )
  fi
  if [ $? -ne 0 ]; then
    echo    "ERROR: failed to \`make install' Valgrind $(VERSION) ($(COMPILER_DESCRIPTION))." 1>&2
    echo -n "ERROR: failed to \`make install' Valgrind $(VERSION) ($(COMPILER_DESCRIPTION))." | $(AWACS)
    exit 1
  fi

  if [ -n '$(STREAM)' ]; then
    # Some tests might deadlock with GCC 4.8. Forces the deadlocked tests to be killed by `ulimit'.
    ( cd '$(OBJDIR)' && ulimit -t 60 && ulimit -m 2097152 && make --jobs=$(CONCURRENCY) regtest 2>&1 | tee regtest.log >> '$(STREAM)' 2>&1 )
  else
    # Some tests might deadlock with GCC 4.8. Forces the deadlocked tests to be killed by `ulimit'.
    ( cd '$(OBJDIR)' && ulimit -t 60 && ulimit -m 2097152 && make --jobs=$(CONCURRENCY) regtest 2>&1 | tee regtest.log )
  fi
  # `make regtest' usually fails, so they are treated as just information.
  echo -n "INFO:\`make regtest':" `grep -Eo "^==.*==$" "$(OBJDIR)/regtest.log"` | $(AWACS)

  # Clean up objdir `$(OBJDIR)'.
  rm -rf '$(OBJDIR)' || exit 1

  [ -f '$(<)' ] || exit 1

  echo -n 'Valgrind $(VERSION) ($(COMPILER_DESCRIPTION)) was successfully built.' | $(AWACS)
  exit 0
}



alias install : "valgrind/valgrind.h/$(DEFAULT_COMPILER_PROPERTIES)" ;
explicit install ;

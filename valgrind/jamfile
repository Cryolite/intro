project intro/valgrind ;

import alias ;
import errors ;
import feature ;
import make ;
import path ;
import regex ;
import "$(INTRO_ROOT_DIR)/compilers"
  : is-gcc
    is-clang
    is-icc
    get-compiler-prefix
    get-triplets
    get-cc
    get-cxx
    get-environment-commands
    get-property-dump-commands
  ;

.here = [ regex.match "Jamfile<(.*)>" : "$(__name__)" : 1 ] ;
.here = [ path.make "$(.here)" ] ;
.here-relative = [ path.relative "$(.here)" "$(INTRO_ROOT_DIR)" ] ;


rule compiler-dep-req ( properties * )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  local result ;
  if [ is-gcc "$(compiler)" ] {
    result += "<source>../gcc//install" ;
  }
  else if [ is-clang "$(compiler)" ] {
    result += "<source>../gcc//install" ;
    result += "<source>../clang//install" ;
  }
  else if [ is-icc "$(compiler)" ] {
    result += "<source>../gcc//install" ;
    result += "<source>../icc//install" ;
  }
  else {
    errors.error "an internal error." ;
  }
  return $(result) ;
}

alias compiler-dep : : <conditional>@compiler-dep-req ;
explicit compiler-dep ;


make "$(INTRO_ROOT_DIR)/valgrind-$(VALGRIND).tar.bz2" : : @download ;
explicit "$(INTRO_ROOT_DIR)/valgrind-$(VALGRIND).tar.bz2" ;

rule download ( targets * : sources * : properties * )
{
  HERE on $(targets) = [ path.native "$(.here)" ] ;
  HERE_RELATIVE on $(targets) = [ path.native "$(.here-relative)" ] ;
  local version = [ feature.get-values <valgrind-hidden> : $(properties) ] ;
  URL on $(targets) = http://valgrind.org/downloads/valgrind-$(version).tar.bz2 ;
  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions download
{
  bash -s << 'EOS'
  exec >> '$(STDOUT_)' 2>> '$(STDERR_)'
$(PROPERTY_DUMP_COMMANDS)
  LINENO_ADJ=`grep -Fn 13f39dab-dea3-401a-9cb3-bec2b13b48d7 '$(HERE)/jamfile' | grep -Eo '^[[:digit:]]+'`
  LINENO_ADJ=`expr $LINENO_ADJ - $LINENO + 1`
  PS4='+$(HERE_RELATIVE)/jamfile:`expr $LINENO + $LINENO_ADJ`: '
  set -ex
  rm -f '$(<)'
  trap "rm -f '$(<)'" ERR HUP INT QUIT TERM
  ( cd '$(<:D)' && wget -- '$(URL)' )
  [ -f '$(<)' ]
EOS
}


if "$(VALGRIND)" != "trunk" {
  # Use `README' file as a target representing the completion of
  # decompression action. It is suitable for the purpose because of the
  # following reasons;
  #
  #   - The name of this file is considered stable even if the version
  #     changes.
  #   - This file won't be modified during the build procedure.
  #
  make "$(INTRO_ROOT_DIR)/valgrind-$(VALGRIND)/README"
    : "$(INTRO_ROOT_DIR)/valgrind-$(VALGRIND).tar.bz2"
    : @expand
    ;
  explicit "$(INTRO_ROOT_DIR)/valgrind-$(VALGRIND)/README" ;
}

rule expand ( targets * : sources * : properties * )
{
  HERE on $(targets) = [ path.native "$(.here)" ] ;
  HERE_RELATIVE on $(targets) = [ path.native "$(.here-relative)" ] ;
  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions expand
{
  bash -s << 'EOS'
  exec >> '$(STDOUT_)' 2>> '$(STDERR_)'
$(PROPERTY_DUMP_COMMANDS)
  LINENO_ADJ=`grep -Fn a37090d7-4f37-4068-b88f-4db88c6806be '$(HERE)/jamfile' | grep -Eo '^[[:digit:]]+'`
  LINENO_ADJ=`expr $LINENO_ADJ - $LINENO + 1`
  PS4='+$(HERE_RELATIVE)/jamfile:`expr $LINENO + $LINENO_ADJ`: '
  set -ex
  rm -rf '$(<:D)'
  [ -f '$(>)' ]
  trap "rm -rf '$(>)' '$(<:D)'" ERR HUP INT QUIT TERM
  tar xjvf '$(>)' -C '$(INTRO_ROOT_DIR)'
  # If the timestamp of the tarball's contents is restored, the modification
  # time of the source directory could be older than the one of the tarball.
  # Such behavior is not desirable because the decompression always happens.
  # Therefore, `touch' is required.
  touch --no-create '$(<)'
  [ -f '$(<)' ]
EOS
}


if "$(VALGRIND)" = "trunk" {
  make "$(INTRO_ROOT_DIR)/valgrind-trunk/README"
    : # no source
    : @checkout-trunk
    ;
  explicit "$(INTRO_ROOT_DIR)/valgrind-trunk/README" ;
  always "$(INTRO_ROOT_DIR)/valgrind-trunk/README" ;
}

rule checkout-trunk ( targets * : sources * : properties * )
{
  HERE on $(targets) = [ path.native "$(.here)" ] ;
  HERE_RELATIVE on $(targets) = [ path.native "$(.here-relative)" ] ;
  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions checkout-trunk
{
  bash -s << 'EOS'
  exec >> '$(STDOUT_)' 2>> '$(STDERR_)'
$(PROPERTY_DUMP_COMMANDS)
  LINENO_ADJ=`grep -Fn 326bcabc-3331-49c6-b4e8-d7c5398b93cc '$(HERE)/jamfile' | grep -Eo '^[[:digit:]]+'`
  LINENO_ADJ=`expr $LINENO_ADJ - $LINENO + 1`
  PS4='+$(HERE_RELATIVE)/jamfile:`expr $LINENO + $LINENO_ADJ`: '
  set -ex

  # Checks whether Valgrind repository has been cloned into
  # `(INTRO_ROOT_DIR)/valgrind-trunk`. Note that
  # `[ ! -d '(INTRO_ROOT_DIR)/valgrind-trunk' ]` cannot be used because
  # `bjam` might automatically create `(INTRO_ROOT_DIR)/valgrind-trunk`
  # directory.
  if [ ! -e '$(INTRO_ROOT_DIR)/valgrind-trunk/README' ]; then
    rm -rf '$(INTRO_ROOT_DIR)/valgrind-trunk'
  fi

  cleanup ()
  {
    ( cd '$(INTRO_ROOT_DIR)' && rm -rf valgrind-trunk )
  }
  trap cleanup ERR HUP INT QUIT TERM

  svn_clean ()
  {
    [ $# -eq 1 ] || exit 1
    [ -d "$1" ] || exit 1
    if cd "$1" && svn status | grep -E '^?'; then
      ( cd "$1" && svn status | grep -E '^?' | cut -c9- | xargs -d '\n' rm -r )
    fi
  }

  # Checks whether Valgrind repository has been cloned into
  # `(INTRO_ROOT_DIR)/valgrind-trunk`. Note that
  # `[ ! -d '(INTRO_ROOT_DIR)/valgrind-trunk' ]` cannot be used because
  # `bjam` might automatically create `(INTRO_ROOT_DIR)/valgrind-trunk`
  # directory.
  if [ ! -e '$(INTRO_ROOT_DIR)/valgrind-trunk/README' ]; then
    ( cd '$(INTRO_ROOT_DIR)' && svn checkout 'svn://svn.valgrind.org/valgrind/trunk' valgrind-trunk )
    svn_clean '$(INTRO_ROOT_DIR)/valgrind-trunk'
  else
    svn_clean '$(INTRO_ROOT_DIR)/valgrind-trunk'
    ( cd '$(INTRO_ROOT_DIR)/valgrind-trunk' && svn update )
  fi
  [ -f '$(INTRO_ROOT_DIR)/valgrind-trunk/README' ]

  ( cd '$(INTRO_ROOT_DIR)/valgrind-trunk' && ./autogen.sh )

  [ -f '$(<)' ]
EOS
}


rule srcdir-req ( properties * )
{
  local version = [ feature.get-values <valgrind-hidden> : $(properties) ] ;
  return "<source>$(INTRO_ROOT_DIR)/valgrind-$(version)/README/$(DEFAULT_PROPERTIES)" ;
}

alias srcdir : : <conditional>@srcdir-req ;
explicit srcdir ;


rule location-conditional ( properties * )
{
  local compiler-prefix = [ get-compiler-prefix "$(PREFIX)" : $(properties) ] ;
  return "<location>$(compiler-prefix)/include" ;
}

make valgrind/valgrind.h
  : compiler-dep
    ../openmpi//install
    srcdir
  : @make-install
  : $(USE_COMPILER)
    $(USE_MULTITARGET)
    $(USE_MPI_BACKEND)
    $(USE_OPENMPI)
    $(USE_VALGRIND)
    <conditional>@location-conditional
  ;
explicit valgrind/valgrind.h ;

rule make-install ( targets * : sources * : properties * )
{
  HERE on $(targets) = [ path.native "$(.here)" ] ;
  HERE_RELATIVE on $(targets) = [ path.native "$(.here-relative)" ] ;

  # Sets the path to the source directory.
  local version = [ feature.get-values <valgrind> : $(properties) ] ;
  local srcdir = "$(INTRO_ROOT_DIR)/valgrind-$(version)" ;
  SRCDIR on $(targets) = [ path.native "$(srcdir)" ] ;

  # Sets the path to `objdir`.
  local objdir = "$(INTRO_ROOT_DIR)/objdir" ;
  local objdir-native = [ path.native "$(objdir)" ] ;
  OBJDIR on $(targets) = "$(objdir-native)" ;

  OPTIONS on $(targets) = ;

  # Sets `--prefix' option for `configure' script.
  local compiler-prefix = [ get-compiler-prefix "$(PREFIX)" : $(properties) ] ;
  local compiler-prefix-native = [ path.native "$(compiler-prefix)" ] ;
  OPTIONS on $(targets) += "--prefix='$(compiler-prefix-native)'" ;

  # Sets `--build' and `--host' options for `configure' script.
  local triplets = [ get-triplets $(properties) ] ;
  local build-triplet = "$(triplets[1])" ;
  local host-triplet = "$(triplets[2])" ;
  BUILD_TRIPLET on $(targets) = "$(build-triplet)" ;
  HOST_TRIPLET on $(targets) = "$(host-triplet)" ;

  OPTIONS on $(targets) += "--build=$(build-triplet)" ;
  OPTIONS on $(targets) += "--host=$(host-triplet)" ;

  OPTIONS on $(targets) += "--enable-tls" ;

  local address-model = [ feature.get-values <address-model> : $(properties) ] ;
  OPTIONS on $(targets) += "--with-mpicc='$(compiler-prefix-native)/address-model-$(address-model)/bin/mpicc'" ;

  local cc = [ get-cc "$(PREFIX)" : $(properties) ] ;
  local cc-native = [ path.native "$(cc)" ] ;
  OPTIONS on $(targets) += "CC='$(cc-native)'" ;

  local cxx = [ get-cxx "$(PREFIX)" : $(properties) ] ;
  local cxx-native = [ path.native "$(cxx)" ] ;
  OPTIONS on $(targets) += "CXX='$(cxx-native)'" ;

  local environment-commands = [ get-environment-commands "$(PREFIX)" : $(properties) ] ;
  ENVIRONMENT_COMMANDS on $(targets) = "$(environment-commands)" ;

  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions make-install
{
  bash -s << 'EOS'
  exec >> '$(STDOUT_)' 2>> '$(STDERR_)'
$(ENVIRONMENT_COMMANDS)
$(PROPERTY_DUMP_COMMANDS)
  LINENO_ADJ=`grep -Fn a3a42b9d-b386-411f-a19b-b86cb8e994c2 '$(HERE)/jamfile' | grep -Eo '^[[:digit:]]+'`
  LINENO_ADJ=`expr $LINENO_ADJ - $LINENO + 1`
  PS4='+$(HERE_RELATIVE)/jamfile:`expr $LINENO + $LINENO_ADJ`: '
  set -ex

  rm -rf '$(OBJDIR)'

  cleanup ()
  {
    if [ -d '$(OBJDIR)' ]; then
      mv -n '$(OBJDIR)' "$(INTRO_ROOT_DIR)/objdir_$$"
    fi
  }
  trap cleanup ERR HUP INT QUIT TERM

  # Valgrind sources should compile in the `SRCDIR', not `OBJDIR' that is
  # different from `SRCDIR'. So, let's first copy all the contents of
  # `SRCDIR' to `OBJDIR'.
  cp -rnT '$(SRCDIR)' '$(OBJDIR)'

  [ -x '$(OBJDIR)/configure' ]
  [ -x '$(OBJDIR)/config.sub' ]
  [ `'$(OBJDIR)/config.sub' $(BUILD_TRIPLET)` = $(BUILD_TRIPLET) ]
  [ `'$(OBJDIR)/config.sub' $(HOST_TRIPLET)` = $(HOST_TRIPLET) ]

  ( cd '$(OBJDIR)' && ./configure $(OPTIONS) )

  # Checks the creation of `Makefile`.
  [ -f '$(OBJDIR)/Makefile' ]

  ( cd '$(OBJDIR)' && make --jobs=$(CONCURRENCY) )

  ( cd '$(OBJDIR)' && make --jobs=$(CONCURRENCY) check )

  ( cd '$(OBJDIR)' && make install )

  # Some tests might deadlock with GCC 4.8. Forces the deadlocked tests to be killed by `ulimit'.
  ( cd '$(OBJDIR)' && ulimit -S -t 60 && ulimit -S -m 2097152 && make --jobs=$(CONCURRENCY) regtest ) || true

  # Cleans up `objdir`.
  rm -r '$(OBJDIR)'

  [ -f '$(<)' ]
EOS
}


alias install : "valgrind/valgrind.h/$(DEFAULT_COMPILER_PROPERTIES)" ;
explicit install ;

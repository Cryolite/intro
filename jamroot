import errors ;
import feature : feature ;
import modules ;
import option ;
import regex ;

path-constant INTRO_ROOT_DIR : . ;


local binutils-latest ;
local gmp-latest ;
local mpfr-latest ;
local mpc-latest ;


local triplet = [ option.get triplet ] ;
if ! $(triplet)
{
  errors.error "ERROR: '--triplet' option not specified." ;
}
constant TRIPLET : $(triplet) ;
ECHO triplet... $(triplet) ;


local prefix = [ option.get prefix ] ;
if ! $(prefix)
{
  errors.error "ERROR: '--prefix' option not specified." ;
}
path-constant PREFIX : "$(prefix)" ;
ECHO prefix... $(prefix) ;


local binutils-for-gcc = [ option.get with-binutils-for-gcc : latest : ] ;
if ! $(binutils-for-gcc) || $(binutils-for-gcc) = latest
{
  ECHO "Extracting binutils latest version, patience..." ;
  binutils-latest = [ SHELL "\"$(INTRO_ROOT_DIR)/binutils-latest.sh\" || echo -n ERROR" ] ;
  if [ regex.match "^([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)$" : $(binutils-latest) : 1 ] {
    ECHO $(binutils-latest) ;
    binutils-for-gcc = $(binutils-latest) ;
  }
  else {
    errors.error "failed to extract binutils latest version." ;
  }
}
if ! $(binutils-for-gcc)
{
  errors.error "an internal error." ;
}
ECHO "BINUTILS_FOR_GCC... $(binutils-for-gcc)" ;
constant BINUTILS_FOR_GCC : $(binutils-for-gcc) ;


local gmp-for-gcc = [ option.get with-gmp-for-gcc : latest : ] ;
if ! $(gmp-for-gcc) || $(gmp-for-gcc) = latest
{
  ECHO "Extracting GMP latest version, patience..." ;
  gmp-latest = [ SHELL "\"$(INTRO_ROOT_DIR)/gmp-latest.sh\" || echo -n ERROR" ] ;
  if [ regex.match "^([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)$" : $(gmp-latest) : 1 ] {
    ECHO $(gmp-latest) ;
    gmp-for-gcc = $(gmp-latest) ;
  }
  else {
    errors.error "failed to extract GMP latest version." ;
  }
}
if ! $(gmp-for-gcc)
{
  errors.error "an internal error." ;
}
ECHO "GMP_FOR_GCC... $(gmp-for-gcc)" ;
constant GMP_FOR_GCC : $(gmp-for-gcc) ;


local mpfr-for-gcc = [ option.get with-mpfr-for-gcc : 3.0.1 : ] ;
if ! $(mpfr-for-gcc) || $(mpfr-for-gcc) = latest
{
  ECHO "Extracting MPFR latest version, patience..." ;
  mpfr-latest = [ SHELL "\"$(INTRO_ROOT_DIR)/mpfr-latest.sh\" || echo -n ERROR" ] ;
  if [ regex.match "^([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)$" : $(mpfr-latest) : 1 ] {
    ECHO $(mpfr-latest) ;
    mpfr-for-gcc = $(mpfr-latest) ;
  }
  else {
    errors.error "failed to extract MPFR latest version." ;
  }
}
if ! $(mpfr-for-gcc)
{
  errors.error "an internal error." ;
}
ECHO "MPFR_FOR_GCC... $(mpfr-for-gcc)" ;
constant MPFR_FOR_GCC : $(mpfr-for-gcc) ;


local mpc-for-gcc = [ option.get with-mpc-for-gcc : latest : ] ;
if ! $(mpc-for-gcc) || $(mpc-for-gcc) = latest
{
  ECHO "Extracting MPC latest version, patience..." ;
  mpc-latest = [ SHELL "\"$(INTRO_ROOT_DIR)/mpc-latest.sh\" || echo -n ERROR" ] ;
  if [ regex.match "^([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)$" : $(mpc-latest) : 1 ] {
    ECHO $(mpc-latest) ;
    mpc-for-gcc = $(mpc-latest) ;
  }
  else {
    errors.error "failed to extract MPC latest version." ;
  }
}
if ! $(mpc-for-gcc)
{
  errors.error "an internal error." ;
}
ECHO "MPC_FOR_GCC... $(mpc-for-gcc)" ;
constant MPC_FOR_GCC : $(mpc-for-gcc) ;


local ppl-for-gcc = [ option.get with-ppl-for-gcc : latest : ] ;
if ! $(ppl-for-gcc) || $(ppl-for-gcc) = latest
{
  ECHO "Extracting PPL latest version, patience..." ;
  ppl-latest = [ SHELL "\"$(INTRO_ROOT_DIR)/ppl-latest.sh\" || echo -n ERROR" ] ;
  if [ regex.match "^([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)$" : $(ppl-latest) : 1 ] {
    ECHO $(ppl-latest) ;
    ppl-for-gcc = $(ppl-latest) ;
  }
  else {
    errors.error "failed to extract PPL latest version." ;
  }
}
if ! $(ppl-for-gcc)
{
  errors.error "an internal error." ;
}
ECHO "PPL_FOR_GCC... $(ppl-for-gcc)" ;
constant PPL_FOR_GCC : $(ppl-for-gcc) ;


local cloog-for-gcc = [ option.get with-cloog-for-gcc : latest : ] ;
if ! $(cloog-for-gcc) || $(cloog-for-gcc) = latest
{
  ECHO "Extracting CLooG latest version, patience..." ;
  cloog-latest = [ SHELL "\"$(INTRO_ROOT_DIR)/cloog-latest.sh\" || echo -n ERROR" ] ;
  if [ regex.match "^([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)$" : $(cloog-latest) : 1 ] {
    ECHO $(cloog-latest) ;
    cloog-for-gcc = $(cloog-latest) ;
  }
  else {
    errors.error "failed to extract CLooG latest version." ;
  }
}
if ! $(cloog-for-gcc)
{
  errors.error "an internal error." ;
}
ECHO "CLOOG_FOR_GCC... $(cloog-for-gcc)" ;
constant CLOOG_FOR_GCC : $(cloog-for-gcc) ;


local gcc-versions = [ option.get enable-gcc-versions : : INUMIMI ] ;
if ! $(gcc-versions)
{
  errors.error "ERROR: `--enable-gcc-versions' is not specified" ;
}
if $(gcc-versions) = INUMIMI
{
  errors.error "ERROR: No value is specified for `--enable-gcc-versions'." ;
}
local gcc-release-versions = ;
local gcc-snapshot-versions = ;
{
  local gcc-release-aliases = [ SHELL "\"$(INTRO_ROOT_DIR)/gcc-release-aliases.sh\" || echo -n error" ] ;
  gcc-release-aliases = [ regex.split "$(gcc-release-aliases)" " +" ] ;
  local gcc-snapshot-aliases = [ SHELL "\"$(INTRO_ROOT_DIR)/gcc-snapshot-aliases.sh\" || echo -n error" ] ;
  gcc-snapshot-aliases = [ regex.split "$(gcc-snapshot-aliases)" " +" ] ;
  for local gcc-version in [ regex.split "$(gcc-versions)" "," ]
  {
    if $(gcc-version) in current previous oldest
    {
      local tmp = ;
      for local gcc-release-alias in $(gcc-release-aliases)
      {
        local kv = [ regex.split $(gcc-release-alias) "," ] ;
        if $(kv[1]) = $(gcc-version)
        {
          if ! $(tmp)
          {
            tmp = $(kv[2]) ;
          }
          else
          {
            errors.error "ERROR: A logic error." ;
          }
        }
      }
      if ! $(tmp)
      {
        errors.error "ERROR: A logic error." ;
      }
      if ! $(tmp) in $(gcc-release-versions)
      {
        ECHO "gcc version... $(gcc-version) ($(tmp))" ;
        gcc-release-versions += $(tmp) ;
      }
      else
      {
        ECHO "gcc version... $(gcc-version) ($(tmp), dumplicated)" ;
      }
    }
    else if $(gcc-version) = snapshot
    {
      local tmp = ;
      for local gcc-snapshot-alias in $(gcc-snapshot-aliases)
      {
        local kv = [ regex.split $(gcc-snapshot-alias) "," ] ;
        if $(kv[1]) = snapshot
        {
          if ! $(tmp)
          {
            tmp = $(kv[2]) ;
          }
          else
          {
            errors.error "ERROR: A logic error." ;
          }
        }
      }
      if ! $(tmp)
      {
        errors.error "ERROR: A logic error." ;
      }
      if ! $(tmp) in $(gcc-snapshot-versions)
      {
        ECHO "gcc version... snapshot ($(tmp))" ;
        gcc-snapshot-versions += $(tmp) ;
      }
      else
      {
        ECHO "gcc version... snapshot ($(tmp), duplicated)" ;
      }
    }
    else if [ regex.match "^([0-9]+\\.[0-9]+\\.[0-9]+)$" : "$(gcc-version)" : 1 ]
    {
      if ! $(gcc-version) in $(gcc-release-versions)
      {
        ECHO "gcc version... $(gcc-version)" ;
        gcc-release-versions += $(gcc-version) ;
      }
      else
      {
        ECHO "gcc version... $(gcc-version) (duplicated)" ;
      }
    }
    else if [ regex.match "^([0-9]+\\.[0-9]+-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9])$" : "$(gcc-version)" : 1 ]
    {
      if ! $(gcc-version) in $(gcc-snapshot-versions)
      {
        ECHO "gcc version... $(gcc-version)" ;
        gcc-snapshot-versions += $(gcc-version) ;
      }
      else
      {
        ECHO "gcc version... $(gcc-version) (duplicated)" ;
      }
    }
    else if [ regex.match "^([0-9]+\\.[0-9]+\\.0-RC-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9])$" : "$(gcc-version)" : 1 ]
    {
      if ! $(gcc-version) in $(gcc-snapshot-versions)
      {
        ECHO "gcc version... $(gcc-version)" ;
        gcc-snapshot-versions += $(gcc-version) ;
      }
      else
      {
        ECHO "gcc version... $(gcc-version) (duplicated)" ;
      }
    }
    else if [ regex.match "^([0-9]+\\.[0-9]+-latest)$" : "$(gcc-version)" : 1 ]
    {
      local tmp = ;
      for local gcc-snapshot-alias in $(gcc-snapshot-aliases)
      {
        local kv = [ regex.split $(gcc-snapshot-alias) "," ] ;
        if $(kv[1]) = $(gcc-version)
        {
          if ! $(tmp)
          {
            tmp = $(kv[2]) ;
          }
          else
          {
            errors.error "ERROR: A logic error." ;
          }
        }
      }
      if ! $(tmp)
      {
        errors.error "ERROR: A logic error." ;
      }
      if ! $(tmp) in $(gcc-snapshot-versions)
      {
        ECHO "gcc version... $(gcc-version) ($(tmp))" ;
        gcc-snapshot-versions += $(tmp) ;
      }
      else
      {
        ECHO "gcc version... $(gcc-version) ($(tmp), duplicated)" ;
      }
    }
    else
    {
      errors.error "ERROR: `$(gcc-version)' is a wrong value for `--enable-gcc-versions' option." ;
    }
  }
}

local multilib = [ option.get enable-multilib : no : yes ] ;
if ! $(multilib) in no yes
{
  errors.error "ERROR: `$(multilib)' is a wrong value for `--enable-multilib' option." ;
}
if [ option.get disable-multilib : INUMIMI : INUMIMI ] != INUMIMI
{
  errors.error "ERROR: No value for `--disable-multilib' is allowed." ;
}
if $(multilib) = yes && [ option.get disable-multilib : : INUMIMI ] = INUMIMI
{
  errors.error "ERROR: both `--enable-multilib' and `--disable-multilib' are specified." ;
}
ECHO multilib... $(multilib) ;

local mpi = [ option.get with-mpi : unspecified : INUMIMI ] ;
if $(mpi) = INUMIMI {
  errors.error "ERROR: No value is specified for `--with-mpi' option." ;
}
if ! $(mpi) in openmpi mpich2 unspecified
{
  errors.error "ERROR: `$(mpi)' is a wrong value for `--with-mpi' option.\n"
               "             Allowed values are `openmpi' and `mpich2'." ;
}
ECHO mpi... $(mpi) ;

local clang = [ option.get enable-clang : no : yes ] ;
if ! $(clang) in no yes
{
  errors.error "ERROR: `$(clang)' is a wrong value for `--enable-clang' option.\n"
               "             Allowed values are `yes' and `no'." ;
}
if [ option.get disable-clang : INUMIMI : INUMIMI ] != INUMIMI
{
  errors.error "ERROR: No value for `--disable-clang' is allowed." ;
}
if $(clang) = yes && [ option.get disable-clang : : INUMIMI ] = INUMIMI
{
  errors.error "ERROR: both `--enable-clang' and `--disable-clang' are specified." ;
}
ECHO clang... $(clang) ;

local concurrency = [ option.get concurrency : 1 : INUMIMI ] ;
if $(concurrency) = INUMIMI
{
  errors.error "ERROR: No value is specified for `--concurrency' option." ;
}
if ! [ regex.match "(^[1-9][0-9]*)" : "$(concurrency)" : 1 ] {
  errors.error "ERROR: `$(concurrency)' is a wrong value for `--concurrency' option.'" ;
}
constant CONCURRENCY : $(concurrency) ;
ECHO concurrency... $(CONCURRENCY) ;

local awacs = [ option.get with-awacs : : INUMIMI ] ;
if $(awacs) = INUMIMI
{
  errors.error "No value for `--with-awacs' option is specified." ;
}
if $(awacs) {
  constant AWACS : $(awacs) ;
  ECHO awacs... $(AWACS) ;
}
else {
  constant AWACS : "cat > /dev/null" ;
  ECHO awacs... N/A ;
}

local stream = [ option.get with-stream : : INUMIMI ] ;
if $(stream) = INUMIMI
{
  errors.error "No value for `--with-stream' option is specified." ;
}
if $(stream) {
  constant STREAM : $(stream) ;
  ECHO stream... $(stream) ;
}
else {
  constant STREAM : "" ;
  ECHO stream... N/A ;
}



project intro : build-dir bin ;


feature triplet : unspecified i686-pc-linux-gnu i686-pc-cygwin i686-w64-mingw32 x86_64-unknown-linux-gnu x86_64-w64-mingw32 : propagated ;

feature multilib        : unspecified no yes            : propagated            ;
feature multilib-hidden : [ feature.values <multilib> ] : propagated incidental ;

feature binutils        : unspecified $(binutils-for-gcc) : propagated            ;
feature binutils-hidden : [ feature.values <binutils> ]   : propagated incidental ;

feature gmp        : unspecified $(gmp-for-gcc) : propagated            ;
feature gmp-hidden : [ feature.values <gmp> ]   : propagated incidental ;

feature mpfr        : unspecified $(mpfr-for-gcc) : propagated            ;
feature mpfr-hidden : [ feature.values <mpfr> ]   : propagated incidental ;

feature mpc        : unspecified $(mpc-for-gcc) : propagated            ;
feature mpc-hidden : [ feature.values <mpc> ]   : propagated incidental ;

feature ppl        : unspecified $(ppl-for-gcc) : propagated            ;
feature ppl-hidden : [ feature.values <ppl> ]   : propagated incidental ;

feature cloog        : unspecified $(cloog-for-gcc) : propagated            ;
feature cloog-hidden : [ feature.values <cloog> ]   : propagated incidental ;

feature gcc        : unspecified $(gcc-release-versions) $(gcc-snapshot-versions) : propagated            ;
feature gcc-hidden : [ feature.values <gcc> ]                                     : propagated incidental ;

ECHO "Extracting ICU4C latest version, patience..." ;
local icu4c = [ SHELL "\"$(INTRO_ROOT_DIR)/icu4c-latest.sh\" || echo -n 'error'" ] ;
if [ regex.match "^([0-9]+(\\.[0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)?)$" : $(icu4c) : 1 ] {
  ECHO $(icu4c) ;
}
else {
  errors.error "ERROR: failed to extract ICU4C latest version." ;
}
feature icu4c        : unspecified $(icu4c)       : propagated            ;
feature icu4c-hidden : [ feature.values <icu4c> ] : propagated incidental ;

feature mpi        : unspecified openmpi mpich2 : propagated            ;
feature mpi-hidden : [ feature.values <mpi> ]   : propagated incidental ;

local openmpi = unspecified ;
if $(mpi) = openmpi {
  ECHO "Extracting OpenMPI latest version, patience..." ;
  openmpi = [ SHELL "\"$(INTRO_ROOT_DIR)/openmpi-latest.sh\" || echo -n 'error'" ] ;
  if [ regex.match "^([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)$" : $(openmpi) : 1 ] {
    ECHO $(openmpi) ;
    feature openmpi        : unspecified $(openmpi)       : propagated            ;
    feature openmpi-hidden : [ feature.values <openmpi> ] : propagated incidental ;
  }
  else {
    errors.error "ERROR: failed to extract OpenMPI latest version." ;
  }
}
else {
  feature openmpi        : unspecified                  : propagated            ;
  feature openmpi-hidden : [ feature.values <openmpi> ] : propagated incidental ;
}

ECHO "Extracting Boost latest version, patience..." ;
local boost = [ SHELL "\"$(INTRO_ROOT_DIR)/boost-latest.sh\" || echo -n 'error'" ] ;
if [ regex.match "^([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)$" : $(boost) : 1 ] {
  ECHO $(boost) ;
}
else {
  errors.error "ERROR: failed to extract Boost latest version." ;
}
feature boost        : unspecified $(boost)       : propagated            ;
feature boost-hidden : [ feature.values <boost> ] : propagated incidental ;


if $(clang) = yes {
  clang = "clang//install/<multilib-hidden>$(multilib)" ;
}
else {
  clang = ;
}

if $(triplet) = i686-pc-cygwin && $(clang) {
  errors.error "Sorry, but there is a problem in building Clang by the GCC current release on i686-pc-cygwin." ;
}

for local gcc-ver in $(gcc-release-versions) $(gcc-snapshot-versions)
{
  alias gcc-$(gcc-ver)
    : gcc//install/<multilib>$(multilib)
      gmp//install/<multilib-hidden>$(multilib)/<gmp>$(gmp)
      mpfr//install/<multilib-hidden>$(multilib)/<gmp>$(gmp)/<mpfr>$(mpfr)
      boost//install/<multilib-hidden>$(multilib)/<icu4c>$(icu4c)/<mpi>$(mpi)/<openmpi>$(openmpi)/<boost>$(boost)
      $(clang)
    : <triplet>$(triplet)
      <gcc>$(gcc-ver)
    ;
}

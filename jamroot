import errors ;
import feature : feature ;
import modules ;
import option ;
import regex ;

path-constant INTRO_ROOT_DIR : . ;


local triplet = [ option.get triplet ] ;
if ! $(triplet) {
  errors.error "ERROR: '--triplet' option not specified." ;
}
constant TRIPLET : $(triplet) ;
ECHO triplet... $(triplet) ;

local prefix = [ option.get prefix ] ;
if ! $(prefix) {
  errors.error "ERROR: '--prefix' option not specified." ;
}
path-constant PREFIX : "$(prefix)" ;
ECHO prefix... $(prefix) ;

local multilib = [ option.get enable-multilib : no : yes ] ;
if ! $(multilib) in no yes
{
  errors.error "ERROR: `$(multilib)' is a wrong value for `--enable-multilib' option." ;
}
if [ option.get disable-multilib : INUMIMI : INUMIMI ] != INUMIMI
{
  errors.error "ERROR: No value for `--disable-multilib' is allowed." ;
}
if $(multilib) = yes && [ option.get disable-multilib : : INUMIMI ] = INUMIMI
{
  errors.error "ERROR: both `--enable-multilib' and `--disable-multilib' are specified." ;
}
ECHO multilib... $(multilib) ;

local mpi = [ option.get with-mpi : unspecified : INUMIMI ] ;
if $(mpi) = INUMIMI {
  errors.error "ERROR: No value is specified for `--with-mpi' option." ;
}
if ! $(mpi) in openmpi mpich2 unspecified
{
  errors.error "ERROR: `$(mpi)' is a wrong value for `--with-mpi' option.\n"
               "             Allowed values are `openmpi' and `mpich2'." ;
}
ECHO mpi... $(mpi) ;

local clang = [ option.get enable-clang : no : yes ] ;
if ! $(clang) in no yes
{
  errors.error "ERROR: `$(clang)' is a wrong value for `--enable-clang' option.\n"
               "             Allowed values are `yes' and `no'." ;
}
if [ option.get disable-clang : INUMIMI : INUMIMI ] != INUMIMI
{
  errors.error "ERROR: No value for `--disable-clang' is allowed." ;
}
if $(clang) = yes && [ option.get disable-clang : : INUMIMI ] = INUMIMI
{
  errors.error "ERROR: both `--enable-clang' and `--disable-clang' are specified." ;
}
ECHO clang... $(clang) ;

local concurrency = [ option.get concurrency : 1 : INUMIMI ] ;
if $(concurrency) = INUMIMI
{
  errors.error "ERROR: No value is specified for `--concurrency' option." ;
}
if ! [ regex.match "(^[1-9][0-9]*)" : "$(concurrency)" : 1 ] {
  errors.error "ERROR: `$(concurrency)' is a wrong value for `--concurrency' option.'" ;
}
constant CONCURRENCY : $(concurrency) ;
ECHO concurrency... $(CONCURRENCY) ;

local awacs = [ option.get with-awacs : : INUMIMI ] ;
if $(awacs) = INUMIMI
{
  errors.error "No value for `--with-awacs' option is specified." ;
}
if $(awacs) {
  constant AWACS : $(awacs) ;
  ECHO awacs... $(AWACS) ;
}
else {
  constant AWACS : "cat > /dev/null" ;
  ECHO awacs... N/A ;
}

local stream = [ option.get with-stream : : INUMIMI ] ;
if $(stream) = INUMIMI
{
  errors.error "No value for `--with-stream' option is specified." ;
}
if $(stream) {
  constant STREAM : $(stream) ;
  ECHO stream... $(stream) ;
}
else {
  constant STREAM : "" ;
  ECHO stream... N/A ;
}



project intro : build-dir bin ;


feature triplet : unspecified i686-pc-linux-gnu i686-pc-cygwin i686-w64-mingw32 x86_64-unknown-linux-gnu x86_64-w64-mingw32 : propagated ;

feature multilib        : unspecified no yes            : propagated            ;
feature multilib-hidden : [ feature.values <multilib> ] : propagated incidental ;

ECHO "Extracting binutils latest version, patience..." ;
local binutils = [ SHELL "\"$(INTRO_ROOT_DIR)/binutils-latest.sh\" || /bin/echo -n 'error'" ] ;
if [ regex.match "^([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)$" : $(binutils) : 1 ] {
  ECHO $(binutils) ;
  feature binutils        : unspecified $(binutils)       : propagated            ;
  feature binutils-hidden : [ feature.values <binutils> ] : propagated incidental ;
}
else {
  errors.error "ERROR: failed to extract binutils latest version." ;
}

ECHO "Extracting GMP latest version, patience..." ;
local gmp = [ SHELL "\"$(INTRO_ROOT_DIR)/gmp-latest.sh\" || /bin/echo -n 'error'" ] ;
if [ regex.match "^([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)$" : $(gmp) : 1 ] {
  ECHO $(gmp) ;
  feature gmp        : unspecified $(gmp)       : propagated            ;
  feature gmp-hidden : [ feature.values <gmp> ] : propagated incidental ;
}
else {
  errors.error "ERROR: failed to extract GMP latest version." ;
}

ECHO "Extracting MPFR latest version, patience..." ;
local mpfr = [ SHELL "\"$(INTRO_ROOT_DIR)/mpfr-latest.sh\" || /bin/echo -n 'error'" ] ;
if [ regex.match "^([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)$" : $(mpfr) : 1 ] {
  ECHO $(mpfr) ;
  feature mpfr        : unspecified $(mpfr)       : propagated            ;
  feature mpfr-hidden : [ feature.values <mpfr> ] : propagated incidental ;
}
else {
  errors.error "ERROR: failed to extract MPFR latest version." ;
}

ECHO "Extracting MPC latest version, patience..." ;
local mpc = [ SHELL "\"$(INTRO_ROOT_DIR)/mpc-latest.sh\" || /bin/echo -n 'error'" ] ;
if [ regex.match "^([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)$" : $(mpc) : 1 ] {
  ECHO $(mpc) ;
  feature mpc        : unspecified $(mpc)       : propagated            ;
  feature mpc-hidden : [ feature.values <mpc> ] : propagated incidental ;
}
else {
  errors.error "ERROR: failed to extract MPC latest version." ;
}

ECHO "Extracting PPL latest version, patience..." ;
local ppl = [ SHELL "\"$(INTRO_ROOT_DIR)/ppl-latest.sh\" || /bin/echo -n 'error'" ] ;
if [ regex.match "^([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)$" : $(ppl) : 1 ] {
  ECHO $(ppl) ;
  feature ppl        : unspecified $(ppl)       : propagated            ;
  feature ppl-hidden : [ feature.values <ppl> ] : propagated incidental ;
}
else {
  errors.error "ERROR: failed to extract PPL latest version." ;
}

ECHO "Extracting CLooG latest version, patience..." ;
local cloog = [ SHELL "\"$(INTRO_ROOT_DIR)/cloog-latest.sh\" || /bin/echo -n 'error'" ] ;
if [ regex.match "^([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)$" : $(cloog) : 1 ] {
  ECHO $(cloog) ;
  feature cloog        : unspecified $(cloog)       : propagated            ;
  feature cloog-hidden : [ feature.values <cloog> ] : propagated incidental ;
}
else {
  errors.error "ERROR: failed to extract CLooG latest version." ;
}

ECHO "Extracting GCC versions, patience..." ;
local gcc-versions = [ regex.split [ SHELL "\"$(INTRO_ROOT_DIR)/gcc-versions.sh\" || /bin/echo -n 'error'" ] " +" ] ;
for local i in $(gcc-versions) {
  if [ regex.match "^([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)$" : $(i) : 1 ] {
    # Do nothing.
  }
  else if [ regex.match "^([0-9]+\\.[0-9]+-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9])$" : $(i) : 1 ] {
    # Do nothing.
  }
  else if [ regex.match "^([0-9]+\\.[0-9]+.0-RC-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9])$" : $(i) : 1 ] {
    # Do nothing.
  }
  else {
    errors.error "ERROR: failed to extract GCC versions." ;
  }
}
local gcc-builtin = $(gcc-versions[1]) ;
constant GCC_BUILTIN : $(gcc-builtin) ;
local gcc-oldest = $(gcc-versions[2]) ;
local gcc-previous = $(gcc-versions[3]) ;
local gcc-current = $(gcc-versions[4]) ;
local gcc-snapshot = $(gcc-versions[5]) ;
ECHO GCC builtin... $(gcc-builtin) ;
ECHO GCC current... $(gcc-current) ;
ECHO GCC previous... $(gcc-previous) ;
ECHO GCC oldest... $(gcc-oldest) ;
ECHO GCC snapshot... $(gcc-snapshot) ;
if $(gcc-builtin) in $(gcc-current) $(gcc-previous) $(gcc-oldest) $(gcc-snapshot) {
  feature gcc      : unspecified                $(gcc-current) $(gcc-previous) $(gcc-oldest) $(gcc-snapshot) : propagated            ;
}
else {
  feature gcc      : unspecified $(gcc-builtin) $(gcc-current) $(gcc-previous) $(gcc-oldest) $(gcc-snapshot) : propagated            ;
}
feature gcc-hidden : [ feature.values <gcc> ]                                                                : propagated incidental ;

ECHO "Extracting ICU4C latest version, patience..." ;
local icu4c = [ SHELL "\"$(INTRO_ROOT_DIR)/icu4c-latest.sh\" || /bin/echo -n 'error'" ] ;
if [ regex.match "^([0-9]+(\\.[0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)?)$" : $(icu4c) : 1 ] {
  ECHO $(icu4c) ;
}
else {
  errors.error "ERROR: failed to extract ICU4C latest version." ;
}
feature icu4c        : unspecified $(icu4c)       : propagated            ;
feature icu4c-hidden : [ feature.values <icu4c> ] : propagated incidental ;

feature mpi        : unspecified openmpi mpich2 : propagated            ;
feature mpi-hidden : [ feature.values <mpi> ]   : propagated incidental ;

local openmpi = unspecified ;
if $(mpi) = openmpi {
  ECHO "Extracting OpenMPI latest version, patience..." ;
  openmpi = [ SHELL "\"$(INTRO_ROOT_DIR)/openmpi-latest.sh\" || /bin/echo -n 'error'" ] ;
  if [ regex.match "^([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)$" : $(openmpi) : 1 ] {
    ECHO $(openmpi) ;
    feature openmpi        : unspecified $(openmpi)       : propagated            ;
    feature openmpi-hidden : [ feature.values <openmpi> ] : propagated incidental ;
  }
  else {
    errors.error "ERROR: failed to extract OpenMPI latest version." ;
  }
}
else {
  feature openmpi        : unspecified                  : propagated            ;
  feature openmpi-hidden : [ feature.values <openmpi> ] : propagated incidental ;
}

ECHO "Extracting Boost latest version, patience..." ;
local boost = [ SHELL "\"$(INTRO_ROOT_DIR)/boost-latest.sh\" || /bin/echo -n 'error'" ] ;
if [ regex.match "^([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)$" : $(boost) : 1 ] {
  ECHO $(boost) ;
}
else {
  errors.error "ERROR: failed to extract Boost latest version." ;
}
feature boost        : unspecified $(boost)       : propagated            ;
feature boost-hidden : [ feature.values <boost> ] : propagated incidental ;


if $(clang) = yes {
  clang = "clang//install/<multilib-hidden>$(multilib)/<binutils>$(binutils)/<gmp>unspecified/<gmp-hidden>$(gmp)/<mpfr>unspecified/<mpfr-hidden>$(mpfr)/<mpc>unspecified/<mpc-hidden>$(mpc)/<ppl-hidden>$(ppl)/<cloog-hidden>$(cloog)" ;
}
else {
  clang = ;
}


if $(triplet) = i686-pc-cygwin && $(clang) {
  errors.error "Sorry, but there is a problem in building Clang by the GCC current release on i686-pc-cygwin." ;
}

alias builtin
  : gcc//install/<multilib>$(multilib)/<gmp>$(gmp)/<mpfr>$(mpfr)/<mpc>$(mpc)/<ppl>$(ppl)/<cloog>$(cloog)
    gmp//install/<multilib-hidden>$(multilib)/<gmp>$(gmp)/<mpfr-hidden>$(mpfr)/<mpc-hidden>$(mpc)/<ppl-hidden>$(ppl)/<cloog-hidden>$(cloog)
    mpfr//install/<multilib-hidden>$(multilib)/<gmp>$(gmp)/<mpfr>$(mpfr)/<mpc-hidden>$(mpc)/<ppl-hidden>$(ppl)/<cloog-hidden>$(cloog)
    boost//install/<multilib-hidden>$(multilib)/<gmp-hidden>$(gmp)/<mpfr-hidden>$(mpfr)/<mpc-hidden>$(mpc)/<ppl-hidden>$(ppl)/<cloog-hidden>$(cloog)/<icu4c>$(icu4c)/<mpi>$(mpi)/<openmpi>$(openmpi)/<boost>$(boost)
    $(clang)
  : <triplet>$(triplet)
    <binutils>$(binutils)
    <gcc>$(gcc-builtin)
  ;
explicit builtin ;

if $(gcc-current) = $(gcc-builtin) {
  notfile current : @warning-current ;
  actions warning-current
  {
    echo "WARNING: the build of GCC current will be skipped because GCC current version is equal to the version of built-in GCC." 1>&2
  }
  explicit current ;
}
else {
  alias current
    : gcc//install/<multilib>$(multilib)/<gmp>$(gmp)/<mpfr>$(mpfr)/<mpc>$(mpc)/<ppl>$(ppl)/<cloog>$(cloog)
      gmp//install/<multilib-hidden>$(multilib)/<gmp>$(gmp)/<mpfr-hidden>$(mpfr)/<mpc-hidden>$(mpc)/<ppl-hidden>$(ppl)/<cloog-hidden>$(cloog)
      mpfr//install/<multilib-hidden>$(multilib)/<gmp>$(gmp)/<mpfr>$(mpfr)/<mpc-hidden>$(mpc)/<ppl-hidden>$(ppl)/<cloog-hidden>$(cloog)
      boost//install/<multilib-hidden>$(multilib)/<gmp-hidden>$(gmp)/<mpfr-hidden>$(mpfr)/<mpc-hidden>$(mpc)/<ppl-hidden>$(ppl)/<cloog-hidden>$(cloog)/<icu4c>$(icu4c)/<mpi>$(mpi)/<openmpi>$(openmpi)/<boost>$(boost)
      $(clang)
    : <triplet>$(triplet)
      <binutils>$(binutils)
      <gcc>$(gcc-current)
    ;
  explicit current ;
}

if $(gcc-previous) = $(gcc-builtin) {
  notfile previous : @warning-previous ;
  actions warning-previous
  {
    echo "WARNING: the build of GCC previous will be skipped because GCC previous version is equal to the version of built-in GCC." 1>&2
  }
  explicit previous ;
}
else {
  alias previous
    : gcc//install/<multilib>$(multilib)/<gmp>$(gmp)/<mpfr>$(mpfr)/<mpc>$(mpc)/<ppl>$(ppl)/<cloog>$(cloog)
      gmp//install/<multilib-hidden>$(multilib)/<gmp>$(gmp)/<mpfr-hidden>$(mpfr)/<mpc-hidden>$(mpc)/<ppl-hidden>$(ppl)/<cloog-hidden>$(cloog)
      mpfr//install/<multilib-hidden>$(multilib)/<gmp>$(gmp)/<mpfr>$(mpfr)/<mpc-hidden>$(mpc)/<ppl-hidden>$(ppl)/<cloog-hidden>$(cloog)
      boost//install/<multilib-hidden>$(multilib)/<gmp-hidden>$(gmp)/<mpfr-hidden>$(mpfr)/<mpc-hidden>$(mpc)/<ppl-hidden>$(ppl)/<cloog-hidden>$(cloog)/<icu4c>$(icu4c)/<mpi>$(mpi)/<openmpi>$(openmpi)/<boost>$(boost)
      $(clang)
    : <triplet>$(triplet)
      <binutils>$(binutils)
      <gcc>$(gcc-previous)
    ;
  explicit previous ;
}

if $(gcc-oldest) = $(gcc-builtin) {
  notfile oldest : @warning-oldest ;
  actions warning-oldest
  {
    echo "WARNING: the build of GCC oldest will be skipped because GCC oldest version is equal to the version of built-in GCC." 1>&2
  }
  explicit oldest ;
}
else {
  alias oldest
    : gcc//install/<multilib>$(multilib)/<gmp>$(gmp)/<mpfr>$(mpfr)/<mpc>$(mpc)/<ppl>$(ppl)/<cloog>$(cloog)
      gmp//install/<multilib-hidden>$(multilib)/<gmp>$(gmp)/<mpfr-hidden>$(mpfr)/<mpc-hidden>$(mpc)/<ppl-hidden>$(ppl)/<cloog-hidden>$(cloog)
      mpfr//install/<multilib-hidden>$(multilib)/<gmp>$(gmp)/<mpfr>$(mpfr)/<mpc-hidden>$(mpc)/<ppl-hidden>$(ppl)/<cloog-hidden>$(cloog)
      boost//install/<multilib-hidden>$(multilib)/<gmp-hidden>$(gmp)/<mpfr-hidden>$(mpfr)/<mpc-hidden>$(mpc)/<ppl-hidden>$(ppl)/<cloog-hidden>$(cloog)/<icu4c>$(icu4c)/<mpi>$(mpi)/<openmpi>$(openmpi)/<boost>$(boost)
      $(clang)
    : <triplet>$(triplet)
      <binutils>$(binutils)
      <gcc>$(gcc-oldest)
    ;
  explicit oldest ;
}

if $(gcc-snapshot) = $(gcc-builtin) {
  notfile snapshot : @warning-snapshot ;
  actions warning-snapshot
  {
    echo "WARNING: the build of GCC snapshot will be skipped because GCC snapshot version is equal to the version of built-in GCC." 1>&2
  }
  explicit snapshot ;
}
else {
  alias snapshot
    : gcc//install/<multilib>$(multilib)/<gmp>$(gmp)/<mpfr>$(mpfr)/<mpc>$(mpc)/<ppl>$(ppl)/<cloog>$(cloog)
      gmp//install/<multilib-hidden>$(multilib)/<gmp>$(gmp)/<mpfr-hidden>$(mpfr)/<mpc-hidden>$(mpc)/<ppl-hidden>$(ppl)/<cloog-hidden>$(cloog)
      mpfr//install/<multilib-hidden>$(multilib)/<gmp>$(gmp)/<mpfr>$(mpfr)/<mpc-hidden>$(mpc)/<ppl-hidden>$(ppl)/<cloog-hidden>$(cloog)
      boost//install/<multilib-hidden>$(multilib)/<gmp-hidden>$(gmp)/<mpfr-hidden>$(mpfr)/<mpc-hidden>$(mpc)/<ppl-hidden>$(ppl)/<cloog-hidden>$(cloog)/<icu4c>$(icu4c)/<mpi>$(mpi)/<openmpi>$(openmpi)/<boost>$(boost)
      $(clang)
    : <triplet>$(triplet)
      <binutils>$(binutils)
      <gcc>$(gcc-snapshot)
    ;
  explicit snapshot ;
}

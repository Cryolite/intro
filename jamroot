import errors ;
import feature : feature ;
import modules ;
import regex ;

path-constant INTRO_ROOT_DIR : . ;


local triplet ;
local prefix ;
local multilib ;
local mpi ;
local clang ;
local concurrency ;
local awacs ;
local stream ;
for local argv in [ modules.peek : ARGV ] {
  local tmp = ;
  tmp = [ regex.match "^--triplet=(.*)$" : $(argv) : 1 ] ;
  if $(tmp) {
    if $(triplet) {
      errors.error "ERROR: duplicate '--triplet' option." ;
    }
    triplet = $(tmp) ;
  }
  tmp = [ regex.match "^--prefix=(/.*)$" : $(argv) : 1 ] ;
  if $(tmp) {
    if $(prefix) {
      errors.error "ERROR: duplicate '--prefix' option." ;
    }
    prefix = $(tmp) ;
  }
  tmp = [ regex.match "^(--enable-multilib(=((yes)|(no)))?)$" : $(argv) : 1 ] ;
  if $(tmp) {
    if $(multilib) {
      errors.error "ERROR: duplicate '--enable-multilib' or '--disable-multilib' options." ;
    }
    if $(tmp) = "--enable-multilib" {
      multilib = yes ;
    }
    else if $(tmp) = "--enable-multilib=yes" {
      multilib = yes ;
    }
    else if $(tmp) = "--enable-multilib=no" {
      multilib = no ;
    }
    else {
      errors.error "ERROR: an internal error." ;
    }
  }
  tmp = [ regex.match "^(--disable-multilib)$" : $(argv) : 1 ] ;
  if $(tmp) {
    if $(multilib) {
      errors.error "ERROR: duplicate '--enable-multilib' or '--disable-multilib' options." ;
    }
    multilib = no ;
  }
  tmp = [ regex.match "^(--with-mpi=((openmpi)|(mpich2)))$" : $(argv) : 1 ] ;
  if $(tmp) {
    if $(mpi) {
      errors.error "ERROR: duplicate '--with-mpi' option." ;
    }
    if $(tmp) = "--with-mpi=openmpi" {
      mpi = openmpi ;
    }
    else if $(tmp) = "--with-mpi=mpich2" {
      mpi = mpich2 ;
    }
    else {
      errors.error "ERROR: an internal error." ;
    }
  }
  tmp = [ regex.match "^(--enable-clang(=((yes)|(no)))?)$" : $(argv) : 1 ] ;
  if $(tmp) {
    if $(clang) {
      errors.error "ERROR: duplicate '--enable-clang' or '--disable-clang' options." ;
    }
    if $(tmp) = "--enable-clang" {
      clang = yes ;
    }
    else if $(tmp) = "--enable-clang=yes" {
      clang = yes ;
    }
    else if $(tmp) = "--enable-clang=no" {
      clang = no ;
    }
    else {
      errors.error "ERROR: an internal error." ;
    }
  }
  tmp = [ regex.match "^(--disable-clang)$" : $(argv) : 1 ] ;
  if $(tmp) {
    if $(clang) {
      errors.error "ERROR: duplicate '--enable-clang' or '--disable-clang' options." ;
    }
    clang = no ;
  }
  tmp = [ regex.match "^--concurrency=([123456789][0123456789]*)$" : $(argv) : 1 ] ;
  if $(tmp) {
    if $(concurrency) {
      errors.error "ERROR: duplicate '--concurrency' option." ;
    }
    concurrency = $(tmp) ;
  }
  tmp = [ regex.match "^--enable-awacs=(.*)$" : $(argv) : 1 ] ;
  if $(tmp) {
    if $(awacs) {
      errors.error "ERROR: duplicate '--enable-awacs' option." ;
    }
    awacs = $(tmp) ;
  }
  tmp = [ regex.match "^--enable-stream=(.*)$" : $(argv) : 1 ] ;
  if $(tmp) {
    if $(stream) {
      errors.error "ERROR: duplicate '--enable-stream' option." ;
    }
    stream = $(tmp) ;
  }
}


{
  if ! $(triplet) {
    errors.error "ERROR: '--triplet' option not specified." ;
  }
  constant TRIPLET : $(triplet) ;
  ECHO --triplet... $(triplet) ;

  if ! $(prefix) {
    errors.error "ERROR: '--prefix' option not specified." ;
  }
  path-constant PREFIX : "$(prefix)" ;
  ECHO --prefix... $(prefix) ;

  if ! $(multilib) {
    if $(triplet) = x86_64-unknown-linux-gnu || $(triplet) = x86_64-w64-mingw32 {
      multilib = yes ;
    }
    else {
      multilib = no ;
    }
  }
  ECHO multilib... $(multilib) ;

  if ! $(mpi) {
    mpi = unspecified ;
  }
  ECHO mpi... $(mpi) ;

  if ! $(clang) {
    clang = no ;
  }
  ECHO clang... $(clang) ;

  if $(concurrency) {
    constant CONCURRENCY : $(concurrency) ;
    ECHO concurrency... $(CONCURRENCY) ;
  }
  else {
    ECHO concurrency... 1 ;
  }

  if $(awacs) {
    constant AWACS : $(awacs) ;
    ECHO awacs... $(AWACS) ;
  }
  else {
    constant AWACS : "cat > /dev/null" ;
    ECHO awacs... N/A ;
  }

  if $(stream) {
    constant STREAM : $(stream) ;
    ECHO stream... $(stream) ;
  }
  else {
    constant STREAM : "" ;
    ECHO stream... N/A ;
  }
}


project intro : build-dir bin ;


feature triplet : unspecified i686-pc-linux-gnu i686-pc-cygwin i686-w64-mingw32 x86_64-unknown-linux-gnu x86_64-w64-mingw32 : propagated ;

feature multilib        : unspecified no yes            : propagated            ;
feature multilib-hidden : [ feature.values <multilib> ] : propagated incidental ;

ECHO "Extracting GMP latest version, patience..." ;
local gmp = [ SHELL "\"$(INTRO_ROOT_DIR)/gmp-latest.sh\" || /bin/echo -n 'error'" ] ;
if [ regex.match "^([0123456789]+(\\.[0123456789]+(\\.[0123456789]+)?)?)$" : $(gmp) : 1 ] {
  ECHO $(gmp) ;
  feature gmp        : unspecified $(gmp)       : propagated            ;
  feature gmp-hidden : [ feature.values <gmp> ] : propagated incidental ;
}
else {
  errors.error "ERROR: failed to extract GMP latest version." ;
}

ECHO "Extracting MPFR latest version, patience..." ;
local mpfr = [ SHELL "\"$(INTRO_ROOT_DIR)/mpfr-latest.sh\" || /bin/echo -n 'error'" ] ;
if [ regex.match "^([0123456789]+(\\.[0123456789]+(\\.[0123456789]+)?)?)$" : $(mpfr) : 1 ] {
  ECHO $(mpfr) ;
  feature mpfr        : unspecified $(mpfr)       : propagated            ;
  feature mpfr-hidden : [ feature.values <mpfr> ] : propagated incidental ;
}
else {
  errors.error "ERROR: failed to extract MPFR latest version." ;
}

ECHO "Extracting MPC latest version, patience..." ;
local mpc = [ SHELL "\"$(INTRO_ROOT_DIR)/mpc-latest.sh\" || /bin/echo -n 'error'" ] ;
if [ regex.match "^([0123456789]+(\\.[0123456789]+(\\.[0123456789]+)?)?)$" : $(mpc) : 1 ] {
  ECHO $(mpc) ;
  feature mpc        : unspecified $(mpc)       : propagated            ;
  feature mpc-hidden : [ feature.values <mpc> ] : propagated incidental ;
}
else {
  errors.error "ERROR: failed to extract MPC latest version." ;
}

ECHO "Extracting GCC versions, patience..." ;
local gcc-versions = [ regex.split [ SHELL "\"$(INTRO_ROOT_DIR)/gcc-versions.sh\" || /bin/echo -n 'error'" ] " +" ] ;
for local i in $(gcc-versions) {
  if [ regex.match "^([0123456789]+(\\.[0123456789]+(\\.[0123456789]+)?)?)$" : $(i) : 1 ] {
    # Do nothing.
  }
  else if [ regex.match "^([0123456789]+\\.[0123456789]+-[0123456789][0123456789][0123456789][0123456789][0123456789][0123456789][0123456789][0123456789])$" : $(i) : 1 ] {
    # Do nothing.
  }
  else {
    errors.error "ERROR: failed to extract GCC versions." ;
  }
}
#local gcc-builtin = $(gcc-versions[1]) ;
#constant GCC_BUILTIN : $(gcc-builtin) ;
local gcc-current = $(gcc-versions[2]) ;
local gcc-previous = $(gcc-versions[3]) ;
local gcc-oldest = $(gcc-versions[4]) ;
local gcc-snapshot = $(gcc-versions[5]) ;
ECHO GCC current... $(gcc-current) ;
ECHO GCC previous... $(gcc-previous) ;
ECHO GCC oldest... $(gcc-oldest) ;
ECHO GCC snapshot... $(gcc-snapshot) ;
feature gcc        : unspecified $(gcc-current) $(gcc-previous) $(gcc-oldest) $(gcc-snapshot) : propagated            ;
feature gcc-hidden : [ feature.values <gcc> ]                                                 : propagated incidental ;

ECHO "Extracting ICU4C latest version, patience..." ;
local icu4c = [ SHELL "\"$(INTRO_ROOT_DIR)/icu4c-latest.sh\" || /bin/echo -n 'error'" ] ;
if [ regex.match "^([0123456789]+(\\.[0123456789]+(\\.[0123456789]+)?)?)$" : $(icu4c) : 1 ] {
  ECHO $(icu4c) ;
}
else {
  errors.error "ERROR: failed to extract ICU4C latest version." ;
}
feature icu4c        : unspecified $(icu4c)       : propagated            ;
feature icu4c-hidden : [ feature.values <icu4c> ] : propagated incidental ;

feature mpi        : unspecified openmpi mpich2 : propagated            ;
feature mpi-hidden : [ feature.values <mpi> ]   : propagated incidental ;

local openmpi = unspecified ;
if $(mpi) = openmpi {
  ECHO "Extracting OpenMPI latest version, patience..." ;
  openmpi = [ SHELL "\"$(INTRO_ROOT_DIR)/openmpi-latest.sh\" || /bin/echo -n 'error'" ] ;
  if [ regex.match "^([0123456789]+(\\.[0123456789]+(\\.[0123456789]+)?)?)$" : $(openmpi) : 1 ] {
    ECHO $(openmpi) ;
    feature openmpi        : unspecified $(openmpi)       : propagated            ;
    feature openmpi-hidden : [ feature.values <openmpi> ] : propagated incidental ;
  }
  else {
    errors.error "ERROR: failed to extract OpenMPI latest version." ;
  }
}
else {
  feature openmpi        : unspecified                  : propagated            ;
  feature openmpi-hidden : [ feature.values <openmpi> ] : propagated incidental ;
}

ECHO "Extracting Boost latest version, patience..." ;
local boost = [ SHELL "\"$(INTRO_ROOT_DIR)/boost-latest.sh\" || /bin/echo -n 'error'" ] ;
if [ regex.match "^([0123456789]+(\\.[0123456789]+(\\.[0123456789]+)?)?)$" : $(boost) : 1 ] {
  ECHO $(boost) ;
}
else {
  errors.error "ERROR: failed to extract Boost latest version." ;
}
feature boost        : unspecified $(boost)       : propagated            ;
feature boost-hidden : [ feature.values <boost> ] : propagated incidental ;

if $(clang) = yes {
  clang = "clang//install/<gmp>unspecified/<gmp-hidden>$(gmp)/<mpfr>unspecified/<mpfr-hidden>$(mpfr)/<mpc>unspecified/<mpc-hidden>$(mpc)" ;
}
else {
  clang = ;
}


if $(triplet) = i686-pc-cygwin && $(clang) {
  errors.error "Sorry, but there is a problem in building Clang by the GCC current release on i686-pc-cygwin." ;
}
alias current
  : gcc//install/<gmp>$(gmp)/<mpfr>$(mpfr)/<mpc>$(mpc)
    gmp//install/<gmp>$(gmp)/<mpfr-hidden>$(mpfr)/<mpc-hidden>$(mpc)
    mpfr//install/<gmp>$(gmp)/<mpfr>$(mpfr)/<mpc-hidden>$(mpc)
    boost//install/<gmp-hidden>$(gmp)/<mpfr-hidden>$(mpfr)/<mpc-hidden>$(mpc)/<icu4c>$(icu4c)/<mpi>$(mpi)/<openmpi>$(openmpi)/<boost>$(boost)
    $(clang)
  : <triplet>$(triplet)
    <multilib>$(multilib)
    <gcc>$(gcc-current)
  ;
explicit current ;

alias previous
  : gcc//install/<gmp>$(gmp)/<mpfr>$(mpfr)/<mpc>$(mpc)
    gmp//install/<gmp>$(gmp)/<mpfr-hidden>$(mpfr)/<mpc-hidden>$(mpc)
    mpfr//install/<gmp>$(gmp)/<mpfr>$(mpfr)/<mpc-hidden>$(mpc)
    boost//install/<gmp-hidden>$(gmp)/<mpfr-hidden>$(mpfr)/<mpc-hidden>$(mpc)/<icu4c>$(icu4c)/<mpi>$(mpi)/<openmpi>$(openmpi)/<boost>$(boost)
  : <triplet>$(triplet)
    <multilib>$(multilib)
    <gcc>$(gcc-previous)
  ;
explicit previous ;

alias oldest
  : gcc//install/<gmp>$(gmp)/<mpfr>$(mpfr)/<mpc>$(mpc)
    gmp//install/<gmp>$(gmp)/<mpfr-hidden>$(mpfr)/<mpc-hidden>$(mpc)
    mpfr//install/<gmp>$(gmp)/<mpfr>$(mpfr)/<mpc-hidden>$(mpc)
    boost//install/<gmp-hidden>$(gmp)/<mpfr-hidden>$(mpfr)/<mpc-hidden>$(mpc)/<icu4c>$(icu4c)/<mpi>$(mpi)/<openmpi>$(openmpi)/<boost>$(boost)
  : <triplet>$(triplet)
    <multilib>$(multilib)
    <gcc>$(gcc-oldest)
  ;
explicit oldest ;

alias snapshot
  : gcc//install/<gmp>$(gmp)/<mpfr>$(mpfr)/<mpc>$(mpc)
    gmp//install/<gmp>$(gmp)/<mpfr-hidden>$(mpfr)/<mpc-hidden>$(mpc)
    mpfr//install/<gmp>$(gmp)/<mpfr>$(mpfr)/<mpc-hidden>$(mpc)
    boost//install/<gmp-hidden>$(gmp)/<mpfr-hidden>$(mpfr)/<mpc-hidden>$(mpc)/<icu4c>$(icu4c)/<mpi>$(mpi)/<openmpi>$(openmpi)/<boost>$(boost)
  : <triplet>$(triplet)
    <multilib>$(multilib)
    <gcc>$(gcc-snapshot)
  ;
explicit snapshot ;

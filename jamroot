import errors ;
import feature : feature ;
import modules ;
import option ;
import regex ;

path-constant INTRO_ROOT_DIR : . ;

import "$(INTRO_ROOT_DIR)/compilers" ;
"$(INTRO_ROOT_DIR)/compilers.init" "$(INTRO_ROOT_DIR)" ;


local .binutils-latest ;
local .gmp-latest ;
local .mpfr-latest ;
local .mpc-latest ;
local .ppl-latest ;
local .cloog-latest ;
local .icu4c-latest ;
local .openmpi-latest ;
local .boost-latest ;

rule get-boost-latest-version ( )
{
  if ! $(.boost-latest)
  {
    .boost-latest = [ SHELL "\"$(INTRO_ROOT_DIR)/boost-latest.sh\" || echo -n error" ] ;
    if $(.boost-latest) = error
    {
      errors.error "failed to extract Boost latest version." ;
    }
  }
  return $(.boost-latest) ;
}

rule get-binutils-latest-version ( )
{
  if ! $(.binutils-latest)
  {
    .binutils-latest = [ SHELL "\"$(INTRO_ROOT_DIR)/binutils-latest.sh\" || echo -n error" ] ;
    if $(.binutils-latest) = error
    {
      errors.error "failed to extract binutils latest version." ;
    }
  }
  return $(.binutils-latest) ;
}

rule get-gmp-latest-version ( )
{
  if ! $(.gmp-latest)
  {
    .gmp-latest = [ SHELL "\"$(INTRO_ROOT_DIR)/gmp-latest.sh\" || echo -n error" ] ;
    if $(.gmp-latest) = error
    {
      errors.error "failed to extract GMP latest version." ;
    }
  }
  return $(.gmp-latest) ;
}

rule get-mpfr-latest-version ( )
{
  if ! $(.mpfr-latest)
  {
    .mpfr-latest = [ SHELL "\"$(INTRO_ROOT_DIR)/mpfr-latest.sh\" || echo -n error" ] ;
    if $(.mpfr-latest) = error
    {
      errors.error "failed to extract MPFR latest version." ;
    }
  }
  return $(.mpfr-latest) ;
}

rule get-mpc-latest-version ( )
{
  if ! $(.mpc-latest)
  {
    .mpc-latest = [ SHELL "\"$(INTRO_ROOT_DIR)/mpc-latest.sh\" || echo -n error" ] ;
    if $(.mpc-latest) = error
    {
      errors.error "failed to extract MPC latest version." ;
    }
  }
  return $(.mpc-latest) ;
}

rule get-ppl-latest-version ( )
{
  if ! $(.ppl-latest)
  {
    .ppl-latest = [ SHELL "\"$(INTRO_ROOT_DIR)/ppl-latest.sh\" || echo -n error" ] ;
    if $(.ppl-latest) = error
    {
      errors.error "failed to extract PPL latest version." ;
    }
  }
  return $(.ppl-latest) ;
}

rule get-cloog-latest-version ( )
{
  if ! $(.cloog-latest)
  {
    .cloog-latest = [ SHELL "\"$(INTRO_ROOT_DIR)/cloog-latest.sh\" || echo -n error" ] ;
    if $(.cloog-latest) = error
    {
      errors.error "failed to extract CLooG latest version." ;
    }
  }
  return $(.cloog-latest) ;
}

rule get-icu4c-latest-version ( )
{
  if ! $(.icu4c-latest)
  {
    .icu4c-latest = [ SHELL "\"$(INTRO_ROOT_DIR)/icu4c-latest.sh\" || echo -n error" ] ;
    if $(.icu4c-latest) = error
    {
      errors.error "failed to extract ICU4C latest version." ;
    }
  }
  return $(.icu4c-latest) ;
}

rule get-openmpi-latest-version ( )
{
  if ! $(.openmpi-latest)
  {
    .openmpi-latest = [ SHELL "\"$(INTRO_ROOT_DIR)/openmpi-latest.sh\" || echo -n error" ] ;
    if $(.openmpi-latest) = error
    {
      errors.error "failed to extract OpenMPI latest version." ;
    }
  }
  return $(.openmpi-latest) ;
}



local binutils ;
local compilers ;
local gmp-versions ;
local mpfr-versions ;
local mpc-versions ;
local ppl-versions ;
local cloog-versions ;
local icu4c-versions ;
local openmpi-versions ;
local boost-versions ;


local triplet = [ option.get triplet ] ;
if ! $(triplet)
{
  errors.error '--triplet' option not specified. ;
}
if ! $(triplet) in i686-pc-linux-gnu i686-pc-cygwin i686-w64-mingw32 x86_64-unknown-linux-gnu x86_64-w64-mingw32
{
  errors.error '$(triplet)' is a wrong value for '--triplet' option ;
}
ECHO triplet... $(triplet) ;


local prefix = [ option.get prefix ] ;
if ! $(prefix)
{
  errors.error ERROR: '--prefix' option not specified. ;
}
ECHO prefix... $(prefix) ;


binutils = [ option.get with-binutils : latest : IMPLIED ] ;
if $(binutils) = IMPLIED
{
  errors.error no value specified for `--with-binutils'. ;
}
if $(binutils) = latest
{
  binutils = [ get-binutils-latest-version ] ;
}
if ! [ regex.match "^([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)$" : "$(binutils)" : 1 ]
{
  errors.error an invalid value `$(binutils)' for `--with-binutils'. ;
}
ECHO binutils... $(binutils) ;


local gmp-for-gcc = [ option.get with-gmp-for-gcc : latest : IMPLIED ] ;
if $(gmp-for-gcc) = IMPLIED
{
  errors.error "`--with-gmp-for-gcc' should be specified with a value." ;
}
if $(gmp-for-gcc) = latest
{
  gmp-for-gcc = [ get-gmp-latest-version ] ;
}
if ! [ regex.match "^([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)$" : "$(gmp-for-gcc)" : 1 ]
{
  errors.error "an invalid value `$(gmp-for-gcc)' for `--with-gmp-for-gcc'." ;
}
if ! $(gmp-for-gcc) in $(gmp-versions)
{
  gmp-versions += $(gmp-for-gcc) ;
}
ECHO gmp-for-gcc... $(gmp-for-gcc) ;


local mpfr-for-gcc = [ option.get with-mpfr-for-gcc : latest : IMPLIED ] ;
if $(mpfr-for-gcc) = IMPLIED
{
  errors.error "`--with-mpfr-for-gcc' should be specified with a value." ;
}
if $(mpfr-for-gcc) = latest
{
  mpfr-for-gcc = [ get-mpfr-latest-version ] ;
}
if ! [ regex.match "^([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)$" : "$(mpfr-for-gcc)" : 1 ]
{
  errors.error "an invalid value `$(mpfr-for-gcc)' for `--with-mpfr-for-gcc'." ;
}
if ! $(mpfr-for-gcc) in $(mpfr-versions)
{
  mpfr-versions += $(mpfr-for-gcc) ;
}
ECHO mpfr-for-gcc... $(mpfr-for-gcc) ;


local mpc-for-gcc = [ option.get with-mpc-for-gcc : latest : IMPLIED ] ;
if $(mpc-for-gcc) = IMPLIED
{
  errors.error "`--with-mpc-for-gcc' should be specified with a value." ;
}
if ! $(mpc-for-gcc) || $(mpc-for-gcc) = latest
{
  mpc-for-gcc = [ get-mpc-latest-version ] ;
}
if ! [ regex.match "^([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)$" : "$(mpc-for-gcc)" : 1 ]
{
  errors.error "an invalid value `$(mpc-for-gcc)' for `--with-mpc-for-gcc'." ;
}
if ! $(mpc-for-gcc) in $(mpc-versions)
{
  mpc-versions += $(mpc-for-gcc) ;
}
ECHO mpc-for-gcc... $(mpc-for-gcc) ;


local ppl-for-gcc = [ option.get with-ppl-for-gcc : latest : IMPLIED ] ;
if $(ppl-for-gcc) = IMPLIED
{
  errors.error "`--with-ppl-for-gcc' should be specified with a value." ;
}
if $(ppl-for-gcc) = latest
{
  ppl-for-gcc = [ get-ppl-latest-version ] ;
}
if ! [ regex.match "^([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)$" : "$(ppl-for-gcc)" : 1 ]
{
  errors.error "an invalid value `$(ppl-for-gcc)' for `--with-ppl-for-gcc'." ;
}
if ! $(ppl-for-gcc) in $(ppl-versions)
{
  ppl-versions += $(ppl-for-gcc) ;
}
ECHO ppl-for-gcc... $(ppl-for-gcc) ;


local cloog-for-gcc = [ option.get with-cloog-for-gcc : latest : IMPLIED ] ;
if $(cloog-for-gcc) = IMPLIED
{
  errors.error "`--with-cloog-for-gcc' should be specified with a value." ;
}
if $(cloog-for-gcc) = latest
{
  cloog-for-gcc = [ get-cloog-latest-version ] ;
}
if ! [ regex.match "^([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)$" : "$(cloog-for-gcc)" : 1 ]
{
  errors.error "an invalid value `$(cloog-for-gcc)' for `--with-cloog-for-gcc'." ;
}
if ! $(cloog-for-gcc) in $(cloog-versions)
{
  cloog-versions += $(cloog-for-gcc) ;
}
ECHO cloog-for-gcc... $(cloog-for-gcc) ;


local gcc-for-clang = [ option.get with-gcc-for-clang : : IMPLIED ] ;
if $(gcc-for-clang) = IMPLIED
{
  errors.error "`--with-gcc-for-clang' should be specified with a value." ;
}
if $(gcc-for-clang)
{
  if ! [ "$(INTRO_ROOT_DIR)/compilers.is-valid" "$(gcc-for-clang)" ]
  {
    errors.error "an invalid value `$(gcc-for-clang' for `--with-gcc-for-clang'." ;
  }
  ECHO gcc-for-clang... $(gcc-for-clang) ;
  if ! $(gcc-for-clang) in $(compilers)
  {
    compilers += $(gcc-for-clang) ;
  }
}


local enabled-compilers = [ option.get enable-compilers : : IMPLIED ] ;
if $(enabled-compilers) = IMPLIED
{
  errors.error `--enable-compilers' should be specified with a value. ;
}
enabled-compilers = [ regex.split "$(enabled-compilers)" "," ] ;
for local enabled-compiler in $(enabled-compilers)
{
  if ! [ "$(INTRO_ROOT_DIR)/compilers.is-valid" "$(enabled-compiler)" ]
  {
    errors.error an invalid value `$(enabled-compiler)' for `--enable-compilers' option. ;
  }
  ECHO "enabled-compiler... $(enabled-compiler)" ;
  if ! $(enabled-compiler) in $(compilers)
  {
    compilers += $(enabled-compiler) ;
  }
  if [ "$(INTRO_ROOT_DIR)/compilers.is-clang" $(enabled-compiler) ]
  {
    if ! $(gcc-for-clang)
    {
      gcc-for-clang = gcc-current ;
      ECHO gcc-for-clang... $(gcc-for-clang) (implied by `--enable-compilers') ;
      if ! $(gcc-for-clang) in $(compilers)
      {
        compilers += $(gcc-for-clang) ;
      }
    }
  }
}


local multilib = [ option.get enable-multilib : no : yes ] ;
if ! $(multilib) in no yes
{
  errors.error "ERROR: `$(multilib)' is a wrong value for `--enable-multilib' option." ;
}
if [ option.get disable-multilib : INUMIMI : INUMIMI ] != INUMIMI
{
  errors.error "ERROR: No value for `--disable-multilib' is allowed." ;
}
if $(multilib) = yes && [ option.get disable-multilib : : INUMIMI ] = INUMIMI
{
  errors.error "ERROR: both `--enable-multilib' and `--disable-multilib' are specified." ;
}
ECHO multilib... $(multilib) ;


local gmp = [ option.get enable-gmp : : latest ] ;
if $(gmp) = latest
{
  gmp = [ get-gmp-latest-version ] ;
}
if $(gmp)
{
  if ! [ regex.match "^([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)$" : "$(gmp)" : 1 ]
  {
    errors.error an invalid value `$(gmp)' for `--enable-gmp'. ;
  }
  if ! $(gmp) in $(gmp-versions)
  {
    gmp-versions += $(gmp) ;
  }
  ECHO gmp... $(gmp) ;
}


local mpfr = [ option.get enable-mpfr : : latest ] ;
if $(mpfr) = latest
{
  mpfr = [ get-mpfr-latest-version ] ;
}
if $(mpfr)
{
  if ! [ regex.match "^([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)$" : "$(mpfr)" : 1 ]
  {
    errors.error an invalid value `$(mpfr)' for `--enable-mpfr'. ;
  }
  if ! $(mpfr) in $(mpfr-versions)
  {
    mpfr-versions += $(mpfr) ;
  }
  ECHO mpfr... $(mpfr) ;
  if ! $(gmp)
  {
    gmp = [ get-gmp-latest-version ] ;
    if ! $(gmp) in $(gmp-versions)
    {
      gmp-versions += $(gmp) ;
    }
    ECHO gmp... $(gmp) (implied by '--enable-mpfr') ;
  }
}


local mpc = [ option.get enable-mpc : : latest ] ;
if $(mpc) = latest
{
  mpc = [ get-mpc-latest-version ] ;
}
if $(mpc)
{
  if ! [ regex.match "^([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)$" : "$(mpc)" : 1 ]
  {
    errors.error an invalid value `$(mpc)' for `--enable-mpc'. ;
  }
  if ! $(mpc) in $(mpc-versions)
  {
    mpc-versions += $(mpc) ;
  }
  ECHO mpc... $(mpc) ;
  if ! $(gmp)
  {
    gmp = [ get-gmp-latest-version ] ;
    if ! $(gmp) in $(gmp-versions)
    {
      gmp-versions += $(gmp) ;
    }
    ECHO gmp... $(gmp) (implied by '--enable-mpc') ;
  }
  if ! $(mpfr)
  {
    mpfr = [ get-mpfr-latest-version ] ;
    if ! $(mpfr) in $(mpfr-versions)
    {
      mpfr-versions += $(mpfr) ;
    }
    ECHO mpfr... $(mpfr) (implied by `--enable-mpc') ;
  }
}


local ppl = [ option.get enable-ppl : : latest ] ;
if $(ppl) = latest
{
  ppl = [ get-ppl-latest-version ] ;
}
if $(ppl)
{
  if ! [ regex.match "^([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)$" : "$(ppl)" : 1 ]
  {
    errors.error "an invalid value `$(ppl)' for `--enable-ppl'." ;
  }
  if ! $(ppl) in $(ppl-versions)
  {
    ppl-versions += $(ppl) ;
  }
  ECHO ppl... $(ppl) ;
  if ! $(gmp)
  {
    gmp = [ get-gmp-latest-version ] ;
    if ! $(gmp) in $(gmp-versions)
    {
      gmp-versions += $(gmp) ;
    }
    ECHO gmp... $(gmp) (implied by --enable-ppl) ;
  }
}


local cloog = [ option.get enable-cloog : : latest ] ;
if $(cloog) = latest
{
  cloog = [ get-cloog-latest-version ] ;
}
if $(cloog)
{
  if ! [ regex.match "^([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)$" : "$(cloog)" : 1 ]
  {
    errors.error "an invalid value `$(cloog)' for `--enable-cloog'." ;
  }
  if ! $(cloog) in $(cloog-versions)
  {
    cloog-versions += $(cloog) ;
  }
  ECHO cloog... $(cloog) ;
  if ! $(gmp)
  {
    gmp = [ get-gmp-latest-version ] ;
    if ! $(gmp) in $(gmp-versions)
    {
      gmp-versions += $(gmp) ;
    }
    ECHO gmp... $(gmp) (implied by --enable-cloog) ;
  }
}


local icu4c = [ option.get with-icu4c : latest : latest ] ;
if $(icu4c) = latest
{
  icu4c = [ get-icu4c-latest-version ] ;
}
if ! [ regex.match "^([0-9]+(\\.[0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)?)$" : $(icu4c) : 1 ]
{
  errors.error "an invalid value `$(icu4c)' for `--with-icu4c'." ;
}
if ! $(icu4c) in $(icu4c-versions)
{
  icu4c-versions += $(icu4c) ;
}
ECHO icu4c... $(icu4c) ;


local mpi = [ option.get with-mpi : unspecified : IMPLIED ] ;
if $(mpi) = IMPLIED
{
  errors.error "ERROR: No value is specified for `--with-mpi' option." ;
}
if ! $(mpi) in openmpi mpich2 unspecified
{
  errors.error "ERROR: `$(mpi)' is a wrong value for `--with-mpi' option.\n"
               "             Allowed values are `openmpi' and `mpich2'." ;
}
ECHO mpi... $(mpi) ;


local boost = [ option.get enable-boost : latest : latest ] ;
if $(boost) = latest
{
  boost = [ get-boost-latest-version ] ;
}
if ! [ regex.match "^([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)$" : "$(boost)" : 1 ]
{
  errors.error "an invalid value `$(boost)' for `--enable-boost'." ;
}
if ! $(boost) in $(boost-versions)
{
  boost-versions += $(boost) ;
}
if $(boost-versions)
{
  ECHO boost-versions... $(boost-versions) ;
}
else
{
  ECHO boost-versions... N/A ;
}


local clang = [ option.get enable-clang : yes : yes ] ;
if ! $(clang) in no yes
{
  errors.error "ERROR: `$(clang)' is a wrong value for `--enable-clang' option.\n"
               "             Allowed values are `yes' and `no'." ;
}
if [ option.get disable-clang : IMPLIED : IMPLIED ] != IMPLIED
{
  errors.error "ERROR: No value for `--disable-clang' is allowed." ;
}
if $(clang) = yes && [ option.get disable-clang : : IMPLIED ] = IMPLIED
{
  errors.error "ERROR: both `--enable-clang' and `--disable-clang' are specified." ;
}
ECHO clang... $(clang) ;


local concurrency = [ option.get concurrency : 1 : IMPLIED ] ;
if $(concurrency) = IMPLIED
{
  errors.error "ERROR: No value is specified for `--concurrency' option." ;
}
if ! [ regex.match "(^[1-9][0-9]*)" : "$(concurrency)" : 1 ] {
  errors.error "`$(concurrency)' is a wrong value for `--concurrency' option.'" ;
}
ECHO concurrency... $(concurrency) ;


local awacs = [ option.get with-awacs : : IMPLIED ] ;
if $(awacs) = IMPLIED
{
  errors.error "No value for `--with-awacs' option is specified." ;
}
if $(awacs)
{
  ECHO awacs... $(awacs) ;
}
else
{
  ECHO awacs... N/A ;
}


local stream = [ option.get with-stream : : IMPLIED ] ;
if $(stream) = IMPLIED
{
  errors.error "No value for `--with-stream' option is specified." ;
}
if $(stream)
{
  ECHO stream... $(stream) ;
}
else
{
  ECHO stream... N/A ;
}





project intro : build-dir bin ;


constant TRIPLET : $(triplet) ;
ECHO TRIPLET... $(TRIPLET) ;

constant PREFIX : $(prefix) ;
ECHO PREFIX... $(PREFIX) ;

if $(binutils)
{
  constant BINUTILS : $(binutils) ;
  ECHO BINUTILS... $(BINUTILS) ;
}
else
{
  errors.error unimplemented. Check 'gcc/jamfile'. ;
}

if $(gmp-for-gcc)
{
  constant GMP_FOR_GCC : $(gmp-for-gcc) ;
  ECHO GMP_FOR_GCC... $(GMP_FOR_GCC) ;
}

if $(mpfr-for-gcc)
{
  constant MPFR_FOR_GCC : $(mpfr-for-gcc) ;
  ECHO MPFR_FOR_GCC... $(MPFR_FOR_GCC) ;
}

if $(mpc-for-gcc)
{
  constant MPC_FOR_GCC : $(mpc-for-gcc) ;
  ECHO MPC_FOR_GCC... $(MPC_FOR_GCC) ;
}

if $(ppl-for-gcc)
{
  constant PPL_FOR_GCC : $(ppl-for-gcc) ;
  ECHO PPL_FOR_GCC... $(PPL_FOR_GCC) ;
}

if $(cloog-for-gcc)
{
  constant CLOOG_FOR_GCC : $(cloog-for-gcc) ;
  ECHO CLOOG_FOR_GCC... $(CLOOG_FOR_GCC) ;
}

if $(gcc-for-clang)
{
  constant GCC_FOR_CLANG : $(gcc-for-clang) ;
  ECHO GCC_FOR_CLANG... $(GCC_FOR_CLANG) ;
}

constant COMPILERS : $(compilers) ;
ECHO COMPILERS... $(COMPILERS) ;

if $(gmp-versions)
{
  constant GMP_VERSIONS : $(gmp-versions) ;
  ECHO GMP_VERSIONS... $(GMP_VERSIONS) ;
}

if $(mpfr-versions)
{
  constant MPFR_VERSIONS : $(mpfr-versions) ;
  ECHO MPFR_VERSIONS... $(MPFR_VERSIONS) ;
}

if $(mpc-versions)
{
  constant MPC_VERSIONS : $(mpc-versions) ;
  ECHO MPC_VERSIONS... $(MPC_VERSIONS) ;
}

if $(ppl-versions)
{
  constant PPL_VERSIONS : $(ppl-versions) ;
  ECHO PPL_VERSIONS... $(PPL_VERSIONS) ;
}

if $(cloog-versions)
{
  constant CLOOG_VERSIONS : $(cloog-versions) ;
  ECHO CLOOG_VERSIONS... $(CLOOG_VERSIONS) ;
}

if $(icu4c-versions)
{
  constant ICU4C_VERSIONS : $(icu4c-versions) ;
  ECHO ICU4C_VERSIONS... $(ICU4C_VERSIONS) ;
}

if $(boost-versions)
{
  constant BOOST_VERSIONS : $(boost-versions) ;
  ECHO BOOST_VERSIONS... $(BOOST_VERSIONS) ;
}

constant CONCURRENCY : $(concurrency) ;
ECHO CONCURRENCY... $(CONCURRENCY) ;

if $(awacs)
{
  constant AWACS : $(awacs) ;
  ECHO AWACS... $(AWACS) ;
}
else
{
  constant AWACS : "cat > /dev/null" ;
  ECHO AWACS... N/A ;
}

if $(stream)
{
  constant STREAM : $(stream) ;
  ECHO STREAM... $(STREAM) ;
}
else {
  constant STREAM : "" ;
  ECHO STREAM... N/A ;
}



feature triplet : unspecified i686-pc-linux-gnu i686-pc-cygwin i686-w64-mingw32 x86_64-unknown-linux-gnu x86_64-w64-mingw32 : propagated ;

feature multilib        : unspecified no yes            : propagated            ;
feature multilib-hidden : [ feature.values <multilib> ] : propagated incidental ;

feature binutils        : unspecified $(binutils)       : propagated            ;
feature binutils-hidden : [ feature.values <binutils> ] : propagated incidental ;

feature gmp        : unspecified $(gmp-versions) : propagated            ;
feature gmp-hidden : [ feature.values <gmp> ]    : propagated incidental ;

feature mpfr        : unspecified $(mpfr-versions) : propagated            ;
feature mpfr-hidden : [ feature.values <mpfr> ]    : propagated incidental ;

feature mpc        : unspecified $(mpc-versions) : propagated            ;
feature mpc-hidden : [ feature.values <mpc> ]    : propagated incidental ;

feature ppl        : unspecified $(ppl-versions) : propagated            ;
feature ppl-hidden : [ feature.values <ppl> ]    : propagated incidental ;

feature cloog        : unspecified $(cloog-versions) : propagated            ;
feature cloog-hidden : [ feature.values <cloog> ]    : propagated incidental ;

feature compiler        : unspecified $(compilers) : propagated            ;
feature compiler-hidden : [ feature.values <compiler> ] : propagated incidental ;

feature icu4c        : unspecified $(icu4c-versions) : propagated            ;
feature icu4c-hidden : [ feature.values <icu4c> ]    : propagated incidental ;

feature mpi        : unspecified openmpi mpich2 : propagated            ;
feature mpi-hidden : [ feature.values <mpi> ]   : propagated incidental ;

local openmpi = unspecified ;
if $(mpi) = openmpi {
  openmpi = [ SHELL "\"$(INTRO_ROOT_DIR)/openmpi-latest.sh\" || echo -n 'error'" ] ;
  if [ regex.match "^([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)$" : $(openmpi) : 1 ]
  {
    constant OPENMPI : $(openmpi) ;
    constant OPENMPI_VERSIONS : $(openmpi) ;
    ECHO OPENMPI_VERSIONS... $(OPENMPI_VERSIONS) ;
    feature openmpi        : unspecified $(openmpi)       : propagated            ;
    feature openmpi-hidden : [ feature.values <openmpi> ] : propagated incidental ;
  }
  else
  {
    errors.error "ERROR: failed to extract OpenMPI latest version." ;
  }
}
else
{
  feature openmpi        : unspecified                  : propagated            ;
  feature openmpi-hidden : [ feature.values <openmpi> ] : propagated incidental ;
}

feature boost        : unspecified $(boost-versions)       : propagated            ;
feature boost-hidden : [ feature.values <boost> ] : propagated incidental ;

if $(clang) = yes {
  clang = "clang//install/<multilib-hidden>$(multilib)" ;
}
else {
  clang = ;
}

if $(triplet) = i686-pc-cygwin && $(clang) {
  errors.error "Sorry, but there is a problem in building Clang by the GCC current release on i686-pc-cygwin." ;
}

for local enabled-compiler in $(enabled-compilers)
{
  if [ "$(INTRO_ROOT_DIR)/compilers.is-gcc" "$(enabled-compiler)" ]
  {
    for local boost in $(boost-versions)
    {
      alias $(enabled-compiler)
      : gcc//install/<multilib>$(multilib)
        gmp//install/<multilib-hidden>$(multilib)/<gmp>$(gmp)
        mpfr//install/<multilib-hidden>$(multilib)/<gmp>$(gmp)/<mpfr>$(mpfr)
        mpc//install/<multilib-hidden>$(multilib)/<gmp>$(gmp)/<mpfr>$(mpfr)/<mpc>$(mpc)
        ppl//install/<multilib-hidden>$(multilib)/<gmp>$(gmp)/<ppl>$(ppl)
        cloog//install/<multilib-hidden>$(multilib)/<gmp>$(gmp)/<cloog>$(cloog)
        icu4c//install/<multilib-hidden>$(multilib)/<icu4c>$(icu4c)
        openmpi//install/<multilib-hidden>$(multilib)/<mpi>openmpi/<openmpi>$(OPENMPI)
        boost//install/<multilib-hidden>$(multilib)/<icu4c>$(icu4c)/<mpi>openmpi/<openmpi>$(OPENMPI)/<boost>$(boost)
        $(clang)
      : <triplet>$(triplet)
        <compiler>$(enabled-compiler)
      ;
    }
  }
  else if [ "$(INTRO_ROOT_DIR)/compilers.is-clang" "$(enabled-compiler)" ]
  {
    alias $(enabled-compiler)
      : clang//install/<multilib-hidden>$(multilib)
        gmp//install/<multilib-hidden>$(multilib)/<gmp>$(gmp)
        mpfr//install/<multilib-hidden>$(multilib)/<gmp>$(gmp)/<mpfr>$(mpfr)
        mpc//install/<multilib-hidden>$(multilib)/<gmp>$(gmp)/<mpfr>$(mpfr)/<mpc>$(mpc)
        ppl//install/<multilib-hidden>$(multilib)/<gmp>$(gmp)/<ppl>$(ppl)
        cloog//install/<multilib-hidden>$(multilib)/<gmp>$(gmp)/<cloog>$(cloog)
        icu4c//install/<multilib-hidden>$(multilib)/<icu4c>$(icu4c)
        openmpi//install/<multilib-hidden>$(multilib)/<mpi>openmpi/<openmpi>$(OPENMPI)
        boost//install/<multilib-hidden>$(multilib)/<icu4c>$(icu4c)/<mpi>openmpi/<openmpi>$(OPENMPI)/<boost>$(boost)
      : <triplet>$(triplet)
        <compiler>$(enabled-compiler)
      ;
  }
  else
  {
    errors.error "an internal error." ;
  }
}

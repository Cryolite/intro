project intro/gmp ;

import alias ;
import errors ;
import feature ;
import make ;
import path ;
import regex ;
import "$(INTRO_ROOT_DIR)/compilers"
  : is-gcc
    is-clang
    is-icc
    get-full-prefix
    get-triplets
    get-cc
    get-cflags
    get-cxx
    get-cxxflags
    get-environment-commands
    get-property-dump-commands
  ;

.here = [ regex.match "Jamfile<(.*)>" : "$(__name__)" : 1 ] ;
.here = [ path.make "$(.here)" ] ;
.here-relative = [ path.relative "$(.here)" "$(INTRO_ROOT_DIR)" ] ;


rule compiler-dep-req ( properties * )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  local result ;
  if [ is-gcc "$(compiler)" ] {
    result += "<source>../gcc//install" ;
  }
  else if [ is-clang "$(compiler)" ] {
    result += "<source>../gcc//install" ;
    result += "<source>../clang//install" ;
  }
  else if [ is-icc "$(compiler)" ] {
    result += "<source>../gcc//install" ;
    result += "<source>../icc//install" ;
  }
  else {
    errors.error "an internal error." ;
  }
  return $(result) ;
}

alias compiler-dep : : <conditional>@compiler-dep-req ;
explicit compiler-dep ;


rule srcdir-timestamp-req ( properties * )
{
  local version = [ feature.get-values <gmp-hidden> : $(properties) ] ;
  return "<source>$(INTRO_ROOT_DIR)/gmp-$(version)/2bf4ddbc-6fd0-44c5-82ce-d66a6eb45809" ;
}

alias srcdir-timestamp : : <conditional>@srcdir-timestamp-req ;
explicit srcdir-timestamp ;


rule location-conditional ( properties * )
{
  local full-prefix = [ get-full-prefix "$(PREFIX)" : $(properties) ] ;
  local includedir = "$(full-prefix)/include" ;
  return "<location>$(includedir)" ;
}

make gmp.h
  : compiler-dep
    srcdir-timestamp
  : @make-install
  : $(USE_COMPILER)
    $(USE_MULTITARGET)
    $(USE_GMP)
    <conditional>@location-conditional
  ;
explicit gmp.h ;

rule make-install ( targets * : sources * : properties * )
{
  HERE on $(targets) = [ path.native "$(.here)" ] ;
  HERE_RELATIVE on $(targets) = [ path.native "$(.here-relative)" ] ;

  # Sets the path to the source directory.
  local version = [ feature.get-values <gmp> : $(properties) ] ;
  local srcdir = "$(INTRO_ROOT_DIR)/gmp-$(version)" ;
  SRCDIR on $(targets) = [ path.native "$(srcdir)" ] ;

  # Sets the path to `objdir`.
  local objdir = "$(INTRO_ROOT_DIR)/objdir" ;
  local objdir-native = [ path.native "$(objdir)" ] ;
  OBJDIR on $(targets) = "$(objdir-native)" ;

  OPTIONS on $(targets) = ;

  # Sets `--prefix' option for `configure' script.
  local full-prefix = [ get-full-prefix "$(PREFIX)" : $(properties) ] ;
  local full-prefix-native = [ path.native "$(full-prefix)" ] ;
  OPTIONS on $(targets) += "--prefix='$(full-prefix-native)'" ;

  # Sets `--build' and `--host' options for `configure' script.
  local triplets = [ get-triplets $(properties) ] ;
  local build-triplet = "$(triplets[1])" ;
  local host-triplet = "$(triplets[2])" ;
  BUILD_TRIPLET on $(targets) = "$(build-triplet)" ;
  HOST_TRIPLET on $(targets) = "$(host-triplet)" ;
  OPTIONS on $(targets) += "--build=$(build-triplet)" ;
  OPTIONS on $(targets) += "--host=$(host-triplet)" ;

  local variant = [ feature.get-values <variant> : $(properties) ] ;
  switch "$(variant)" {
  case "debug" :
    OPTIONS on $(targets) += "--enable-assert" ;
  case "release" :
    # Do nothing.
  case "profile" :
    OPTIONS on $(targets) += "--enable-profiling=gprof" ;
  case "" :
    errors.error "the value for `<variant>' is empty" ;
  case "*" :
    errors.error "<variant>$(variant): an unknown property" ;
  }

  # C++ support for GMP is disabled because it
  #   - results in build errors with GCC 4.9,
  #   - results in an error during `make check` with GCC and LTO, and
  #   - can be replaced by `Boost.Multiprecision`, which adopts more modern
  #     C++ programming styles.
  #OPTIONS on $(targets) += "--enable-cxx" ;
  OPTIONS on $(targets) += "--disable-cxx" ;

  # Sets the link variants for `configure' script.
  local link = [ feature.get-values <link> : $(properties) ] ;
  switch "$(link)" {
  case "shared" :
    OPTIONS on $(targets) += "--enable-shared" ;
    OPTIONS on $(targets) += "--disable-static" ;
  case "static" :
    OPTIONS on $(targets) += "--disable-shared" ;
    OPTIONS on $(targets) += "--enable-static" ;
    OPTIONS on $(targets) += "--without-pic" ;
  case "" :
    errors.error "the value for `<link>' is empty" ;
  case "*" :
    errors.error "<link>$(link): an unknown property" ;
  }

  local cc = [ get-cc "$(PREFIX)" : $(properties) ] ;
  local cc-native = [ path.native "$(cc)" ] ;
  OPTIONS on $(targets) += "CC='$(cc-native)'" ;

  local cflags = [ get-cflags $(properties) ] ;
  if "$(cflags)" {
    cflags = "$(cflags) -pedantic" ;
    CFLAGS on $(targets) = "$(cflags)" ;
    OPTIONS on $(targets) += "CFLAGS='@$(objdir-native)/cflags'" ;
  }

  local cxx = [ get-cxx "$(PREFIX)" : $(properties) ] ;
  local cxx-native = [ path.native "$(cxx)" ] ;
  OPTIONS on $(targets) += "CXX='$(cxx-native)'" ;

  local cxxflags = [ get-cxxflags $(properties) ] ;
  if "$(cxxflags)" {
    cxxflags = "$(cxxflags) -pedantic" ;
    CXXFLAGS on $(targets) = "$(cxxflags)" ;
    OPTIONS on $(targets) += "CXXFLAGS='@$(objdir-native)/cxxflags'" ;
  }

  local environment-commands = [ get-environment-commands "$(PREFIX)" : $(properties) ] ;
  ENVIRONMENT_COMMANDS on $(targets) = "$(environment-commands)" ;

  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions make-install
{
  bash -s << 'EOS'
  exec >> '$(STDOUT_)' 2>> '$(STDERR_)'
$(ENVIRONMENT_COMMANDS)
$(PROPERTY_DUMP_COMMANDS)
  LINENO_ADJ=`grep -Fn 10695e72-ed0e-42b7-8180-f13e9e93e476 '$(HERE)/jamfile' | grep -Eo '^[[:digit:]]+'`
  LINENO_ADJ=`expr $LINENO_ADJ - $LINENO + 1`
  PS4='+$(HERE_RELATIVE)/jamfile:`expr $LINENO + $LINENO_ADJ`: '
  set -ex

  rm -rf '$(OBJDIR)'

  cleanup ()
  {
    if [ -d '$(OBJDIR)' ]; then
      mv -n '$(OBJDIR)' "$(INTRO_ROOT_DIR)/objdir_$$"
    fi
  }
  trap cleanup ERR HUP INT QUIT TERM

  # Creates `objdir`.
  ( cd '$(INTRO_ROOT_DIR)' && mkdir objdir )

  # Makes sure that the hacked configure script is restored.
  [ ! -e '$(SRCDIR)/real-configure' ]

  [ -x '$(SRCDIR)/configure' ]
  [ -x '$(SRCDIR)/config.sub' ]
  [ `'$(SRCDIR)/config.sub' $(BUILD_TRIPLET)` = $(BUILD_TRIPLET) ]
  [ `'$(SRCDIR)/config.sub' $(HOST_TRIPLET)` = $(HOST_TRIPLET) ]

  ( cd '$(OBJDIR)' && echo -n '$(CFLAGS)' > cflags )
  ( cd '$(OBJDIR)' && echo -n '$(CXXFLAGS)' > cxxflags )

  # In some environments, LeakSanitizer refuses a bad-mannered configure
  # test code that leaves a chunk of memory allocated but not freed.
  # `LSAN_OPTIONS=exitcode=0` in the following line is a workaround for that
  # case.
  ( cd '$(OBJDIR)' && LSAN_OPTIONS=exitcode=0 '$(SRCDIR)/configure' $(OPTIONS) )

  # Checks the creation of `Makefile`.
  [ -f '$(OBJDIR)/Makefile' ]

  ( cd '$(OBJDIR)' && make --jobs=$(CONCURRENCY) )

  ( cd '$(OBJDIR)' && make --jobs=$(CONCURRENCY) check )

  ( cd '$(OBJDIR)' && make install )

  # Cleans up `objdir`.
  rm -r '$(OBJDIR)'

  [ -f '$(<)' ]
EOS
}


alias install : gmp.h ;
explicit install ;

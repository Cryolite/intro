project intro/gcc ;

import alias ;
import errors ;
import feature ;
import make ;
import regex ;


rule assert-specified ( feature : properties * )
{
  local val = [ feature.get-values $(feature) : $(properties) ] ;
  if $(val) = unspecified {
    errors.error $(feature) is not specified for GCC build. ;
  }
}

rule assert-unspecified ( feature : properties * )
{
  local val = [ feature.get-values $(feature) : $(properties) ] ;
  if $(val) != unspecified {
    errors.error $(feature) is not valid for GCC build. ;
  }
}


make download : : @download-gcc ;
explicit download ;

rule download-gcc ( targets * : sources * : properties * )
{
  assert-unspecified <triplet>         : $(properties) ;
  assert-unspecified <multilib>        : $(properties) ;
  assert-unspecified <multilib-hidden> : $(properties) ;
  assert-unspecified <gmp>             : $(properties) ;
  assert-unspecified <gmp-hidden>      : $(properties) ;
  assert-unspecified <mpfr>            : $(properties) ;
  assert-unspecified <mpfr-hidden>     : $(properties) ;
  assert-unspecified <mpc>             : $(properties) ;
  assert-unspecified <mpc-hidden>      : $(properties) ;
  assert-specified   <gcc>             : $(properties) ;
  assert-unspecified <gcc-hidden>      : $(properties) ;
  assert-unspecified <icu4c>           : $(properties) ;
  assert-unspecified <icu4c-hidden>    : $(properties) ;
  assert-unspecified <mpi>             : $(properties) ;
  assert-unspecified <mpi-hidden>      : $(properties) ;
  assert-unspecified <openmpi>         : $(properties) ;
  assert-unspecified <openmpi-hidden>  : $(properties) ;
  assert-unspecified <boost>           : $(properties) ;
  assert-unspecified <boost-hidden>    : $(properties) ;
  local version = [ feature.get-values <gcc> : $(properties) ] ;
  if [ regex.match "^([0123456789]+\\.[0123456789]+-[0123456789][0123456789][0123456789][0123456789][0123456789][0123456789][0123456789][0123456789])$" : $(version) : 1 ] {
    URL on $(targets) = http://ftp.tsukuba.wide.ad.jp/software/gcc/snapshots/$(version)/gcc-$(version).tar.bz2 ;
  }
  else {
    URL on $(targets) = http://ftp.tsukuba.wide.ad.jp/software/gcc/releases/gcc-$(version)/gcc-$(version).tar.bz2 ;
  }
  TARBALL_GZ on $(targets) = $(INTRO_ROOT_DIR)/gcc-$(version).tar.gz ;
  TARBALL_BZ2 on $(targets) = $(INTRO_ROOT_DIR)/gcc-$(version).tar.bz2 ;
}
actions download-gcc
{
  rm -f "$(<)" || exit $?
  if [ ! -f "$(TARBALL_GZ)" -a ! -f "$(TARBALL_BZ2)" ]; then
    if [ -n "$(STREAM)" ]; then
      ( cd "$(TARBALL_BZ2:D)" && wget -- '$(URL)' >> "$(STREAM)" 2>&1 )
    else
      ( cd "$(TARBALL_BZ2:D)" && wget --quiet -- '$(URL)' )
    fi
    if [ $? -ne 0 ]; then
      echo "ERROR: failed to download GCC tarball." 1>&2
      /bin/echo -n "ERROR: failed to download GCC tarball." | $(AWACS)
      exit 1
    fi
    [ -f "$(TARBALL_GZ)" -o -f "$(TARBALL_BZ2)" ] || exit $?
  fi
  [ -e "$(<)" ] && exit 1
  touch "$(<)"
}


make expand : download : @expand-gcc ;
explicit expand ;

rule expand-gcc ( targets * : sources * : properties * )
{
  assert-unspecified <triplet>         : $(properties) ;
  assert-unspecified <multilib>        : $(properties) ;
  assert-unspecified <multilib-hidden> : $(properties) ;
  assert-unspecified <gmp>             : $(properties) ;
  assert-unspecified <gmp-hidden>      : $(properties) ;
  assert-unspecified <mpfr>            : $(properties) ;
  assert-unspecified <mpfr-hidden>     : $(properties) ;
  assert-unspecified <mpc>             : $(properties) ;
  assert-unspecified <mpc-hidden>      : $(properties) ;
  assert-specified   <gcc>             : $(properties) ;
  assert-unspecified <gcc-hidden>      : $(properties) ;
  assert-unspecified <icu4c>           : $(properties) ;
  assert-unspecified <icu4c-hidden>    : $(properties) ;
  assert-unspecified <mpi>             : $(properties) ;
  assert-unspecified <mpi-hidden>      : $(properties) ;
  assert-unspecified <openmpi>         : $(properties) ;
  assert-unspecified <openmpi-hidden>  : $(properties) ;
  assert-unspecified <boost>           : $(properties) ;
  assert-unspecified <boost-hidden>    : $(properties) ;
  if ! $(sources[1]) {
    errors.error "ERROR: wrong number of sources." ;
  }
  if $(sources[2]) {
    errors.error "ERROR: wrong number of sources." ;
  }
  local version = [ feature.get-values <gcc> : $(properties) ] ;
  VERSION on $(targets) = $(version) ;
  TARBALL_GZ on $(targets) = $(INTRO_ROOT_DIR)/gcc-$(version).tar.gz ;
  TARBALL_BZ2 on $(targets) = $(INTRO_ROOT_DIR)/gcc-$(version).tar.bz2 ;
  DEST_DIR on $(targets) = $(INTRO_ROOT_DIR)/gcc-$(version) ;
}
actions expand-gcc
{
  rm -f "$(<)" || exit $?
  [ -f "$(>)" ] || exit $?
  ( cd "$(INTRO_ROOT_DIR)" && rm -rf gcc-$(VERSION) ) || exit $?
  [ -e "$(INTRO_ROOT_DIR)/gcc-$(VERSION)" ] && exit 1
  if [ -f "$(TARBALL_GZ)" ]; then
    if [ -n "$(STREAM)" ]; then
      tar xzvf "$(TARBALL_GZ)" -C "$(TARBALL_GZ:D)" >> "$(STREAM)" 2>&1
    else
      tar xzf "$(TARBALL_GZ)" -C "$(TARBALL_GZ:D)"
    fi
  elif [ -f "$(TARBALL_BZ2)" ]; then
    if [ -n "$(STREAM)" ]; then
      tar xjvf "$(TARBALL_BZ2)" -C "$(TARBALL_BZ2:D)" >> "$(STREAM)" 2>&1
    else
      tar xjf "$(TARBALL_BZ2)" -C "$(TARBALL_BZ2:D)"
    fi
  else
    exit 1
  fi
  [ $? -ne 0 ] && { echo "ERROR: failed to expand GCC tarball." 1>&2; exit 1; }
  [ -d "$(DEST_DIR)" ] || exit $?
  [ -x "$(DEST_DIR)/configure" ] || exit $?
  [ -e "$(<)" ] && exit 1
  touch "$(<)"
}


make configure
  : ../gmp//expand/<triplet>unspecified/<multilib>unspecified/<mpfr>unspecified/<mpc>unspecified/<gcc>unspecified
    ../mpfr//expand/<triplet>unspecified/<multilib>unspecified/<gmp>unspecified/<mpc>unspecified/<gcc>unspecified
    ../mpc//expand/<triplet>unspecified/<multilib>unspecified/<gmp>unspecified/<mpfr>unspecified/<gcc>unspecified
    expand/<triplet>unspecified/<multilib>unspecified/<gmp>unspecified/<mpfr>unspecified/<mpc>unspecified
  : @configure-gcc
  ;
explicit configure ;

rule configure-gcc ( targets * : sources * : properties * )
{
  assert-specified   <triplet>         : $(properties) ;
  assert-specified   <multilib>        : $(properties) ;
  assert-unspecified <multilib-hidden> : $(properties) ;
  assert-specified   <gmp>             : $(properties) ;
  assert-unspecified <gmp-hidden>      : $(properties) ;
  assert-specified   <mpfr>            : $(properties) ;
  assert-unspecified <mpfr-hidden>     : $(properties) ;
  assert-specified   <mpc>             : $(properties) ;
  assert-unspecified <mpc-hidden>      : $(properties) ;
  assert-specified   <gcc>             : $(properties) ;
  assert-unspecified <gcc-hidden>      : $(properties) ;
  assert-unspecified <icu4c>           : $(properties) ;
  assert-unspecified <icu4c-hidden>    : $(properties) ;
  assert-unspecified <mpi>             : $(properties) ;
  assert-unspecified <mpi-hidden>      : $(properties) ;
  assert-unspecified <openmpi>         : $(properties) ;
  assert-unspecified <openmpi-hidden>  : $(properties) ;
  assert-unspecified <boost>           : $(properties) ;
  assert-unspecified <boost-hidden>    : $(properties) ;

  OPTIONS on $(targets) = ;

  local ver-raw = [ feature.get-values <gcc> : $(properties) ] ;
  VER_RAW on $(targets) = $(ver-raw) ;
  local src-dir = $(INTRO_ROOT_DIR)/gcc-$(ver-raw) ;
  local version = [ regex.replace "$(ver-raw)" "-[0123456789][0123456789][0123456789][0123456789][0123456789][0123456789][0123456789][0123456789]" ".0" ] ;

  # Set the path to the 'configure' file.
  local configure = $(src-dir)/configure ;
  CONFIGURE on $(targets) = $(configure) ;

  # Set the '--build', '--host' and '--target' options for the 'configure' script.
  local triplet = [ feature.get-values <triplet> : $(properties) ] ;
  TRIPLET on $(targets) = $(triplet) ;
  OPTIONS on $(targets) += --build=$(triplet) ;
  OPTIONS on $(targets) += --host=$(triplet) ;
  OPTIONS on $(targets) += --target=$(triplet) ;

  # Set the '--prefix' option for the 'configure' script.
  OPTIONS on $(targets) += --prefix=\"$(PREFIX)/$(version)\" ;

  OPTIONS on $(targets) += --enable-static ;

  OPTIONS on $(targets) += --enable-shared ;

  local multilib = [ feature.get-values <multilib> : $(properties) ] ;
  if $(multilib) = yes {
    OPTIONS on $(targets) += --enable-multilib ;
  }
  else {
    OPTIONS on $(targets) += --disable-multilib ;
  }

  if $(triplet) = i686-w64-mingw32 || $(triplet) = x86_64-w64-mingw32 {
    OPTIONS on $(targets) += --enable-threads=win32 ;
  }
  else {
    OPTIONS on $(targets) += --enable-threads=posix ;
  }

  OPTIONS on $(targets) += --enable-tls ;

  if $(triplet) = i686-pc-linux-gnu || $(triplet) = i686-pc-cygwin || $(triplet) = i686-w64-mingw32 {
    OPTIONS on $(targets) += --with-arch=i686 ;
    OPTIONS on $(targets) += --with-tune=generic ;
  }
  else if $(triplet) = x86_64-unknown-linux-gnu || $(triplet) = x86_64-w64-mingw32 {
    OPTIONS on $(targets) += --with-arch-32=i686 ;
    OPTIONS on $(targets) += --with-tune=generic ;
  }

  if $(triplet) = i686-pc-cygwin {
    OPTIONS on $(targets) += --disable-__cxa_atexit ;
  }

  OPTIONS on $(targets) += --enable-bootstrap ;

  OPTIONS on $(targets) += --enable-languages=c,c++ ;

  OPTIONS on $(targets) += --enable-libssp ;

  if $(triplet) = i686-w64-mingw32 || $(triplet) = x86_64-w64-mingw32 {
    # The target is `*-w64-mingw32.'
    # `--enable-libgomp' option requires `pthreads-w32' on the target.
    # Currently, just disable this option.
    OPTIONS on $(targets) += --disable-libgomp ;
  }
  else {
    OPTIONS on $(targets) += --enable-libgomp ;
  }

  if $(triplet) = i686-pc-cygwin || $(triplet) = i686-w64-mingw32 {
    OPTIONS on $(targets) += --with-dwarf2 ;
    OPTIONS on $(targets) += --disable-sjlj-exceptions ;
  }
  # `--with-dwarf2' is not supported on `x86_64-w64-mingw32' targets.

  if $(multilib) = yes {
    if $(triplet) = x86_64-unknown-linux-gnu || $(triplet) = x86_64-w64-mingw32 {
      OPTIONS on $(targets) += --enable-targets=all ;
    }
  }

  if $(triplet) = i686-w64-mingw32 || $(triplet) = x86_64-w64-mingw32 {
    OPTIONS on $(targets) += --disable-win32-registry ;
  }

  OPTIONS on $(targets) += --enable-nls ;

  if $(triplet) = i686-pc-cygwin {
    OPTIONS on $(targets) += --enable-graphite ;
  }

  OPTIONS on $(targets) += --enable-lto ;

  OPTIONS on $(targets) += --enable-libstdcxx-time=yes ;

  OPTIONS on $(targets) += --enable-libstdcxx-debug ;

  OPTIONS on $(targets) += --disable-libstdcxx-pch ;

  SET_PREFIX_SYMLINK on $(targets) = ;
  if $(triplet) = x86_64-unknown-linux-gnu || $(triplet) = x86_64-w64-mingw32 {
    SET_PREFIX_SYMLINK on $(targets) = "{ mkdir -p \"$(PREFIX)/$(version)/lib\" && ( cd \"$(PREFIX)/$(version)\" && ln -sf lib lib64 ); } || exit $?" ;
  }

  local gmp = [ feature.get-values <gmp> : $(properties) ] ;
  SET_GMP_SYMLINK on $(targets) = "( cd \"$(src-dir)\" && ln -sf ../gmp-$(gmp) gmp )" ;
  UNSET_GMP_SYMLINK on $(targets) = "rm -f \"$(src-dir)/gmp\"" ;

  local mpfr = [ feature.get-values <mpfr> : $(properties) ] ;
  SET_MPFR_SYMLINK on $(targets) = "( cd \"$(src-dir)\" && ln -sf ../mpfr-$(mpfr) mpfr )" ;
  UNSET_MPFR_SYMLINK on $(targets) = "rm -f \"$(src-dir)/mpfr\"" ;

  local mpc = [ feature.get-values <mpc> : $(properties) ] ;
  SET_MPC_SYMLINK on $(targets) = "( cd \"$(src-dir)\" && ln -sf ../mpc-$(mpc) mpc )" ;
  UNSET_MPC_SYMLINK on $(targets) = "rm -f \"$(src-dir)/mpc\"" ;

  SET_C_INCLUDE_PATH on $(targets) = "C_INCLUDE_PATH=\"$(PREFIX)/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH}\"; export C_INCLUDE_PATH" ;
  SET_CPLUS_INCLUDE_PATH on $(targets) = "CPLUS_INCLUDE_PATH=\"$(PREFIX)/include${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH}\"; export CPLUS_INCLUDE_PATH" ;
  SET_LIBRARY_PATH on $(targets) = "LIBRARY_PATH=\"$(PREFIX)/lib${LIBRARY_PATH:+:$LIBRARY_PATH}\"; export LIBRARY_PATH" ;
}
actions configure-gcc
{
  rm -f "$(<)" || exit $?
  [ -x "$(CONFIGURE)" ] || exit $?
  $(SET_PREFIX_SYMLINK)
  [ `$(CONFIGURE:D)/config.sub $(TRIPLET)` = $(TRIPLET) ] || exit $?
  { mkdir -p "$(<:D)/build" && ( cd "$(<:D)/build" && rm -rf * ); } || exit $?
  #$(SET_GMP_SYMLINK)
  #[ -x "$(CONFIGURE:D)/gmp/configure" ] || { $(UNSET_GMP_SYMLINK); exit 1; }
  #$(SET_MPFR_SYMLINK) || { $(UNSET_GMP_SYMLINK); exit 1; }
  #[ -x "$(CONFIGURE:D)/mpfr/configure" ] || { $(UNSET_MPFR_SYMLINK); $(UNSET_GMP_SYMLINK); exit 1; }
  #$(SET_MPC_SYMLINK) || { $(UNSET_MPFR_SYMLINK); $(UNSET_GMP_SYMLINK); exit 1; }
  #[ -x "$(CONFIGURE:D)/mpc/configure" ] || { $(UNSET_MPC_SYMLINK); $(UNSET_MPFR_SYMLINK); $(UNSET_GMP_SYMLINK); exit 1; }
  $(SET_C_INCLUDE_PATH)
  $(SET_CPLUS_INCLUDE_PATH)
  $(SET_LIBRARY_PATH)
  if [ -n "$(STREAM)" ]; then
    ( cd "$(<:D)/build" && "$(CONFIGURE)" $(OPTIONS) >> "$(STREAM)" 2>&1 )
  else
    ( cd "$(<:D)/build" && "$(CONFIGURE)" $(OPTIONS) )
  fi
  if [ $? -ne 0 ]; then
    #$(UNSET_MPC_SYMLINK)
    #$(UNSET_MPFR_SYMLINK)
    #$(UNSET_GMP_SYMLINK)
    echo "ERROR: failed to 'configure' GCC $(VER_RAW) ($(TRIPLET))." 1>&2
    /bin/echo -n "ERROR: failed to 'configure' GCC $(VER_RAW) ($(TRIPLET))." | $(AWACS)
    exit 1
  fi
  #$(UNSET_MPC_SYMLINK)
  #$(UNSET_MPFR_SYMLINK)
  #$(UNSET_GMP_SYMLINK)
  [ -f "$(<:D)/build/Makefile" ] || exit $?
  [ -e "$(<)" ] && exit 1
  touch "$(<)"
}


make make : configure : @make-gcc ;
explicit make ;

rule make-gcc ( targets * : sources * : properties * )
{
  assert-specified   <triplet>         : $(properties) ;
  assert-specified   <multilib>        : $(properties) ;
  assert-unspecified <multilib-hidden> : $(properties) ;
  assert-specified   <gmp>             : $(properties) ;
  assert-unspecified <gmp-hidden>      : $(properties) ;
  assert-specified   <mpfr>            : $(properties) ;
  assert-unspecified <mpfr-hidden>     : $(properties) ;
  assert-specified   <mpc>             : $(properties) ;
  assert-unspecified <mpc-hidden>      : $(properties) ;
  assert-specified   <gcc>             : $(properties) ;
  assert-unspecified <gcc-hidden>      : $(properties) ;
  assert-unspecified <icu4c>           : $(properties) ;
  assert-unspecified <icu4c-hidden>    : $(properties) ;
  assert-unspecified <mpi>             : $(properties) ;
  assert-unspecified <mpi-hidden>      : $(properties) ;
  assert-unspecified <openmpi>         : $(properties) ;
  assert-unspecified <openmpi-hidden>  : $(properties) ;
  assert-unspecified <boost>           : $(properties) ;
  assert-unspecified <boost-hidden>    : $(properties) ;

  local triplet = [ feature.get-values <triplet> : $(properties) ] ;
  TRIPLET on $(targets) = $(triplet) ;
  local version = [ feature.get-values <gcc> : $(properties) ] ;
  local src-dir = "$(INTRO_ROOT_DIR)/gcc-$(version)" ;
  SRC_DIR on $(targets) = "$(src-dir)" ;
  local ver-raw = $(version) ;
  VER_RAW on $(targets) = $(ver-raw) ;
  version = [ regex.replace "$(version)" "-[0123456789][0123456789][0123456789][0123456789][0123456789][0123456789][0123456789][0123456789]" ".0" ] ;

  local gmp = [ feature.get-values <gmp> : $(properties) ] ;
  SET_GMP_SYMLINK on $(targets) = "( cd \"$(src-dir)\" && ln -sf ../gmp-$(gmp) gmp )" ;
  UNSET_GMP_SYMLINK on $(targets) = "rm -f \"$(src-dir)/gmp\"" ;

  local mpfr = [ feature.get-values <mpfr> : $(properties) ] ;
  SET_MPFR_SYMLINK on $(targets) = "( cd \"$(src-dir)\" && ln -sf ../mpfr-$(mpfr) mpfr )" ;
  UNSET_MPFR_SYMLINK on $(targets) = "rm -f \"$(src-dir)/mpfr\"" ;

  local mpc = [ feature.get-values <mpc> : $(properties) ] ;
  SET_MPC_SYMLINK on $(targets) = "( cd \"$(src-dir)\" && ln -sf ../mpc-$(mpc) mpc )" ;
  UNSET_MPC_SYMLINK on $(targets) = "rm -f \"$(src-dir)/mpc\"" ;

  SET_C_INCLUDE_PATH on $(targets) = "C_INCLUDE_PATH=\"$(PREFIX)/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH}\"; export C_INCLUDE_PATH" ;
  SET_CPLUS_INCLUDE_PATH on $(targets) = "CPLUS_INCLUDE_PATH=\"$(PREFIX)/include${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH}\"; export CPLUS_INCLUDE_PATH" ;
  SET_LIBRARY_PATH on $(targets) = "LIBRARY_PATH=\"$(PREFIX)/lib${LIBRARY_PATH:+:$LIBRARY_PATH}\"; export LIBRARY_PATH" ;

  local gpp-tlimit = "$(INTRO_ROOT_DIR)/gcc/g++-tlimit" ;
  GPP_TLIMIT on $(targets) = "$(gpp-tlimit)" ;

  local version-prefix = "$(PREFIX)/$(version)" ;
  VERSION_PREFIX on $(targets) = $(version-prefix) ;
}
actions make-gcc
{
  rm -f "$(<)" || exit $?
  [ -f "$(<:D)/build/Makefile" ] || exit $?
  #$(SET_GMP_SYMLINK)
  #[ -x "$(SRC_DIR)/gmp/configure" ] || { $(UNSET_GMP_SYMLINK); exit 1; }
  #$(SET_MPFR_SYMLINK) || { $(UNSET_GMP_SYMLINK); exit 1; }
  #[ -x "$(SRC_DIR)/mpfr/configure" ] || { $(UNSET_MPFR_SYMLINK); $(UNSET_GMP_SYMLINK); exit 1; }
  #$(SET_MPC_SYMLINK) || { $(UNSET_MPFR_SYMLINK); $(UNSET_GMP_SYMLINK); exit 1; }
  #[ -x "$(SRC_DIR)/mpc/configure" ] || { $(UNSET_MPC_SYMLINK); $(UNSET_MPFR_SYMLINK); $(UNSET_GMP_SYMLINK); exit 1; }
  $(SET_C_INCLUDE_PATH)
  $(SET_CPLUS_INCLUDE_PATH)
  $(SET_LIBRARY_PATH)
  if [ -n "$(STREAM)" ]; then
    ( cd "$(<:D)/build" && make --jobs=$(CONCURRENCY) >> "$(STREAM)" 2>&1 )
  else
    ( cd "$(<:D)/build" && make --jobs=$(CONCURRENCY) )
  fi
  if [ $? -ne 0 ]; then
    #$(UNSET_MPC_SYMLINK)
    #$(UNSET_MPFR_SYMLINK)
    #$(UNSET_GMP_SYMLINK)
    echo "ERROR: failed to 'make' GCC $(VER_RAW) ($(TRIPLET))." 1>&2
    /bin/echo -n "ERROR: failed to 'make' GCC $(VER_RAW) ($(TRIPLET))." | $(AWACS)
    exit 1
  fi
  if [ -n "$(STREAM)" ]; then
    ( cd "$(<:D)/build" && make install >> "$(STREAM)" 2>&1 )
  else
    ( cd "$(<:D)/build" && make install )
  fi
  if [ $? -ne 0 ]; then
    #$(UNSET_MPC_SYMLINK)
    #$(UNSET_MPFR_SYMLINK)
    #$(UNSET_GMP_SYMLINK)
    echo "ERROR: failed to 'make install' GCC $(VER_RAW) ($(TRIPLET))." 1>&2
    /bin/echo -n "ERROR: failed to 'make install' GCC $(VER_RAW) ($(TRIPLET))." | $(AWACS)
    exit 1
  fi
  ( cd "$(<:D)" && rm -rf build )
  #$(UNSET_MPC_SYMLINK)
  #$(UNSET_MPFR_SYMLINK)
  #$(UNSET_GMP_SYMLINK)
  cp -f "$(GPP_TLIMIT)" "$(VERSION_PREFIX)/bin"
  if [ $? -ne 0 ]; then
    echo "ERROR: failed to create the wrapper script for GCC $(VER_RAW) ($(TRIPLET))." 1>&2
    /bin/echo -n "ERROR: failed to create the wrapper script for GCC $(VER_RAW) ($(TRIPLET))." | $(AWACS)
    exit 1
  fi
  chmod +x "$(VERSION_PREFIX)/bin/g++-tlimit" || exit $?
  /bin/echo -n "GCC $(VER_RAW) ($(TRIPLET)) was successfully built." | $(AWACS)
  [ -e "$(<)" ] && exit 1
  touch "$(<)"
}


rule install-req ( properties * )
{
  assert-specified   <triplet>         : $(properties) ;
  assert-specified   <multilib>        : $(properties) ;
  assert-unspecified <multilib-hidden> : $(properties) ;
  assert-specified   <gmp>             : $(properties) ;
  assert-unspecified <gmp-hidden>      : $(properties) ;
  assert-specified   <mpfr>            : $(properties) ;
  assert-unspecified <mpfr-hidden>     : $(properties) ;
  assert-specified   <mpc>             : $(properties) ;
  assert-unspecified <mpc-hidden>      : $(properties) ;
  assert-specified   <gcc>             : $(properties) ;
  assert-unspecified <gcc-hidden>      : $(properties) ;
  assert-unspecified <icu4c>           : $(properties) ;
  assert-unspecified <icu4c-hidden>    : $(properties) ;
  assert-unspecified <mpi>             : $(properties) ;
  assert-unspecified <mpi-hidden>      : $(properties) ;
  assert-unspecified <openmpi>         : $(properties) ;
  assert-unspecified <openmpi-hidden>  : $(properties) ;
  assert-unspecified <boost>           : $(properties) ;
  assert-unspecified <boost-hidden>    : $(properties) ;

  local result ;

  local tmp ;

  local triplet = [ feature.get-values <triplet> : $(properties) ] ;

  local multilib = [ feature.get-values <multilib> : $(properties) ] ;
  if $(multilib) = yes {
    if $(triplet) = x86_64-unknown-linux-gnu || $(triplet) = x86_64-w64-mingw32 {
      # Do nothing.
    }
    else {
      errors.error "ERROR: `<multilib>' is not supported on `$(triplet)'." ;
    }
  }

  local gcc = [ feature.get-values <gcc> : $(properties) ] ;
  if [ SHELL "{ ( LC_ALL=C gcc -v 2>&1 ) | grep -Eq '^gcc version $(gcc)'; } && /bin/echo -n 'INUMIMI'" ] = INUMIMI {
    result = <build>no ;
  }

  return $(result) ;
}

alias install : make : <conditional>@install-req ;
explicit install ;

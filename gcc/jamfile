project intro/gcc ;

import alias ;
import errors ;
import feature ;
import make ;
import regex ;


rule assert-specified ( feature : properties * )
{
  local val = [ feature.get-values $(feature) : $(properties) ] ;
  if $(val) = unspecified {
    errors.error $(feature) is not specified for GCC build. ;
  }
}

rule assert-unspecified ( feature : properties * )
{
  local val = [ feature.get-values $(feature) : $(properties) ] ;
  if $(val) != unspecified {
    errors.error $(feature) is not valid for GCC build. ;
  }
}


make download : : @download-gcc ;
explicit download ;

rule download-gcc ( targets * : sources * : properties * )
{
  assert-unspecified <triplet>         : $(properties) ;
  assert-unspecified <multilib>        : $(properties) ;
  assert-unspecified <multilib-hidden> : $(properties) ;
  assert-unspecified <binutils>        : $(properties) ;
  assert-unspecified <binutils-hidden> : $(properties) ;
  assert-unspecified <gmp>             : $(properties) ;
  assert-unspecified <gmp-hidden>      : $(properties) ;
  assert-unspecified <mpfr>            : $(properties) ;
  assert-unspecified <mpfr-hidden>     : $(properties) ;
  assert-unspecified <mpc>             : $(properties) ;
  assert-unspecified <mpc-hidden>      : $(properties) ;
  assert-unspecified <ppl>             : $(properties) ;
  assert-unspecified <ppl-hidden>      : $(properties) ;
  assert-unspecified <cloog>           : $(properties) ;
  assert-unspecified <cloog-hidden>    : $(properties) ;
  assert-specified   <gcc>             : $(properties) ;
  assert-unspecified <gcc-hidden>      : $(properties) ;
  assert-unspecified <icu4c>           : $(properties) ;
  assert-unspecified <icu4c-hidden>    : $(properties) ;
  assert-unspecified <mpi>             : $(properties) ;
  assert-unspecified <mpi-hidden>      : $(properties) ;
  assert-unspecified <openmpi>         : $(properties) ;
  assert-unspecified <openmpi-hidden>  : $(properties) ;
  assert-unspecified <boost>           : $(properties) ;
  assert-unspecified <boost-hidden>    : $(properties) ;
  local version = [ feature.get-values <gcc> : $(properties) ] ;
  #local url_prefix = "http://gcc.igor.onlinedirect.bg" ;            # Bulgaria
  #local url_prefix = "http://gcc.parentingamerica.com" ;            # Canada
  #local url_prefix = "http://gcc.skazkaforyou.com" ;                # Canada
  #local url_prefix = "http://fileboar.com/gcc" ;                    # US
  #local url_prefix = "http://gcc.petsads.us" ;                      # US +
  #local url_prefix = "http://mirrors-us.seosue.com/gcc" ;           # US
  local url_prefix = "http://ftp.dti.ad.jp/pub/lang/gcc" ;          # Japan ++
  #local url_prefix = "http://ftp.tsukuba.wide.ad.jp/software/gcc" ; # Japan +++
  if [ regex.match "^([0-9]+\\.[0-9]+\\.[0-9]+)$" : $(version) : 1 ] {
    URL on $(targets) = "$(url_prefix)/releases/gcc-$(version)/gcc-$(version).tar.bz2" ;
  }
  else if [ regex.match "^([0-9]+\\.[0-9]+-[0-9]+)$" : $(version) : 1 ] {
    URL on $(targets) = "$(url_prefix)/snapshots/$(version)/gcc-$(version).tar.bz2" ;
  }
  else if [ regex.match "^([0-9]+\\.[0-9]+\\.0-RC-[0-9]+)$" : $(version) : 1 ] {
    URL on $(targets) = "$(url_prefix)/snapshots/$(version)/gcc-$(version).tar.bz2" ;
  }
  else {
    errors.error "ERROR: an invalid GCC version." ;
  }
  TARBALL_GZ on $(targets) = $(INTRO_ROOT_DIR)/gcc-$(version).tar.gz ;
  TARBALL_BZ2 on $(targets) = $(INTRO_ROOT_DIR)/gcc-$(version).tar.bz2 ;
}
actions download-gcc
{
  rm -f "$(<)" || exit $?
  if [ ! -f "$(TARBALL_GZ)" -a ! -f "$(TARBALL_BZ2)" ]; then
    if [ -n "$(STREAM)" ]; then
      ( cd "$(TARBALL_BZ2:D)" && wget -- '$(URL)' >> "$(STREAM)" 2>&1 )
    else
      ( cd "$(TARBALL_BZ2:D)" && wget --quiet -- '$(URL)' )
    fi
    if [ $? -ne 0 ]; then
      echo "ERROR: failed to download GCC tarball." 1>&2
      echo -n "ERROR: failed to download GCC tarball." | $(AWACS)
      exit 1
    fi
    [ -f "$(TARBALL_GZ)" -o -f "$(TARBALL_BZ2)" ] || exit 1
  fi
  [ -e "$(<)" ] && exit 1
  touch "$(<)"
}


make expand : download : @expand-gcc ;
explicit expand ;

rule expand-gcc ( targets * : sources * : properties * )
{
  assert-unspecified <triplet>         : $(properties) ;
  assert-unspecified <multilib>        : $(properties) ;
  assert-unspecified <multilib-hidden> : $(properties) ;
  assert-unspecified <binutils>        : $(properties) ;
  assert-unspecified <binutils-hidden> : $(properties) ;
  assert-unspecified <gmp>             : $(properties) ;
  assert-unspecified <gmp-hidden>      : $(properties) ;
  assert-unspecified <mpfr>            : $(properties) ;
  assert-unspecified <mpfr-hidden>     : $(properties) ;
  assert-unspecified <mpc>             : $(properties) ;
  assert-unspecified <mpc-hidden>      : $(properties) ;
  assert-unspecified <ppl>             : $(properties) ;
  assert-unspecified <ppl-hidden>      : $(properties) ;
  assert-unspecified <cloog>           : $(properties) ;
  assert-unspecified <cloog-hidden>    : $(properties) ;
  assert-specified   <gcc>             : $(properties) ;
  assert-unspecified <gcc-hidden>      : $(properties) ;
  assert-unspecified <icu4c>           : $(properties) ;
  assert-unspecified <icu4c-hidden>    : $(properties) ;
  assert-unspecified <mpi>             : $(properties) ;
  assert-unspecified <mpi-hidden>      : $(properties) ;
  assert-unspecified <openmpi>         : $(properties) ;
  assert-unspecified <openmpi-hidden>  : $(properties) ;
  assert-unspecified <boost>           : $(properties) ;
  assert-unspecified <boost-hidden>    : $(properties) ;
  if ! $(sources[1]) {
    errors.error "ERROR: wrong number of sources." ;
  }
  if $(sources[2]) {
    errors.error "ERROR: wrong number of sources." ;
  }
  local version = [ feature.get-values <gcc> : $(properties) ] ;
  VERSION on $(targets) = $(version) ;
  TARBALL_GZ on $(targets) = $(INTRO_ROOT_DIR)/gcc-$(version).tar.gz ;
  TARBALL_BZ2 on $(targets) = $(INTRO_ROOT_DIR)/gcc-$(version).tar.bz2 ;
  DEST_DIR on $(targets) = $(INTRO_ROOT_DIR)/gcc-$(version) ;
}
actions expand-gcc
{
  rm -f "$(<)" || exit $?
  [ -f "$(>)" ] || exit 1
  ( cd "$(INTRO_ROOT_DIR)" && rm -rf gcc-$(VERSION) ) || exit 1
  [ -e "$(INTRO_ROOT_DIR)/gcc-$(VERSION)" ] && exit 1
  if [ -f "$(TARBALL_GZ)" ]; then
    if [ -n "$(STREAM)" ]; then
      tar xzvf "$(TARBALL_GZ)" -C "$(TARBALL_GZ:D)" >> "$(STREAM)" 2>&1
    else
      tar xzf "$(TARBALL_GZ)" -C "$(TARBALL_GZ:D)"
    fi
  elif [ -f "$(TARBALL_BZ2)" ]; then
    if [ -n "$(STREAM)" ]; then
      tar xjvf "$(TARBALL_BZ2)" -C "$(TARBALL_BZ2:D)" >> "$(STREAM)" 2>&1
    else
      tar xjf "$(TARBALL_BZ2)" -C "$(TARBALL_BZ2:D)"
    fi
  else
    exit 1
  fi
  if [ $? -ne 0 ]; then
    echo "ERROR: failed to expand GCC tarball." 1>&2
    echo -n "ERROR: failed to expand GCC tarball." | $(AWACS)
    exit 1
  fi
  [ -d "$(DEST_DIR)" ] || exit 1
  [ -x "$(DEST_DIR)/configure" ] || exit 1
  [ -e "$(<)" ] && exit 1
  touch "$(<)"
}


make configure
  : #../binutils//install/<multilib>unspecified/<gmp>unspecified/<mpfr>unspecified/<mpc>unspecified/<ppl>unspecified/<cloog>unspecified/<gcc>unspecified
    #../prerequisites//gmp/<multilib>unspecified/<mpfr>unspecified/<mpc>unspecified/<ppl>unspecified/<cloog>unspecified/<gcc>unspecified
    #../prerequisites//mpfr/<multilib>unspecified/<mpc>unspecified/<ppl>unspecified/<cloog>unspecified/<gcc>unspecified
    #../prerequisites//mpc/<multilib>unspecified/<ppl>unspecified/<cloog>unspecified/<gcc>unspecified
    #../prerequisites/ppl//install/<multilib>unspecified/<ppl>$(PPL_FOR_GCC)/<gcc>unspecified
    #../prerequisites/cloog//install/<multilib>unspecified/<cloog>$(CLOOG_FOR_GCC)/<gcc>unspecified
    ../binutils//expand/<triplet>unspecified/<multilib>unspecified/<binutils>$(BINUTILS_FOR_GCC)/<gcc>unspecified
    ../gmp//expand/<triplet>unspecified/<multilib>unspecified/<gmp>$(GMP_FOR_GCC)/<gcc>unspecified
    ../mpfr//expand/<triplet>unspecified/<multilib>unspecified/<mpfr>$(MPFR_FOR_GCC)/<gcc>unspecified
    ../mpc//expand/<triplet>unspecified/<multilib>unspecified/<mpc>$(MPC_FOR_GCC)/<gcc>unspecified
    ../prerequisites/ppl//srcdir/<triplet>unspecified/<multilib>unspecified/<ppl>$(PPL_FOR_GCC)/<gcc>unspecified
    ../prerequisites/cloog//srcdir/<triplet>unspecified/<multilib>unspecified/<cloog>$(CLOOG_FOR_GCC)/<gcc>unspecified
    expand/<triplet>unspecified/<multilib>unspecified
  : @configure-gcc
  ;
explicit configure ;

rule configure-gcc ( targets * : sources * : properties * )
{
  assert-specified   <triplet>         : $(properties) ;
  assert-specified   <multilib>        : $(properties) ;
  assert-unspecified <multilib-hidden> : $(properties) ;
  assert-unspecified <binutils>        : $(properties) ;
  assert-unspecified <binutils-hidden> : $(properties) ;
  assert-unspecified <gmp>             : $(properties) ;
  assert-unspecified <gmp-hidden>      : $(properties) ;
  assert-unspecified <mpfr>            : $(properties) ;
  assert-unspecified <mpfr-hidden>     : $(properties) ;
  assert-unspecified <mpc>             : $(properties) ;
  assert-unspecified <mpc-hidden>      : $(properties) ;
  assert-unspecified <ppl>             : $(properties) ;
  assert-unspecified <ppl-hidden>      : $(properties) ;
  assert-unspecified <cloog>           : $(properties) ;
  assert-unspecified <cloog-hidden>    : $(properties) ;
  assert-specified   <gcc>             : $(properties) ;
  assert-unspecified <gcc-hidden>      : $(properties) ;
  assert-unspecified <icu4c>           : $(properties) ;
  assert-unspecified <icu4c-hidden>    : $(properties) ;
  assert-unspecified <mpi>             : $(properties) ;
  assert-unspecified <mpi-hidden>      : $(properties) ;
  assert-unspecified <openmpi>         : $(properties) ;
  assert-unspecified <openmpi-hidden>  : $(properties) ;
  assert-unspecified <boost>           : $(properties) ;
  assert-unspecified <boost-hidden>    : $(properties) ;

  OPTIONS on $(targets) = ;

  local version = [ feature.get-values <gcc> : $(properties) ] ;
  VERSION on $(targets) = $(version) ;

  local srcdir = "$(INTRO_ROOT_DIR)/gcc-$(version)" ;
  SRCDIR on $(targets) = "$(srcdir)" ;

  # Set the '--build', '--host' and '--target' options for the 'configure' script.
  local triplet = [ feature.get-values <triplet> : $(properties) ] ;
  TRIPLET on $(targets) = $(triplet) ;

  local version-prefix = "$(PREFIX)/gcc-$(version)" ;
  VERSION_PREFIX on $(targets) = "$(version-prefix)" ;

  OPTIONS on $(targets) += --build=$(triplet) ;
  OPTIONS on $(targets) += --host=$(triplet) ;
  OPTIONS on $(targets) += --target=$(triplet) ;

  # Set the '--prefix' option for the 'configure' script.
  OPTIONS on $(targets) += "--prefix=\"$(version-prefix)\"" ;

  OPTIONS on $(targets) += --enable-static ;

  OPTIONS on $(targets) += --enable-shared ;

  #OPTIONS on $(targets) += "--with-ld=\"$(version-prefix)/bin/ld\"" ;

  OPTIONS on $(targets) += --enable-ld ;

  OPTIONS on $(targets) += --enable-gold=default ;

  local multilib = [ feature.get-values <multilib> : $(properties) ] ;
  if $(multilib) = yes {
    OPTIONS on $(targets) += --enable-multilib ;
  }
  else {
    OPTIONS on $(targets) += --disable-multilib ;
  }

  if $(triplet) = i686-w64-mingw32 || $(triplet) = x86_64-w64-mingw32 {
    OPTIONS on $(targets) += --enable-threads=win32 ;
  }
  else {
    OPTIONS on $(targets) += --enable-threads=posix ;
  }

  OPTIONS on $(targets) += --enable-tls ;

  if $(triplet) = i686-pc-linux-gnu || $(triplet) = i686-pc-cygwin || $(triplet) = i686-w64-mingw32 {
    OPTIONS on $(targets) += --with-arch=i686 ;
    OPTIONS on $(targets) += --with-tune=generic ;
  }
  else if $(triplet) = x86_64-unknown-linux-gnu || $(triplet) = x86_64-w64-mingw32 {
    OPTIONS on $(targets) += --with-arch-32=i686 ;
    OPTIONS on $(targets) += --with-tune=generic ;
  }

  if $(triplet) = i686-pc-cygwin {
    OPTIONS on $(targets) += --disable-__cxa_atexit ;
  }

  OPTIONS on $(targets) += --enable-build-with-cxx ;

  OPTIONS on $(targets) += --enable-bootstrap ;

  OPTIONS on $(targets) += --enable-languages=c,c++ ;

  OPTIONS on $(targets) += --enable-libssp ;

  if $(triplet) = i686-w64-mingw32 || $(triplet) = x86_64-w64-mingw32 {
    # The target is `*-w64-mingw32.'
    # `--enable-libgomp' option requires `pthreads-w32' on the target.
    # Currently, just disable this option.
    OPTIONS on $(targets) += --disable-libgomp ;
  }
  else {
    OPTIONS on $(targets) += --enable-libgomp ;
  }

  if $(triplet) = i686-pc-cygwin || $(triplet) = i686-w64-mingw32 {
    OPTIONS on $(targets) += --with-dwarf2 ;
    OPTIONS on $(targets) += --disable-sjlj-exceptions ;
  }
  # `--with-dwarf2' is not supported on `x86_64-w64-mingw32' targets.

  if $(multilib) = yes {
    if $(triplet) = x86_64-unknown-linux-gnu || $(triplet) = x86_64-w64-mingw32 {
      OPTIONS on $(targets) += --enable-targets=all ;
    }
  }

  if $(triplet) = i686-w64-mingw32 || $(triplet) = x86_64-w64-mingw32 {
    OPTIONS on $(targets) += --disable-win32-registry ;
  }

  OPTIONS on $(targets) += --disable-nls ;

  if $(triplet) = i686-pc-cygwin {
    OPTIONS on $(targets) += --enable-graphite ;
  }

  #OPTIONS on $(targets) += "--with-gmp=\"$(PREFIX)\"" ;
  #OPTIONS on $(targets) += "--with-mpfr=\"$(PREFIX)\"" ;
  #OPTIONS on $(targets) += "--with-mpc=\"$(PREFIX)\"" ;
  #OPTIONS on $(targets) += "--with-ppl=\"$(PREFIX)\"" ;
  #OPTIONS on $(targets) += "--with-cloog=\"$(PREFIX)\"" ;

  OPTIONS on $(targets) += --enable-cloog-backend=isl ;

  OPTIONS on $(targets) += --with-stage1-ldflags=-lstdc++ ;

  OPTIONS on $(targets) += --enable-linker-build-id ;

  OPTIONS on $(targets) += --enable-lto ;

  OPTIONS on $(targets) += --enable-plugins ;

  OPTIONS on $(targets) += --enable-libstdcxx-time=yes ;

  OPTIONS on $(targets) += --enable-libstdcxx-debug ;

  SET_PREFIX_SYMLINK on $(targets) = ;
  if $(triplet) = x86_64-unknown-linux-gnu || $(triplet) = x86_64-w64-mingw32 {
    SET_PREFIX_SYMLINK on $(targets) = "{ mkdir -p \"$(PREFIX)/gcc-$(version)/lib\" && ( cd \"$(PREFIX)/gcc-$(version)\" && ln -sf lib lib64 ); } || exit 1" ;
  }
}
actions configure-gcc
{
  rm -f "$(<)" || exit $?

  # The absolute path to the objdir.
  objdir="$(INTRO_ROOT_DIR)/$(<:D)/objdir"

  # Clean-up the objdir.
  { mkdir -p "$objdir" && ( cd "$objdir" && rm -rf * ); } || exit 1


  # Create the symlinks to the source directories to GNU Binutils libraries
  # and tools (opcodes, bfd, binutils, gas, ld, gold, gprof) in the GCC
  # source directory.
  ( cd "$(SRCDIR)"                                       \
      && ln -sf ../binutils-$(BINUTILS_FOR_GCC)/bfd      \
                ../binutils-$(BINUTILS_FOR_GCC)/binutils \
                ../binutils-$(BINUTILS_FOR_GCC)/gas      \
                ../binutils-$(BINUTILS_FOR_GCC)/gold     \
                ../binutils-$(BINUTILS_FOR_GCC)/gprof    \
                ../binutils-$(BINUTILS_FOR_GCC)/ld       \
                ../binutils-$(BINUTILS_FOR_GCC)/opcodes  . ) || exit 1


  # Create the symlink to the GMP source directory.
  ( cd "$(SRCDIR)" && ln -sf ../gmp-$(GMP_FOR_GCC) gmp ) || exit 1

  # An ad-hoc workaround that forces the GCC bootstrap procedure to build GMP
  # C++ bindings, which are necessary to build PPL and CLooG.
  if [ ! -e "$(SRCDIR)/gmp/real-configure" ]; then
    ( cd "$(SRCDIR)" && mv gmp/configure gmp/real-configure ) || exit 1
  fi
  echo '#! /bin/sh'                                      >  "$(SRCDIR)/gmp/configure"
  echo ""                                                >> "$(SRCDIR)/gmp/configure"
  echo "echo INUMIMI: \$@"                               >> "$(SRCDIR)/gmp/configure"
  echo "dir=\`dirname \"\$0\"\`"                         >> "$(SRCDIR)/gmp/configure"
  #echo "\"\${dir}/real-configure\" --enable-cxx \"\$@\"" >> "$(SRCDIR)/gmp/configure"
  echo "\"\${dir}/real-configure\" --srcdir=\"$(SRCDIR)/gmp\" --build=$(TRIPLET) --host=$(TRIPLET) --enable-cxx --enable-static --disable-shared" >> "$(SRCDIR)/gmp/configure"
  chmod +x "$(SRCDIR)/gmp/configure"


  # Create the symlink to the MPFR source directory.
  ( cd "$(SRCDIR)" && ln -sf ../mpfr-$(MPFR_FOR_GCC) mpfr ) || exit 1


  # Create the symlink to the MPC source directory.
  ( cd "$(SRCDIR)" && ln -sf ../mpc-$(MPC_FOR_GCC) mpc ) || exit 1


  # Create the symlink to the PPL source directory in the GCC source
  # directory.
  ( cd "$(SRCDIR)" && ln -sf ../ppl-$(PPL_FOR_GCC) ppl ) || exit 1

  # An ad-hoc workaround that enables the PPL configure script to find the
  # GMP build directory during the GCC bootstrap procedure.
  if [ ! -e "$(SRCDIR)/ppl/real-configure" ]; then
    ( cd "$(SRCDIR)" && mv ppl/configure ppl/real-configure ) || exit 1
  fi
  echo '#! /bin/sh'                                                            >  "$(SRCDIR)/ppl/configure"
  echo ""                                                                      >> "$(SRCDIR)/ppl/configure"
  echo "echo INUMIMI: \$@"                                                     >> "$(SRCDIR)/ppl/configure"
  echo "dir=\`dirname \"\$0\"\`"                                               >> "$(SRCDIR)/ppl/configure"
  #echo "\"\${dir}/real-configure\" --with-gmp-build=\"${objdir}/gmp\" \"\$@\"" >> "$(SRCDIR)/ppl/configure"
  echo  "\"\${dir}/real-configure\" --srcdir="$(SRCDIR)/ppl" --build=$(TRIPLET) --host=$(TRIPLET) --disable-coverage --enable-static --disable-shared --with-gmp-build=\"${objdir}/gmp\"" >> "$(SRCDIR)/ppl/configure"
  chmod +x "$(SRCDIR)/ppl/configure"


  # Create the symlink to the CLooG source directory in the GCC source
  # directory.
  ( cd "$(SRCDIR)" && ln -sf ../cloog-$(CLOOG_FOR_GCC) cloog ) || exit 1

  # An ad-hoc workaround that enables the CLooG configure script to find the
  # GMP build directory during the GCC bootstrap procedure.
  if [ ! -e "$(SRCDIR)/cloog/real-configure" ]; then
    ( cd "$(SRCDIR)" && mv cloog/configure cloog/real-configure ) || exit 1
  fi
  echo '#! /bin/sh'                                                               >  "$(SRCDIR)/cloog/configure"
  echo ""                                                                         >> "$(SRCDIR)/cloog/configure"
  echo "echo INUMIMI: \$@"                                                        >> "$(SRCDIR)/cloog/configure"
  echo "dir=\`dirname \"\$0\"\`"                                                  >> "$(SRCDIR)/cloog/configure"
  #echo "\"\${dir}/real-configure\" --with-gmp-builddir=\"${objdir}/gmp\" \"\$@\"" >> "$(SRCDIR)/cloog/configure"
  echo "\"\${dir}/real-configure\" --srcdir=$(SRCDIR)/cloog --build=$(TRIPLET) --host=$(TRIPLET) --enable-static --disable-shared --with-gnu-ld --with-gmp-builddir=\"${objdir}/gmp\"" >> "$(SRCDIR)/cloog/configure"
  chmod +x "$(SRCDIR)/cloog/configure"


  [ -x "$(SRCDIR)/configure" ] || exit 1
  [ -x "$(SRCDIR)/config.sub" ] || exit 1
  [ `"$(SRCDIR)/config.sub" $(TRIPLET)` = $(TRIPLET) ] || exit 1

  $(SET_PREFIX_SYMLINK)


  # `configure'.
  if [ -n "$(STREAM)" ]; then
    ( cd "$objdir" && "$(SRCDIR)/configure" $(OPTIONS) >> "$(STREAM)" 2>&1 )
  else
    ( cd "$objdir" && "$(SRCDIR)/configure" $(OPTIONS) )
  fi
  if [ $? -ne 0 ]; then
    echo "ERROR: failed to 'configure' GCC $(VERSION) ($(TRIPLET))." 1>&2
    echo -n "ERROR: failed to 'configure' GCC $(VERSION) ($(TRIPLET))." | $(AWACS)
    exit 1
  fi

  # Check the creation of `Makefile'.
  [ -f "${objdir}/Makefile" ] || exit 1


  # `make'.
  # PPL and CLooG requires GMP. However, they will fail to find the GMP
  # header files, <gmp.h> and <gmpxx.h>. <gmp.h> will be created in
  # ${objdir}/gmp during the bootstrap procedure, whereas <gmpxx.h> resides
  # in $(SRCDIR)/gmp. So, CPATH is set to include the paths to those header
  # files.
  if [ -n "$(STREAM)" ]; then
    ( cd "$objdir" \
        && env CPATH="${objdir}/gmp:$(SRCDIR)/gmp${CPATH:+:$CPATH}" LIBRARY_PATH="${objdir}/gmp/.libs:${objdir}/$(TRIPLET)/libstdc++-v3/src/.libs${LIBRARY_PATH:+:$LIBRARY_PATH}" make --jobs=$(CONCURRENCY) >> "$(STREAM)" 2>&1 )
    if [ $? -ne 0 ]; then
      ( cd "$objdir" \
          && env CPATH="${objdir}/gmp:$(SRCDIR)/gmp${CPATH:+:$CPATH}" LIBRARY_PATH="${objdir}/gmp/.libs:${objdir}/$(TRIPLET)/libstdc++-v3/src/.libs${LIBRARY_PATH:+:$LIBRARY_PATH}" make --jobs=$(CONCURRENCY) >> "$(STREAM)" 2>&1 )
      if [ $? -ne 0 ]; then
        ( cd "$objdir" \
            && env CPATH="${objdir}/gmp:$(SRCDIR)/gmp${CPATH:+:$CPATH}" LIBRARY_PATH="${objdir}/gmp/.libs:${objdir}/$(TRIPLET)/libstdc++-v3/src/.libs${LIBRARY_PATH:+:$LIBRARY_PATH}" make --jobs=$(CONCURRENCY) >> "$(STREAM)" 2>&1 )
      fi
    fi
  else
    ( cd "$objdir" \
        && env CPATH="${objdir}/gmp:$(SRCDIR)/gmp${CPATH:+:$CPATH}" LIBRARY_PATH="${objdir}/gmp/.libs:${objdir}/$(TRIPLET)/libstdc++-v3/src/.libs${LIBRARY_PATH:+:$LIBRARY_PATH}" make --jobs=$(CONCURRENCY) )
    if [ $? -ne 0 ]; then
      ( cd "$objdir" \
          && env CPATH="${objdir}/gmp:$(SRCDIR)/gmp${CPATH:+:$CPATH}" LIBRARY_PATH="${objdir}/gmp/.libs:${objdir}/$(TRIPLET)/libstdc++-v3/src/.libs${LIBRARY_PATH:+:$LIBRARY_PATH}" make --jobs=$(CONCURRENCY) )
      if [ $? -ne 0 ]; then
        ( cd "$objdir" \
            && env CPATH="${objdir}/gmp:$(SRCDIR)/gmp${CPATH:+:$CPATH}" LIBRARY_PATH="${objdir}/gmp/.libs:${objdir}/$(TRIPLET)/libstdc++-v3/src/.libs${LIBRARY_PATH:+:$LIBRARY_PATH}" make --jobs=$(CONCURRENCY) )
      fi
    fi
  fi
  if [ $? -ne 0 ]; then
    echo "ERROR: failed to 'make' GCC $(VERSION) ($(TRIPLET))." 1>&2
    echo -n "ERROR: failed to 'make' GCC $(VERSION) ($(TRIPLET))." | $(AWACS)
    exit 1
  fi


  # `make install'.
  if [ -n "$(STREAM)" ]; then
    ( cd "$objdir" && make install >> "$(STREAM)" 2>&1 )
  else
    ( cd "$objdir" && make install )
  fi
  if [ $? -ne 0 ]; then
    echo "ERROR: failed to 'make install' GCC $(VERSION) ($(TRIPLET))." 1>&2
    echo -n "ERROR: failed to 'make install' GCC $(VERSION) ($(TRIPLET))." | $(AWACS)
    exit 1
  fi


  # A workaround. Create a symlink to `ld' in the directory where the
  # installed GCC front end searches for subprograms.
  ( cd $(VERSION_PREFIX)/libexec/gcc/$(TRIPLET)/`$(VERSION_PREFIX)/bin/gcc -dumpversion` && ln -sf ../../../../bin/ld real-ld )
  if [ $? -ne 0 ]; then
    echo "ERROR: failed to create the workaround symlink to the linker for GCC $(VERSION) ($(TRIPLET))." 1>&2
    echo -n "ERROR: failed to create the workaround symlink to the linker for GCC $(VERSION) ($(TRIPLET))." | $(AWACS)
    exit 1
  fi


  #install --mode=755 "$(INTRO_ROOT_DIR)/gcc/gcc-wrapper" "$(INTRO_ROOT_DIR)/gcc/g++-wrapper" "$(VERSION_PREFIX)/bin"
  #if [ $? -ne 0 ]; then
  #  echo "ERROR: failed to install the wrapper scripts for GCC $(VERSION) ($(TRIPLET))." 1>&2
  #  echo -n "ERROR: failed to install the wrapper scripts for GCC $(VERSION) ($(TRIPLET))." | $(AWACS)
  #  exit 1
  #fi


  # Clean-up the objdir.
  ( cd "$objdir" && rm -rf * && cd .. && rmdir objdir )


  [ -e "$(<)" ] && exit 1
  echo -n "GCC $(VERSION) ($(TRIPLET)) was successfully built." | $(AWACS)
  echo -n "Binutils $(BINUTILS_FOR_GCC), GMP $(GMP_FOR_GCC), MPFR $(MPFR_FOR_GCC), MPC $(MPC_FOR_GCC), PPL $(PPL_FOR_GCC), CLooG $(CLOOG_FOR_GCC) were bootstrapped alongside." | $(AWACS)
  touch "$(<)"
}


rule install-req ( properties * )
{
  assert-specified   <triplet>         : $(properties) ;
  assert-specified   <multilib>        : $(properties) ;
  assert-unspecified <multilib-hidden> : $(properties) ;
  assert-unspecified <binutils>        : $(properties) ;
  assert-unspecified <binutils-hidden> : $(properties) ;
  assert-unspecified <gmp>             : $(properties) ;
  assert-unspecified <gmp-hidden>      : $(properties) ;
  assert-unspecified <mpfr>            : $(properties) ;
  assert-unspecified <mpfr-hidden>     : $(properties) ;
  assert-unspecified <mpc>             : $(properties) ;
  assert-unspecified <mpc-hidden>      : $(properties) ;
  assert-unspecified <ppl>             : $(properties) ;
  assert-unspecified <ppl-hidden>      : $(properties) ;
  assert-unspecified <cloog>           : $(properties) ;
  assert-unspecified <cloog-hidden>    : $(properties) ;
  assert-specified   <gcc>             : $(properties) ;
  assert-unspecified <gcc-hidden>      : $(properties) ;
  assert-unspecified <icu4c>           : $(properties) ;
  assert-unspecified <icu4c-hidden>    : $(properties) ;
  assert-unspecified <mpi>             : $(properties) ;
  assert-unspecified <mpi-hidden>      : $(properties) ;
  assert-unspecified <openmpi>         : $(properties) ;
  assert-unspecified <openmpi-hidden>  : $(properties) ;
  assert-unspecified <boost>           : $(properties) ;
  assert-unspecified <boost-hidden>    : $(properties) ;

  local result ;

  local gcc = [ feature.get-values <gcc> : $(properties) ] ;
  if $(gcc) = $(GCC_BUILTIN) {
    # Skips the build of GCC.
  }
  else {
    local triplet = [ feature.get-values <triplet> : $(properties) ] ;

    local multilib = [ feature.get-values <multilib> : $(properties) ] ;
    if $(multilib) = yes {
      if $(triplet) = x86_64-unknown-linux-gnu || $(triplet) = x86_64-w64-mingw32 {
        # Do nothing.
      }
      else {
        errors.error "ERROR: `<multilib>' is not supported on `$(triplet)'." ;
      }
    }

    result = <source>configure ;
  }

  return $(result) ;
}

alias install : : <conditional>@install-req ;
explicit install ;

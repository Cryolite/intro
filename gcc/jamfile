project intro/gcc ;

import alias ;
import errors ;
import feature ;
import make ;
import path ;
import "$(INTRO_ROOT_DIR)/compilers"
  : is-gcc
    is-gcc-release
    is-gcc-snapshot
    get-gcc-versions
    is-clang
    is-icc
    get-frontend-version
    get-backend-gcc
    get-compiler-prefix
    get-default-bindir
    get-compiler-triplets
    get-property-dump-commands
  ;


for local version in [ get-gcc-versions $(COMPILERS) ] {
  make "$(INTRO_ROOT_DIR)/gcc-$(version).tar.bz2" : : @download ;
  explicit "$(INTRO_ROOT_DIR)/gcc-$(version).tar.bz2" ;
}

rule download ( targets * : sources * : properties * )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  if [ is-gcc "$(compiler)" ] {
    # Do nothing.
  }
  else if [ is-clang "$(compiler)" ] || [ is-icc "$(compiler)" ] {
    compiler = [ get-backend-gcc "$(compiler)" ] ;
  }
  else {
    errors.error "an internal error." ;
  }
  local version = [ get-frontend-version "$(compiler)" ] ;
  if [ is-gcc-release "$(compiler)" ] {
    URLS on $(targets)  = "'http://core.ring.gr.jp/pub/lang/egcs/releases/gcc-$(version)/gcc-$(version).tar.bz2'" ;
    URLS on $(targets) += "'http://ftp.dti.ad.jp/pub/lang/gcc/releases/gcc-$(version)/gcc-$(version).tar.bz2'" ;
    URLS on $(targets) += "'http://ftp.tsukuba.wide.ad.jp/software/gcc/releases/gcc-$(version)/gcc-$(version).tar.bz2'" ;
  }
  else if [ is-gcc-snapshot "$(compiler)" ] {
    URLS on $(targets)  = "'http://core.ring.gr.jp/pub/lang/egcs/snapshots/$(version)/gcc-$(version).tar.bz2'" ;
    URLS on $(targets) += "'http://ftp.dti.ad.jp/pub/lang/gcc/snapshots/$(version)/gcc-$(version).tar.bz2'" ;
    URLS on $(targets) += "'http://ftp.tsukuba.wide.ad.jp/software/gcc/snapshots/$(version)/gcc-$(version).tar.bz2'" ;
  }
  else {
    errors.error "an internal error." ;
  }
  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions download
{
  bash -s << 'EOS'
  exec >> '$(STDOUT_)' 2>> '$(STDERR_)'
$(PROPERTY_DUMP_COMMANDS)
  LINENO_ADJ=`grep -Fn 73f66309-1b4e-4509-95e7-0d497563bfde '$(INTRO_ROOT_DIR)/gcc/jamfile' | grep -Eo '^[[:digit:]]+'`
  LINENO_ADJ=`expr $LINENO_ADJ - $LINENO + 1`
  PS4='+gcc/jamfile:`expr $LINENO + $LINENO_ADJ`: '
  set -ex
  rm -rf '$(<)'
  trap "rm -rf '$(<)'" ERR HUP INT QUIT TERM
  for url in $(URLS) ; do
    ( cd '$(<:D)' && wget -- "$url" ) && break
  done
  [ -f '$(<)' ]
EOS
}



for local version in [ get-gcc-versions $(COMPILERS) ] {
  # Use `README' file as a target representing the completion of
  # decompression action. It is suitable for the purpose because of the
  # following reasons;
  #
  #   - The name of this file is considered stable even if the version
  #     changes.
  #   - This file won't be modified during the build procedure.
  #
  make "$(INTRO_ROOT_DIR)/gcc-$(version)/README"
    : "$(INTRO_ROOT_DIR)/gcc-$(version).tar.bz2"
    : @expand
    ;
  explicit "$(INTRO_ROOT_DIR)/gcc-$(version)/README" ;
}

rule expand ( targets * : sources * : properties * )
{
  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions expand
{
  bash -s << 'EOS'
  exec >> '$(STDOUT_)' 2>> '$(STDERR_)'
$(PROPERTY_DUMP_COMMANDS)
  LINENO_ADJ=`grep -Fn aff7efdc-c590-40fa-af74-e417dfe54658 '$(INTRO_ROOT_DIR)/gcc/jamfile' | grep -Eo '^[[:digit:]]+'`
  LINENO_ADJ=`expr $LINENO_ADJ - $LINENO + 1`
  PS4='+gcc/jamfile:`expr $LINENO + $LINENO_ADJ`: '
  set -ex
  rm -rf '$(<:D)'
  [ -f '$(>)' ]
  trap "rm -rf '$(>)' '$(<:D)'" ERR HUP INT QUIT TERM
  tar xjvf '$(>)' -C '$(INTRO_ROOT_DIR)'
  # If the timestamp of the tarball's contents is restored, the modification
  # time of the source directory could be older than the one of the tarball.
  # Such behavior is not desirable because the decompression always happens.
  # Therefore, `touch' is required.
  touch --no-create '$(<)'
  [ -f '$(<)' ]
EOS
}



rule srcdir-req ( properties * )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  if [ is-gcc "$(compiler)" ] {
    # Do nothing.
  }
  else if [ is-clang "$(compiler)" ] || [ is-icc "$(compiler)" ] {
    compiler = [ get-backend-gcc "$(compiler)" ] ;
  }
  else {
    errors.error "an internal error." ;
  }
  local version = [ get-frontend-version "$(compiler)" ] ;
  return "<source>$(INTRO_ROOT_DIR)/gcc-$(version)/README/$(DEFAULT_PROPERTIES)" ;
}

alias srcdir : : <conditional>@srcdir-req ;
explicit srcdir ;



rule gxx-wrapper-conditional ( properties * )
{
  local binutils = [ feature.get-values <binutils-hidden>      : $(properties) ] ;
  local gmp      = [ feature.get-values <gmp-for-gcc-hidden>   : $(properties) ] ;
  local mpfr     = [ feature.get-values <mpfr-for-gcc-hidden>  : $(properties) ] ;
  local mpc      = [ feature.get-values <mpc-for-gcc-hidden>   : $(properties) ] ;
  local isl      = [ feature.get-values <isl-for-gcc-hidden>   : $(properties) ] ;
  local cloog    = [ feature.get-values <cloog-for-gcc-hidden> : $(properties) ] ;
  local compiler = [ feature.get-values <compiler-hidden>      : $(properties) ] ;
  local bindir = [ get-default-bindir "$(PREFIX)" : $(properties) ] ;

  local result ;
  if "$(binutils)" != "unspecified" {
    result += "<source>../binutils//srcdir" ;
  }
  if "$(gmp)" != "unspecified" {
    result += "<source>../gmp//srcdir/<gmp-hidden>$(gmp)" ;
  }
  if "$(mpfr)" != "unspecified" {
    result += "<source>../mpfr//srcdir/<mpfr-hidden>$(mpfr)" ;
  }
  if "$(mpc)" != "unspecified" {
    result += "<source>../mpc//srcdir/<mpc-hidden>$(mpc)" ;
  }
  if "$(isl)" != "unspecified" {
    result += "<source>../isl//srcdir/<isl-hidden>$(isl)" ;
  }
  if "$(cloog)" != "unspecified" {
    result += "<source>../cloog//srcdir/<cloog-hidden>$(cloog)" ;
  }
  result += "<location>$(bindir)" ;
  return $(result) ;
}

make g++-wrapper
  : srcdir
  : @make-install
  : $(USE_BINUTILS)
    $(USE_GMP_FOR_GCC)
    $(USE_MPFR_FOR_GCC)
    $(USE_MPC_FOR_GCC)
    $(USE_ISL_FOR_GCC)
    $(USE_CLOOG_FOR_GCC)
    $(USE_COMPILER)
    $(USE_MULTITARGET)
    <conditional>@gxx-wrapper-conditional
  ;
explicit g++-wrapper ;

rule make-install ( targets * : sources * : properties * )
{
  local compiler = [ feature.get-values <compiler> : $(properties) ] ;
  local version ;
  if [ is-gcc "$(compiler)" ] {
    version = [ get-frontend-version "$(compiler)" ] ;
  }
  else if [ is-clang "$(compiler)" ] || [ is-icc "$(compiler)" ] {
    local backend-gcc = [ get-backend-gcc "$(compiler)" ] ;
    version = [ get-frontend-version "$(backend-gcc)" ] ;
  }
  else {
    errors.error "an internal error." ;
  }

  local srcdir = "$(INTRO_ROOT_DIR)/gcc-$(version)" ;
  SRCDIR on $(targets) = "$(srcdir)" ;

  local objdir = "$(INTRO_ROOT_DIR)/objdir" ;
  OBJDIR on $(targets) = "$(objdir)" ;

  OPTIONS on $(targets) = ;

  # Set the compiler-specific prefix.
  local compiler-prefix = [ get-compiler-prefix "$(PREFIX)" : $(properties) ] ;
  local compiler-prefix-native = [ path.native "$(compiler-prefix)" ] ;
  COMPILER_PREFIX on $(targets) = "$(compiler-prefix-native)" ;

  # Set `--prefix' option for `configure' script.
  OPTIONS on $(targets) += "--prefix='$(compiler-prefix-native)'" ;

  local triplets = [ get-compiler-triplets $(properties) ] ;
  local build-triplet = "$(triplets[1])" ;
  local host-triplet = "$(triplets[2])" ;
  local target-triplet = "$(triplets[3])" ;
  local enabled-targets = "$(triplets[4])" ;
  BUILD_TRIPLET on $(targets) = "$(build-triplet)" ;
  HOST_TRIPLET on $(targets) = "$(host-triplet)" ;
  TARGET_TRIPLET on $(targets) = "$(target-triplet)" ;

  # Set `--build', `--host' and `--target' options for `configure' script.
  OPTIONS on $(targets) += "--build=$(build-triplet)" ;
  OPTIONS on $(targets) += "--host=$(host-triplet)" ;
  OPTIONS on $(targets) += "--target=$(target-triplet)" ;

  # `configure' will guess the suitable link variants even without the
  # following options. And if the following options are explicitly
  # specified, `binutils' will create shared variant of libraries, in
  # particular `libbfd' and `libopcodes', on which final GCC executables
  # have run-time dependencies. It is not desirable because it requires care
  # when the executables are invoked.
  #OPTIONS on $(targets) += "--enable-shared" ;
  #OPTIONS on $(targets) += "--enable-static" ;

  # Set the linker configuration to be used by the installed GCC front-end.
  if [ is-gcc "$(compiler)" ] || [ is-icc "$(compiler)" ] {
    switch "$(WITH_GOLD)" {
    case "yes" :
      OPTIONS on $(targets) += "--enable-ld" ;
      OPTIONS on $(targets) += "--enable-gold=default" ;
    case "no" :
      OPTIONS on $(targets) += "--enable-ld=default" ;
      OPTIONS on $(targets) += "--enable-gold" ;
    case "*" :
      errors.error "an internal error." ;
    }
  }
  else if [ is-clang "$(compiler)" ] {
    # Clang requires gold linker in order to enable plugin support.
    # See http://llvm.org/docs/GoldPlugin.html.
    if "$(WITH_GOLD)" != "yes" {
      errors.error "Because Clang requires gold linker to enable plugin support, specify `--with-gold'. See also http://llvm.org/docs/GoldPlugin.html." ;
    }
    OPTIONS on $(targets) += "--enable-ld" ;
    OPTIONS on $(targets) += "--enable-gold=default" ;
  }
  else {
    errors.error "an internal error." ;
  }

  local multitarget = [ feature.get-values <multitarget> : $(properties) ] ;

  if "$(target-triplet)" = "x86_64-unknown-linux-gnu" && "$(multitarget)" = "yes" {
    if "$(host-triplet)" != "x86_64-unknown-linux-gnu" {
      errors.error "an internal error." ;
    }
    OPTIONS on $(targets) += "--enable-multilib" ;
  }
  else if "$(multitarget)" = "yes" {
    errors.error "an internal error." ;
  }
  else {
    OPTIONS on $(targets) += "--disable-multilib" ;
  }

  if "$(host-triplet)" = "x86_64-w64-mingw32" || "$(host-triplet)" = "i686-w64-mingw32" {
    OPTIONS on $(targets) += "--enable-threads=win32" ;
  }
  else {
    OPTIONS on $(targets) += "--enable-threads=posix" ;
  }

  OPTIONS on $(targets) += "--enable-tls" ;

  if "$(target-triplet)" = "i686-pc-linux-gnu" || "$(target-triplet)" = "i686-w64-mingw32" || "$(target-triplet)" = "i686-pc-cygwin" {
    OPTIONS on $(targets) += "--with-arch=i686" ;
    OPTIONS on $(targets) += "--with-tune=generic" ;
  }
  else if "$(target-triplet)" = "x86_64-unknown-linux-gnu" {
    if "$(multitarget)" = "yes" {
      OPTIONS on $(targets) += "--with-arch-32=i686" ;
    }
    OPTIONS on $(targets) += "--with-tune=generic" ;
  }
  else if "$(target-triplet)" = "x86_64-w64-mingw32" {
    OPTIONS on $(targets) += "--with-tune=generic" ;
  }
  else {
    errors.error "an internal error." ;
  }

  if "$(target-triplet)" = "i686-pc-cygwin" {
    # Follow what the built-in GCC does.
    OPTIONS on $(targets) += "--disable-__cxa_atexit" ;
  }

  # Required explicitly by `--enable-gold' on GCC 4.6.
  # Required by GCC 4.7?
  OPTIONS on $(targets) += "--enable-build-with-cxx" ;

  OPTIONS on $(targets) += "--enable-bootstrap" ;

  OPTIONS on $(targets) += "--enable-languages=c,c++" ;

  OPTIONS on $(targets) += "--enable-libssp" ;

  # `--enable-libquadmath' causes an error on Ubuntu 12.04 or above.
  OPTIONS on $(targets) += "--disable-libquadmath" ;

  if "$(target-triplet)" = "x86_64-w64-mingw32" || "$(target-triplet)" = "i686-w64-mingw32" {
    # The target is `*-w64-mingw32.'
    # `--enable-libgomp' option requires `pthreads-w32' on the target.
    # Currently, just disable this option.
    OPTIONS on $(targets) += "--disable-libgomp" ;
  }
  else {
    OPTIONS on $(targets) += "--enable-libgomp" ;
  }

  if "$(target-triplet)" = "i686-w64-mingw32" || "$(target-triplet)" = "i686-pc-cygwin" {
    OPTIONS on $(targets) += "--with-dwarf2" ;
    OPTIONS on $(targets) += "--disable-sjlj-exceptions" ;
  }
  # `--with-dwarf2' is not supported on `x86_64-w64-mingw32' targets.

  OPTIONS on $(targets) += "--enable-targets=$(enabled-targets)" ;

  if "$(target-triplet)" = "x86_64-w64-mingw32" || "$(target-triplet)" = "i686-w64-mingw32" {
    OPTIONS on $(targets) += "--disable-win32-registry" ;
  }

  #OPTIONS on $(targets) += --enable-checking=all ;

  OPTIONS on $(targets) += "--disable-nls" ;

  if "$(target-triplet)" = "i686-pc-cygwin" {
    # Follow what the built-in GCC does.
    OPTIONS on $(targets) += "--enable-graphite" ;
  }

  local isl = [ feature.get-values <isl-for-gcc> : $(properties) ] ;
  local cloog = [ feature.get-values <cloog-for-gcc> : $(properties) ] ;
  if "$(isl)" != "unspecified" && "$(cloog)" != "unspecified" {
    # Options required to build CLooG alongside during GCC bootstrap.
    OPTIONS on $(targets) += "--enable-cloog-backend=isl" ;
  }

  OPTIONS on $(targets) += "--enable-linker-build-id" ;

  OPTIONS on $(targets) += "--enable-lto" ;

  OPTIONS on $(targets) += "--enable-plugins" ;

  OPTIONS on $(targets) += "--with-system-zlib" ;

  OPTIONS on $(targets) += "--enable-libstdcxx-time=yes" ;

  OPTIONS on $(targets) += "--enable-libstdcxx-debug" ;

  OPTIONS on $(targets) += "--enable-symvers=gnu-versioned-namespace" ;

  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions make-install
{
  bash -s << 'EOS'
  exec >> '$(STDOUT_)' 2>> '$(STDERR_)'
$(PROPERTY_DUMP_COMMANDS)
  LINENO_ADJ=`grep -Fn 5b21d7be-6009-4ae7-a9bc-2b245392e71f '$(INTRO_ROOT_DIR)/gcc/jamfile' | grep -Eo '^[[:digit:]]+'`
  LINENO_ADJ=`expr $LINENO_ADJ - $LINENO + 1`
  PS4='+gcc/jamfile:`expr $LINENO + $LINENO_ADJ`: '
  set -ex

  cleanup ()
  {
    if [ -d '$(OBJDIR)' ]; then
      mv -n '$(OBJDIR)' "$(INTRO_ROOT_DIR)/objdir_$$"
    fi

    # Restores the hacked configure scripts.
    if [ -e '$(SRCDIR)/isl/real-configure' ]; then
      [ -x '$(SRCDIR)/isl/real-configure' ]
      mv -f '$(SRCDIR)/isl/real-configure' '$(SRCDIR)/isl/configure'
    fi
    if [ -e '$(SRCDIR)/cloog/real-configure' ]; then
      [ -x '$(SRCDIR)/cloog/real-configure' ]
      mv -f '$(SRCDIR)/cloog/real-configure' '$(SRCDIR)/cloog/configure'
    fi

    # Removes symlinks in GCC source tree.
    ( cd '$(SRCDIR)' && rm -f bfd binutils gas gold gprof ld opcodes gmp mpfr mpc isl cloog )
  }

  rm -rf '$(OBJDIR)'
  cleanup

  trap cleanup ERR HUP INT QUIT TERM

  if [ -n '$(BINUTILS)' ]; then
    # Creates symlinks to source directories of GNU Binutils libraries and
    # tools (opcodes, bfd, binutils, gas, ld, gold, gprof) in GCC source
    # tree.
    ( cd '$(SRCDIR)' && ln -sf ../binutils-$(BINUTILS)/{bfd,binutils,gas,gold,gprof,ld,opcodes} . )
  fi

  if [ -n '$(GMP_FOR_GCC)' ]; then
    # Creates a symlink to GMP source tree in GCC source tree.
    ( cd '$(SRCDIR)' && ln -sfT ../gmp-$(GMP_FOR_GCC) gmp )
  fi

  if [ -n '$(MPFR_FOR_GCC)' ]; then
    # Creates a symlink to MPFR source tree in GCC source tree.
    ( cd '$(SRCDIR)' && ln -sfT ../mpfr-$(MPFR_FOR_GCC) mpfr )
  fi

  if [ -n '$(MPC_FOR_GCC)' ]; then
    # Creates a symlink to MPC source tree in GCC source tree.
    ( cd '$(SRCDIR)' && ln -sfT ../mpc-$(MPC_FOR_GCC) mpc )
  fi

  if [ \( `echo $(ISL_FOR_GCC) `x != x \) -a \( `echo $(CLOOG_FOR_GCC) `x != x \) ]; then
    # Creates a symlink to ISL source tree in GCC source tree.
    ( cd '$(SRCDIR)' && ln -sfT ../isl-$(ISL_FOR_GCC) isl )
    # An ad-hoc workaround that enables ISL configure script to find GMP
    # build directory during GCC bootstrap procedure.
    ( cd '$(SRCDIR)' && mv -n isl/configure isl/real-configure )
    cat - > '$(SRCDIR)/isl/configure' << 'EOF'
#!/usr/bin/env sh

echo original options for isl configure script: "$@"
dir=`dirname "$0"`
"$dir/real-configure" --srcdir='$(SRCDIR)/isl' --build=$(BUILD_TRIPLET) --host=$(HOST_TRIPLET) --disable-shared --enable-static --with-gmp=build --with-gmp-builddir='$(OBJDIR)/gmp'
EOF
    chmod +x '$(SRCDIR)/isl/configure'
  fi

  if [ \( `echo $(ISL_FOR_GCC) `x != x \) -a \( `echo $(CLOOG_FOR_GCC) `x != x \) ]; then
    # Creates a symlink to CLooG source tree in GCC source tree.
    ( cd '$(SRCDIR)' && ln -sfT ../cloog-$(CLOOG_FOR_GCC) cloog )
    # An ad-hoc workaround that enables CLooG configure script to find GMP
    # and ISL build directories during GCC bootstrap procedure.
    ( cd '$(SRCDIR)' && mv -n cloog/configure cloog/real-configure )
    cat - > '$(SRCDIR)/cloog/configure' << 'EOF'
#!/usr/bin/env sh

echo original options for CLooG configure script: "$@"
dir=`dirname "$0"`
"$dir/real-configure" --srcdir='$(SRCDIR)/cloog' --build=$(BUILD_TRIPLET) --host=$(HOST_TRIPLET) --disable-shared --enable-static --with-gmp=build --with-gmp-builddir='$(OBJDIR)/gmp' --with-isl=build --with-isl-builddir='$(OBJDIR)/isl' --with-osl=no --with-bits=gmp
EOF
    chmod +x '$(SRCDIR)/cloog/configure'
  fi

  # Creates `objdir`.
  ( cd '$(INTRO_ROOT_DIR)' && mkdir objdir )

  if [ -f /etc/debian_version ] && grep -Fq wheezy/sid /etc/debian_version; then
    if [ `uname --machine` = x86_64 -a `uname --operating-system` = GNU/Linux ]; then
      LIBRARY_PATH="/usr/lib/x86_64-linux-gnu:/lib/x86_64-linux-gnu${LIBRARY_PATH:+:$LIBRARY_PATH}"
      export LIBRARY_PATH
    fi
  fi

  [ -x '$(SRCDIR)/configure' ]
  [ -x '$(SRCDIR)/config.sub' ]
  [ `'$(SRCDIR)/config.sub' $(BUILD_TRIPLET)` = $(BUILD_TRIPLET) ]
  [ `'$(SRCDIR)/config.sub' $(HOST_TRIPLET)` = $(HOST_TRIPLET) ]
  [ `'$(SRCDIR)/config.sub' $(TARGET_TRIPLET)` = $(TARGET_TRIPLET) ]

  # `configure`.
  ( cd '$(OBJDIR)' && '$(SRCDIR)/configure' $(OPTIONS) )

  # Checks the creation of `Makefile`.
  [ -f '$(OBJDIR)/Makefile' ]

  # `make`.
  # ISL and CLooG require GMP. However, they will fail to find GMP header
  # files, `<gmp.h>` and `<gmpxx.h>`. `<gmp.h>` will be created in
  # `(OBJDIR)/gmp` during the bootstrap procedure, whereas `<gmpxx.h>`
  # resides in `(SRCDIR)/gmp`. So, `CPATH` environment variable is set to
  # include the paths to those header files.
  ( cd '$(OBJDIR)' && env CPATH="$(OBJDIR)/gmp:$(SRCDIR)/gmp${CPATH:+:$CPATH}" make --jobs=$(CONCURRENCY) )

  if [ $(GCC_CHECK) = yes ]; then
    # `make check`.
    ( cd '$(OBJDIR)' && make -k check )
    ( cd '$(OBJDIR)' && cp gcc/testsuite/{gcc/gcc.sum,g++/g++.sum} x86_64-unknown-linux-gnu/{libgomp/testsuite/libgomp.sum,libmudflap/testsuite/libmudflap.sum,libstdc++-v3/testsuite/libstdc++.sum} '$(COMPILER_PREFIX)' )
  fi

  # `make install`.
  ( cd '$(OBJDIR)' && make install )

  # Cleans up the `objdir`, restores the hacked configure scripts and
  # removes symlinks in GCC source tree.
  rm -rf '$(OBJDIR)'
  cleanup

  # A workaround. Creates a symlink to `ld` in the directory where the
  # installed GCC front end searches for subprograms.
  ( cd '$(COMPILER_PREFIX)/libexec/gcc/$(HOST_TRIPLET)'/`'$(COMPILER_PREFIX)/bin/gcc' -dumpversion` && ln -sf ../../../../bin/ld real-ld )

  # Some configure scripts (e.g. MPC's) require `ld` instead of `real-ld`.
  ( cd '$(COMPILER_PREFIX)/libexec/gcc/$(HOST_TRIPLET)'/`'$(COMPILER_PREFIX)/bin/gcc' -dumpversion` && ln -sf ../../../../bin/ld ld )

  # Installs the modified specfile and wrapper scripts.
  install --mode=755 '$(INTRO_ROOT_DIR)/template/$(HOST_TRIPLET)'/{vars64.sh,vars64debug.sh,vars32.sh,vars32debug.sh,hack-gcc-specs,gcc-wrapper,g++-wrapper} '$(COMPILER_PREFIX)/bin'

  # Checks the creation of `g++-wrapper`.
  [ -x '$(<)' ]
EOS
}



alias install : "g++-wrapper/$(DEFAULT_COMPILER_PROPERTIES)" ;
explicit install ;

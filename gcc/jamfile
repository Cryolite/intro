project gcc ;

import alias ;
import errors ;
import feature ;
import make ;
import path ;
import regex ;


rule binutils-dep-req ( properties * )
{
  local result ;
  local stage = [ feature.get-values <intro-stage> : $(properties) ] ;
  if $(stage) = 2 || $(stage) = 3 {
    result = <source>../binutils//install ;
    # `<intro-stage>' is automatically propagated.
    # `<intro-host>' is automatically propagated.
    # `<intro-link>unspecified' is automatically propagated.
    # `<intro-multilib>' is automatically propagated.
    # `<binutils-version>' is automatically propagated.
    # `<binutils-version-hidden>unspecified' is automatically propagated.
    result = $(result)/<gmp-version>unspecified ;
    # `<gmp-version-hidden>unspecified' is automatically propagated.
    result = $(result)/<mpfr-version>unspecified ;
    # `<mpfr-version-hidden>unspecified' is automatically propagated.
    result = $(result)/<mpc-version>unspecified ;
    # `<mpc-version-hidden>' is automatically propagated.
    if $(stage) = 2 {
      result = $(result)/<gcc-version>unspecified ;
    }
    else {
      # `<gcc-version>' is automatically propagated.
    }
    result = $(result)/<gcc-default>unspecified ;
  }
  return $(result) ;
}

alias binutils-dep : : <conditional>@binutils-dep-req ;
explicit binutils-dep ;


rule mpc-dep-req ( properties * )
{
  local result = <source>../mpc//install ;
  local stage = [ feature.get-values <intro-stage> : $(properties) ] ;
  if $(stage) = 1 || $(stage) = 2 {
    result = $(result)/<intro-stage>1 ;
    result = $(result)/<intro-host>unspecified ;
    local build = [ SHELL "\"$(INTRO_ROOT_DIR)/gcc/config.guess\" | tr --delete '\n'" ] ;
    if [ regex.match "(-w64-mingw32)$" : $(build) : 1 ] {
      result = $(result)/<intro-link>shared ;
    }
    else {
      result = $(result)/<intro-link>both ;
    }
  }
  else {
    result = $(result)/<intro-stage>3 ;
    # `<intro-host>' is automatically propagated.
    if [ regex.match "(-w64-mingw32)$" : $(HOST) : 1 ] {
      result = $(result)/<intro-link>shared ;
    }
    else {
      result = $(result)/<intro-link>both ;
    }
  }
  result = $(result)/<intro-multilib>unspecified ;
  result = $(result)/<binutils-version>unspecified ;
  # `<binutils-version-hidden>unspecified' is automatically propagated.
  # `<gmp-version>' is automatically propagated.
  # `<gmp-version-hidden>unspecified' is automatically propagated.
  # `<mpfr-version>' is automatically propagated.
  # `<mpfr-version-hidden>unspecified' is automatically propagated.
  # `<mpc-version>' is automatically propagated.
  # `<mpc-version-hidden>' is automatically propagated.
  if $(stage) = 1 || $(stage) = 2 {
    result = $(result)/<gcc-version>unspecified ;
  }
  else {
    # `<gcc-version>' is automatically propagated.
  }
  result = $(result)/<gcc-default>unspecified ;
  return $(result) ;
}

alias mpc-dep : : <conditional>@mpc-dep-req ;
explicit mpc-dep ;


rule mingw-w64-headers-dep-req ( properties * )
{
  local result = ;
  local stage = [ feature.get-values <intro-stage> : $(properties) ] ;
  if $(stage) = 2 {
    if [ regex.match "(-w64-mingw32)$" : $(HOST) : 1 ] {
      result = <source>../mingw-w64-headers//install ;
      # `<intro-stage>2' is automatically propagated.
      # `<intro-host>' is automatically propagated.
      # `<intro-link>unspecified' is automatically propagated.
      result = $(result)/<intro-multilib>unspecified ;
      result = $(result)/<binutils-version>unspecified ;
      # `<binutils-version-hidden>unspecified' is automatically propagated.
      result = $(result)/<gmp-version>unspecified ;
      # `<gmp-version-hidden>unspecified' is automatically propagated.
      result = $(result)/<mpfr-version>unspecified ;
      # `<mpfr-version-hidden>unspecified' is automatically propagated.
      result = $(result)/<mpc-version>unspecified ;
      # `<mpc-version-hidden>' is automatically propagated.
      result = $(result)/<gcc-version>unspecified ;
      result = $(result)/<gcc-default>unspecified ;
    }
    else {
      errors.error "ERROR: unknown cross target." ;
    }
  }
  return $(result) ;
}

alias mingw-w64-headers-dep : : <conditional>@mingw-w64-headers-dep-req ;
explicit mingw-w64-headers-dep ;


make download : : @download-gcc ;
explicit download ;

rule download-gcc ( targets * : sources * : properties * )
{
  local version = [ feature.get-values <gcc-version> : $(properties) ] ;
  URL on $(targets) = http://ftp.tsukuba.wide.ad.jp/software/gcc/releases/gcc-$(version)/gcc-$(version).tar.bz2 ;
  TARBALL_GZ on $(targets) = $(INTRO_ROOT_DIR)/gcc-$(version).tar.gz ;
  TARBALL_BZ2 on $(targets) = $(INTRO_ROOT_DIR)/gcc-$(version).tar.bz2 ;
}
actions download-gcc
{
  rm -f "$(<)" || exit $?
  if [ ! -f "$(TARBALL_GZ)" -a ! -f "$(TARBALL_BZ2)" ]; then
    ( cd "$(TARBALL_BZ2:D)" && wget --quiet -- '$(URL)' ) \
      || { echo "ERROR: failed to download the GCC tarball." 2>>"$(STDOUT_)" 1>&2; exit 1; }
    [ -f "$(TARBALL_BZ2)" ] || exit 1
  fi
  [ -e "$(<)" ] && exit 1
  touch "$(<)"
}


make expand : download : @expand-gcc ;
explicit expand ;

rule expand-gcc ( targets * : sources * : properties * )
{
  if ! $(sources[1]) {
    errors.error "ERROR: wrong number of sources." ;
  }
  if $(sources[2]) {
    errors.error "ERROR: wrong number of sources." ;
  }
  local version = [ feature.get-values <gcc-version> : $(properties) ] ;
  TARBALL_GZ on $(targets) = $(INTRO_ROOT_DIR)/gcc-$(version).tar.gz ;
  TARBALL_BZ2 on $(targets) = $(INTRO_ROOT_DIR)/gcc-$(version).tar.bz2 ;
  DEST_DIR on $(targets) = $(INTRO_ROOT_DIR)/gcc-$(version) ;
}
actions expand-gcc
{
  rm -f "$(<)" || exit $?
  [ -f "$(>[1])" ] || exit 1
  if [ ! -x "$(DEST_DIR)/configure" ]; then
    rm -rf "$(DEST_DIR)" || exit $?
    if [ -f "$(TARBALL_GZ)" ]; then
      tar xzf "$(TARBALL_GZ)" -C "$(TARBALL_GZ:D)" \
        || { echo "ERROR: failed to expand the tarball for the GCC build." 2>>"$(STDERR_)" 1>&2; exit 1; }
    elif [ -f "$(TARBALL_BZ2)" ]; then
      tar xjf "$(TARBALL_BZ2)" -C "$(TARBALL_BZ2:D)" \
        || { echo "ERROR: failed to expand the tarball for the GCC build." 2>>"$(STDERR_)" 1>&2; exit 1; }
    else
      exit 1
    fi
    [ -x "$(DEST_DIR)/configure" ] || exit 1
  fi
  [ -e "$(<)" ] && exit 1
  touch "$(<)"
}


make configure
  : binutils-dep
    mpc-dep
    mingw-w64-headers-dep
    expand/<intro-stage>unspecified/<intro-host>unspecified/<intro-multilib>unspecified/<binutils-version>unspecified/<gmp-version>unspecified/<mpfr-version>unspecified/<mpc-version>unspecified
  : @configure-gcc
  ;
explicit configure ;

rule configure-gcc ( targets * : sources * : properties * )
{
  OPTIONS on $(targets) = ;

  local version = [ feature.get-values <gcc-version> : $(properties) ] ;

  # Set the path to the 'configure' file.
  local configure = $(INTRO_ROOT_DIR)/gcc-$(version)/configure ;
  CONFIGURE on $(targets) = $(configure) ;

  # Set the '--build', '--host' and '--target' options for the 'configure' script.
  local stage = [ feature.get-values <intro-stage> : $(properties) ] ;
  local build = [ SHELL "\"$(INTRO_ROOT_DIR)/gcc/config.guess\" | tr --delete '\n'" ] ;
  if $(stage) = 1 {
    OPTIONS on $(targets) += --build=$(build) ;
    OPTIONS on $(targets) += --host=$(build) ;
    OPTIONS on $(targets) += --target=$(build) ;
  }
  else if $(stage) = 2 {
    OPTIONS on $(targets) += --build=$(build) ;
    OPTIONS on $(targets) += --host=$(build) ;
    OPTIONS on $(targets) += --target=$(HOST) ;
  }
  else {
    OPTIONS on $(targets) += --build=$(build) ;
    OPTIONS on $(targets) += --host=$(HOST) ;
    OPTIONS on $(targets) += --build=$(HOST) ;
  }

  # Set the '--prefix' option for the 'configure' script.
  if $(stage) = 1 || $(stage) = 2 {
    OPTIONS on $(targets) += --prefix=\"$(PREFIX)\" ;
  }
  else {
    OPTIONS on $(targets) += --prefix=\"$(CROSS_PREFIX)\" ;
  }

  if $(stage) = 2 {
    OPTIONS on $(targets) += --program-prefix=$(HOST)- ;
  }

  local gcc-default = [ feature.get-values <gcc-default> : $(properties) ] ;
  if $(gcc-default) = no {
    OPTIONS on $(targets) += --program-suffix=-$(version) ;
  }

  OPTIONS on $(targets) += --enable-shared ;

  local multilib = [ feature.get-values <intro-multilib> : $(properties) ] ;
  if $(multilib) = yes {
    OPTIONS on $(targets) += --enable-multilib ;
  }
  else {
    OPTIONS on $(targets) += --disable-multilib ;
  }

  OPTIONS on $(targets) += --enable-libstdcxx-debug ;

  OPTIONS on $(targets) += --disable-libstdcxx-pch ;

  OPTIONS on $(targets) += --enable-threads ;

  if $(stage) = 1 || $(HOST_RUNNABLE) = yes {
    OPTIONS on $(targets) += --enable-bootstrap ;
  }
  else {
    OPTIONS on $(targets) += --disable-bootstrap ;
  }

  if $(gcc-default) = no {
    OPTIONS on $(targets) += --enable-version-specific-runtime-libs ;
  }

  OPTIONS on $(targets) += --enable-languages=c,c++ ;

  if $(stage) = 1 && [ regex.match "(-w64-mingw32)$" : $(build) : 1 ] {
    # The target is `*-w64-mingw32.'
    # `--enable-libgomp' option requires `pthreads-w32' on the target.
    # Currently, just disable this option.
    OPTIONS on $(targets) += --disable-libgomp ;
  }
  else if ( $(stage) = 2 || $(stage) = 3 ) && [ regex.match "(-w64-mingw32)$" : $(HOST) : 1 ] {
    # The target is `*-w64-mingw32.'
    # `--enable-libgomp' option requires `pthreads-w32' on the target.
    # Currently, just disable this option.
    OPTIONS on $(targets) += --disable-libgomp ;
  }
  else {
    OPTIONS on $(targets) += --enable-libgomp ;
  }

  # `--with-dwarf2' is not supported on 64-bit MinGW-w64 targets,
  # so currently disable this option for any `*-w64-mingw32' targets.
  # Note that this option also disabled for 32-bit MinGW-w64 targets,
  # on which it is supported. Support of this option for 32-bit
  # MinGW-w64 is in my to-do list.
  # if [ regex.match "(-w64-mingw32)$" : $(HOST) : 1 ] {
  #   OPTIONS on $(targets) += --with-dwarf2 ;
  # }

  if $(multilib) = yes {
    OPTIONS on $(targets) += --enable-targets=all ;
  }

  # Set `--disable-win32-registry' and `--disable-nls' options for Windows hosts.
  if ( $(stage) = 1 || $(stage) = 2 ) && [ regex.match "(-w64-mingw32)$" : $(build) : 1 ] {
    OPTIONS on $(targets) += --disable-win32-registry ;
    OPTIONS on $(targets) += --disable-nls ;
  }
  else if $(stage) = 3 && [ regex.match "(-w64-mingw32)$" : $(HOST) : 1 ] {
    OPTIONS on $(targets) += --disable-win32-registry ;
    OPTIONS on $(targets) += --disable-nls ;
  }

  # Set the `--with-gmp', `--with-mpfr' and `--with-mpc' options for the 'configure' script.
  if $(stage) = 1 || $(stage) = 2 {
    OPTIONS on $(targets) += --with-gmp=\"$(PREFIX)\" ;
    OPTIONS on $(targets) += --with-mpfr=\"$(PREFIX)\" ;
    OPTIONS on $(targets) += --with-mpc=\"$(PREFIX)\" ;
  }

  # Set the '--with-sysroot' option for the 'configure' script.
  if $(stage) = 2 {
    OPTIONS on $(targets) += --with-sysroot=\"$(PREFIX)\" ;
  }
  else if $(stage) = 3 {
    OPTIONS on $(targets) += --with-sysroot=\"$(CROSS_PREFIX)\" ;
  }

  # See the note for `--with-dwarf2' option.
  # if [ regex.match "(-w64-mingw32)$" : $(HOST) : 1 ] {
  #   OPTIONS on $(targets) += --disable-sjlj-exceptions ;
  # }

  SET_MINGW_SYMLINK on $(targets) = ;
  UNSET_MINGW_SYMLINK on $(targets) = ;
  if $(stage) = 2 && [ regex.match "(-w64-mingw32)$" : $(HOST) : 1 ] {
    SET_MINGW_SYMLINK on $(targets) = "ln -sf \"$(PREFIX)/$(HOST)\" \"$(PREFIX)/mingw\" || exit $?" ;
    UNSET_MINGW_SYMLINK on $(targets) = "rm \"$(PREFIX)/mingw\"" ;
  }
  else if $(stage) = 3 && [ regex.match "(-w64-mingw32)$" : $(HOST) : 1 ] {
    SET_MINGW_SYMLINK on $(targets) = "ln -sf \"$(CROSS_PREFIX)/$(HOST)\" \"$(CROSS_PREFIX)/mingw\" || exit $?" ;
    UNSET_MINGW_SYMLINK on $(targets) = "rm \"$(CROSS_PREFIX)/mingw\"" ;
  }

  SET_MINGW_WINSUP_SYMLINK on $(targets) = ;
  UNSET_MINGW_WINSUP_SYMLINK on $(targets) = ;
  if $(stage) = 3 && [ regex.match "(-w64-mingw32)$" : $(HOST) : 1 ] {
    SET_MINGW_WINSUP_SYMLINK on $(targets) = "{ mkdir -p \"$(INTRO_ROOT_DIR)/gcc-$(version)/winsup/mingw\" && ( cd \"$(INTRO_ROOT_DIR)/gcc-$(version)/winsup/mingw\" && ln -sf \"$(CROSS_PREFIX)/$(HOST)/include\" include ); } || exit $?" ;
    UNSET_MINGW_WINSUP_SYMLINK on $(targets) = "rm \"$(INTRO_ROOT_DIR)/gcc-$(version)/winsup/mingw/include\"" ;
  }
}
actions configure-gcc
{
  rm -f "$(<)" || exit $?
  [ -x "$(CONFIGURE)" ] || exit 1
  { mkdir -p "$(<:D)/build" && ( cd "$(<:D)/build" && rm -rf * ); } || exit $?
  $(SET_MINGW_SYMLINK)
  $(SET_MINGW_WINSUP_SYMLINK)
  $(SET_RUN_VARS)
  ( cd "$(<:D)/build" && "$(CONFIGURE)" $(OPTIONS) 1>>"$(STDOUT_)" 2>>"$(STDERR_)" )
  if [ $? -ne 0 ]; then
    $(UNSET_RUN_VARS)
    $(UNSET_MINGW_WINSUP_SYMLINK)
    $(UNSET_MINGW_SYMLINK)
    echo "ERROR: failed to 'configure' for the GCC build." 2>>"$(STDERR_)" 1>&2
    exit 1
  fi
  $(UNSET_RUN_VARS)
  $(UNSET_MINGW_WINSUP_SYMLINK)
  $(UNSET_MINGW_SYMLINK)
  [ -f "$(<:D)/build/Makefile" ] || exit 1
  [ -e "$(<)" ] && exit 1
  touch "$(<)"
}


make mingw32-stage1.make : configure : @make-mingw32-stage1 ;
explicit mingw32-stage1.make ;

rule make-mingw32-stage1 ( targets * : sources * : properties * )
{
  if ! $(sources[1]) {
    errors.error "ERROR: wrong number of sources." ;
  }
  if $(sources[2]) {
    errors.error "ERROR: wrong number of sources." ;
  }
  local stage = [ feature.get-values <intro-stage> : $(properties) ] ;
  if $(stage) != 2 {
    errors.error "ERROR: internal error." ;
  }
}
actions make-mingw32-stage1
{
  rm -f "$(<)" || exit $?
  [ -f "$(>[1])" ] || exit 1
  [ -f "$(>[1]:D)/build/Makefile" ] || exit 1
  ln -sf "$(PREFIX)/$(HOST)" "$(PREFIX)/mingw" || exit $?
  $(SET_RUN_VARS)
  ( cd "$(<:D)/build" && make --jobs=$(CONCURRENCY) all-gcc 1>>"$(STDOUT_)" 2>>"$(STDERR_)" )
  if [ $? -ne 0 ]; then
    $(UNSET_RUN_VARS)
    rm "$(PREFIX)/mingw"
    echo "ERROR: failed to 'make all-gcc' for the GCC build." 2>>"$(STDERR_)" 1>&2
    exit 1
  fi
  ( cd "$(<:D)/build" && make --jobs=$(CONCURRENCY) install-gcc 1>>"$(STDOUT_)" 2>>"$(STDERR_)" )
  if [ $? -ne 0 ]; then
    $(UNSET_RUN_VARS)
    rm "$(PREFIX)/mingw"
    echo "ERROR: failed to 'make install-gcc' for the GCC build." 2>>"$(STDERR_)" 1>&2
    exit 1
  fi
  $(UNSET_RUN_VARS)
  rm "$(PREFIX)/mingw" || exit $?
  [ -e "$(<)" ] && exit 1
  touch "$(<)"
}


rule make-req ( properties * )
{
  local result = ;
  local stage = [ feature.get-values <intro-stage> : $(properties) ] ;
  if $(stage) = 2 && [ regex.match "(-w64-mingw32)$" : $(HOST) : 1 ] {
    result = <source>../mingw-w64-crt//install ;
    # `<intro-stage>2' is automatically propagated.
    # `<intro-host>' is automatically propagated.
    # `<intro-link>unspecified' is automatically propagated.
    # `<intro-multilib>' is automatically propagated.
    local binutils-version = [ feature.get-values <binutils-version> : $(properties) ] ;
    result = $(result)/<binutils-version>unspecified ;
    result = $(result)/<binutils-version-hidden>$(binutils-version) ;
    local gmp-version = [ feature.get-values <gmp-version> : $(properties) ] ;
    result = $(result)/<gmp-version>unspecified ;
    result = $(result)/<gmp-version-hidden>$(gmp-version) ;
    local mpfr-version = [ feature.get-values <mpfr-version> : $(properties) ] ;
    result = $(result)/<mpfr-version>unspecified ;
    result = $(result)/<mpfr-version-hidden>$(mpfr-version) ;
    local mpc-version = [ feature.get-values <mpc-version> : $(properties) ] ;
    result = $(result)/<mpc-version>unspecified ;
    result = $(result)/<mpc-version-hidden>$(mpc-version) ;
    # `<gcc-version>' is automatically propagated.
    # `<gcc-default>' is automatically propagated.
  }
  else {
    result = <source>configure ;
  }
  return $(result) ;
}

make make : : @make-gcc : <conditional>@make-req ;
explicit make ;

rule make-gcc ( targets * : sources * : properties * )
{
  local stage = [ feature.get-values <intro-stage> : $(properties) ] ;
  local version = [ feature.get-values <gcc-version> : $(properties) ] ;

  SET_MINGW_SYMLINK on $(targets) = ;
  UNSET_MINGW_SYMLINK on $(targets) = ;
  if $(stage) = 2 && [ regex.match "(-w64-mingw32)$" : $(HOST) : 1 ] {
    SET_MINGW_SYMLINK on $(targets) = "ln -sf \"$(PREFIX)/$(HOST)\" \"$(PREFIX)/mingw\" || exit $?" ;
    UNSET_MINGW_SYMLINK on $(targets) = "rm \"$(PREFIX)/mingw\"" ;
  }
  else if $(stage) = 3 && [ regex.match "(-w64-mingw32)$" : $(HOST) : 1 ] {
    SET_MINGW_SYMLINK on $(targets) = "ln -sf \"$(CROSS_PREFIX)/$(HOST)\" \"$(CROSS_PREFIX)/mingw\" || exit $?" ;
    UNSET_MINGW_SYMLINK on $(targets) = "rm \"$(CROSS_PREFIX)/mingw\"" ;
  }

  SET_MINGW_WINSUP_SYMLINK on $(targets) = ;
  UNSET_MINGW_WINSUP_SYMLINK on $(targets) = ;
  if $(stage) = 3 && [ regex.match "(-w64-mingw32)$" : $(HOST) : 1 ] {
    SET_MINGW_WINSUP_SYMLINK on $(targets) = "{ mkdir -p \"$(INTRO_ROOT_DIR)/gcc-$(version)/winsup/mingw\" && ( cd \"$(INTRO_ROOT_DIR)/gcc-$(version)/winsup/mingw\" && ln -sf \"$(CROSS_PREFIX)/$(HOST)/include\" include ); } || exit $?" ;
    UNSET_MINGW_WINSUP_SYMLINK on $(targets) = "rm \"$(INTRO_ROOT_DIR)/gcc-$(version)/winsup/mingw/include\"" ;
  }
}
actions make-gcc
{
  rm -f "$(<)" || exit $?
  [ -f "$(<:D)/build/Makefile" ] || exit 1
  $(SET_MINGW_SYMLINK)
  $(SET_MINGW_WINSUP_SYMLINK)
  $(SET_RUN_VARS)
  ( cd "$(<:D)/build" && make --jobs=$(CONCURRENCY) 1>>"$(STDOUT_)" 2>>"$(STDERR_)" )
  if [ $? -ne 0 ]; then
    $(UNSET_RUN_VARS)
    $(UNSET_MINGW_WINSUP_SYMLINK)
    $(UNSET_MINGW_SYMLINK)
    echo "ERROR: failed to 'make' for the GCC build." 2>>"$(STDERR_)" 1>&2
    exit 1
  fi
  ( cd "$(<:D)/build" && make --jobs=$(CONCURRENCY) install 1>>"$(STDOUT_)" 2>>"$(STDERR_)" )
  if [ $? -ne 0 ]; then
    $(UNSET_RUN_VARS)
    $(UNSET_MINGW_WINSUP_SYMLINK)
    $(UNSET_MINGW_SYMLINK)
    echo "ERROR: failed to 'make install' for the GCC build." 2>>"$(STDERR_)" 1>&2
    exit 1
  fi
  $(UNSET_RUN_VARS)
  $(UNSET_MINGW_WINSUP_SYMLINK)
  $(UNSET_MINGW_SYMLINK)
  [ -e "$(<)" ] && exit 1
  touch "$(<)"
}


rule install-req ( properties * )
{
  local result = <source>make ;

  local tmp ;

  local stage = [ feature.get-values <intro-stage> : $(properties) ] ;

  local host = [ feature.get-values <intro-host> : $(properties) ] ;
  if $(stage) = 1 && $(host) != unspecified {
    errors.error "ERROR: '<intro-host>$(host)' is not valid for the GCC stage 1 build." ;
  }
  if ( $(stage) = 2 || $(stage) = 3 ) && $(host) = unspecified {
    errors.error "ERROR: '<intro-host>' is not specified for the GCC stage 2 or 3 build." ;
  }
  if $(host) != unspecified {
    tmp = [ SHELL "\"$(INTRO_ROOT_DIR)/gcc/config.sub\" $(host) | tr --delete '\n'" ] ;
    if $(tmp) != $(host) {
      errors.error "ERROR: '<intro-host>$(host)' is not canonical for the GCC build." ;
    }
  }

  local link = [ feature.get-values <intro-link> : $(properties) ] ;
  if $(link) != unspecified {
    errors.error "ERROR: '<intro-link>$(link)' is not valid for the GCC build." ;
  }

  local multilib = [ feature.get-values <intro-multilib> : $(properties) ] ;
  if $(multilib) = unspecified {
    result = $(result)/<intro-multilib>yes ;
  }

  local binutils-version = [ feature.get-values <binutils-version> : $(properties) ] ;
  if $(binutils-version) = unspecified {
    binutils-version = [ feature.values <binutils-version> ] ;
    result = $(result)/<binutils-version>$(binutils-version[2]) ;
  }
  binutils-version = [ feature.get-values <binutils-version-hidden> : $(properties) ] ;
  if $(binutils-version) != unspecified {
    errors.error "ERROR: '<binutils-version-hidden>$(binutils-version)' is not valid for the GCC build." ;
  }

  local gmp-version = [ feature.get-values <gmp-version> : $(properties) ] ;
  if $(gmp-version) = unspecified {
    gmp-version = [ feature.values <gmp-version> ] ;
    result = $(result)/<gmp-version>$(gmp-version[2]) ;
  }
  gmp-version = [ feature.get-values <gmp-version-hidden> : $(properties) ] ;
  if $(gmp-version) != unspecified {
    errors.error "ERROR: '<gmp-version-hidden>$(gmp-version)' is not valid for the GCC build." ;
  }

  local mpfr-version = [ feature.get-values <mpfr-version> : $(properties) ] ;
  if $(mpfr-version) = unspecified {
    mpfr-version = [ feature.values <mpfr-version> ] ;
    result = $(result)/<mpfr-version>$(mpfr-version[2]) ;
  }
  mpfr-version = [ feature.get-values <mpfr-version-hidden> : $(properties) ] ;
  if $(mpfr-version) != unspecified {
    errors.error "ERROR: '<mpfr-version-hidden>$(mpfr-version)' is not valid for the GCC build." ;
  }

  local mpc-version = [ feature.get-values <mpc-version> : $(properties) ] ;
  if $(mpc-version) = unspecified {
    mpc-version = [ feature.values <mpc-version> ] ;
    result = $(result)/<mpc-version>$(mpc-version[2]) ;
  }
  mpc-version = [ feature.get-values <mpc-version-hidden> : $(properties) ] ;
  if $(mpc-version) != unspecified {
    errors.error "ERROR: '<mpc-version-hidden>$(mpc-version)' is not valid for the GCC build." ;
  }

  local gcc-version = [ feature.get-values <gcc-version> : $(properties) ] ;
  if $(gcc-version) = unspecified {
    errors.error "ERROR: '<gcc-version>' is not specified for the GCC build." ;
  }

  local gcc-default = [ feature.get-values <gcc-default> : $(properties) ] ;
  if $(gcc-default) = unspecified {
    errors.error "ERROR: '<gcc-default>' is not specified for the GCC build." ;
  }
  if $(stage) = 1 && $(gcc-default) = yes {
    errors.error "ERROR: '<gcc-default>yes' is not valid for the GCC stage 1 build." ;
  }

  version = [ feature.get-values <gcc-version> : $(properties) ] ;
  if [ SHELL "{ gcc -v 2>&1 | grep -Eq '^gcc version $(version)'; } && /bin/echo -n 'yes'" ] = yes {
    result = <build>no ;
  }

  return $(result) ;
}

alias install : : <conditional>@install-req ;
explicit install ;

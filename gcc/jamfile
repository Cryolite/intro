project intro/gcc ;

import alias ;
import errors ;
import feature ;
import make ;
import path ;
import "$(INTRO_ROOT_DIR)/compilers"
  : is-gcc
    is-gcc-release
    is-gcc-snapshot
    get-gcc-versions
    is-clang
    get-frontend-version
    get-backend-gcc
    get-compiler-description
    get-compiler-prefix
    get-default-bindir
    get-default-libdir
    get-compiler-triplets
    get-property-dump-commands
  ;


for local version in [ get-gcc-versions $(COMPILERS) ] {
  make "$(INTRO_ROOT_DIR)/gcc-$(version).tar.bz2" : : @download ;
  explicit "$(INTRO_ROOT_DIR)/gcc-$(version).tar.bz2" ;
}

rule download ( targets * : sources * : properties * )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  if ! [ is-gcc "$(compiler)" ] {
    errors.error "an internal error." ;
  }
  local version = [ get-frontend-version "$(compiler)" ] ;
  VERSION on $(targets) = $(version) ;
  local url_prefix = "http://ftp.dti.ad.jp/pub/lang/gcc" ;          # Japan ++
  #local url_prefix = "http://ftp.tsukuba.wide.ad.jp/software/gcc" ; # Japan +++
  if [ is-gcc-release $(compiler) ] {
    URL on $(targets) = "$(url_prefix)/releases/gcc-$(version)/gcc-$(version).tar.bz2" ;
  }
  else if [ is-gcc-snapshot $(compiler) ] {
    URL on $(targets) = "$(url_prefix)/snapshots/$(version)/gcc-$(version).tar.bz2" ;
  }
  else {
    errors.error "an internal error." ;
  }
  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions download
{
  $(PROPERTY_DUMP_COMMANDS)

  rm -rf '$(<)' || exit $?
  if [ -n '$(STREAM)' ]; then
    ( cd '$(<:D)' && wget -- '$(URL)' >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(<:D)' && wget --quiet -- '$(URL)' )
  fi
  if [ $? -ne 0 ]; then
    echo    'ERROR: failed to download GCC $(VERSION) tarball.' 1>&2
    echo -n 'ERROR: failed to download GCC $(VERSION) tarball.' | $(AWACS)
    rm -rf '$(<)'
    exit 1
  fi
  [ -f '$(<)' ] || exit 1
  exit 0
}



for local version in [ get-gcc-versions $(COMPILERS) ] {
  # Use `README' file as a target representing the completion of
  # decompression action. It is suitable for the purpose because of the
  # following reasons;
  #
  #   - The name of this file is considered stable even if the version
  #     changes.
  #   - This file won't be modified during the build procedure.
  #
  make "$(INTRO_ROOT_DIR)/gcc-$(version)/README"
    : "$(INTRO_ROOT_DIR)/gcc-$(version).tar.bz2"
    : @expand
    ;
  explicit "$(INTRO_ROOT_DIR)/gcc-$(version)/README" ;
}

rule expand ( targets * : sources * : properties * )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  if ! [ is-gcc "$(compiler)" ] {
    errors.error "an internal error." ;
  }
  local version = [ get-frontend-version "$(compiler)" ] ;
  VERSION on $(targets) = "$(version)" ;
  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions expand
{
  $(PROPERTY_DUMP_COMMANDS)

  rm -rf '$(<:D)' || exit 1
  [ -f '$(>)' ] || exit 1
  if [ -n '$(STREAM)' ]; then
    tar xjvf '$(>)' --directory='$(INTRO_ROOT_DIR)' >> '$(STREAM)' 2>&1
  else
    tar xjf '$(>)' --directory='$(INTRO_ROOT_DIR)'
  fi
  if [ $? -ne 0 ]; then
    echo    'ERROR: failed to expand GCC $(VERSION) tarball.' 1>&2
    echo -n 'ERROR: failed to expand GCC $(VERSION) tarball.' | $(AWACS)
    rm -rf '$(<:D)'
    exit 1
  fi
  # If the timestamp of the tarball's contents is restored, the modification
  # time of the source directory could be older than the one of the tarball.
  # Such behavior is not desirable because the decompression always happens.
  # Therefore, `touch' is required.
  touch --no-create '$(<)'
  [ -f '$(<)' ] || exit 1
  exit 0
}



rule srcdir-req ( properties * )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  if [ is-gcc "$(compiler)" ] {
    # Do nothing.
  }
  else if [ is-clang "$(compiler)" ] || [ is-icc "$(compiler)" ] {
    compiler = [ get-backend-gcc $(properties) ] ;
  }
  else {
    errors.error "an internal error." ;
  }
  local version = [ get-frontend-version "$(compiler)" ] ;
  return "<source>$(INTRO_ROOT_DIR)/gcc-$(version)/README/$(DEFAULT_PROPERTIES)" ;
}

alias srcdir : : <conditional>@srcdir-req ;
explicit srcdir ;



rule gxx-wrapper-conditional ( properties * )
{
  local binutils = [ feature.get-values <binutils-hidden>      : $(properties) ] ;
  local gmp      = [ feature.get-values <gmp-for-gcc-hidden>   : $(properties) ] ;
  local mpfr     = [ feature.get-values <mpfr-for-gcc-hidden>  : $(properties) ] ;
  local mpc      = [ feature.get-values <mpc-for-gcc-hidden>   : $(properties) ] ;
  local isl      = [ feature.get-values <isl-for-gcc-hidden>   : $(properties) ] ;
  local cloog    = [ feature.get-values <cloog-for-gcc-hidden> : $(properties) ] ;
  local compiler = [ feature.get-values <compiler-hidden>      : $(properties) ] ;
  local bindir = [ get-default-bindir "$(PREFIX)" : $(properties) ] ;

  local result ;
  if "$(binutils)" != "unspecified" {
    result += "<source>../binutils//srcdir" ;
  }
  if "$(gmp)" != "unspecified" {
    result += "<source>../gmp//srcdir/<gmp-hidden>$(gmp)" ;
  }
  if "$(mpfr)" != "unspecified" {
    result += "<source>../mpfr//srcdir/<mpfr-hidden>$(mpfr)" ;
  }
  if "$(mpc)" != "unspecified" {
    result += "<source>../mpc//srcdir/<mpc-hidden>$(mpc)" ;
  }
  if "$(isl)" != "unspecified" {
    result += "<source>../isl//srcdir/<isl-hidden>$(isl)" ;
  }
  if "$(cloog)" != "unspecified" {
    result += "<source>../cloog//srcdir/<cloog-hidden>$(cloog)" ;
  }
  result += "<location>$(bindir)" ;
  return $(result) ;
}

make g++-wrapper
  : srcdir
  : @make-install
  : $(USE_BINUTILS)
    $(USE_GMP_FOR_GCC)
    $(USE_MPFR_FOR_GCC)
    $(USE_MPC_FOR_GCC)
    $(USE_ISL_FOR_GCC)
    $(USE_CLOOG_FOR_GCC)
    $(USE_COMPILER)
    $(USE_MULTITARGET)
    <conditional>@gxx-wrapper-conditional
  ;
explicit g++-wrapper ;

rule make-install ( targets * : sources * : properties * )
{
  local compiler = [ feature.get-values <compiler> : $(properties) ] ;
  local version ;
  local compiler-description ;
  if [ is-gcc "$(compiler)" ] {
    version = [ get-frontend-version "$(compiler)" ] ;
    compiler-description = [ get-compiler-description "$(compiler)" ] ;
  }
  else if [ is-clang "$(compiler)" ] || [ is-icc "$(compiler)" ] {
    local backend-gcc = [ get-backend-gcc $(properties) ] ;
    version = [ get-frontend-version "$(backend-gcc)" ] ;
    compiler-description = [ get-compiler-description "$(backend-gcc)" ] ;
  }
  else {
    errors.error "an internal error." ;
  }
  COMPILER_DESCRIPTION on $(targets) = "$(compiler-description)" ;

  local srcdir = "$(INTRO_ROOT_DIR)/gcc-$(version)" ;
  SRCDIR on $(targets) = "$(srcdir)" ;

  local objdir = "$(INTRO_ROOT_DIR)/objdir" ;
  OBJDIR on $(targets) = "$(objdir)" ;

  OPTIONS on $(targets) = ;

  # Set the compiler-specific prefix.
  local compiler-prefix = [ get-compiler-prefix "$(PREFIX)" : $(properties) ] ;
  local compiler-prefix-native = [ path.native "$(compiler-prefix)" ] ;
  COMPILER_PREFIX on $(targets) = "$(compiler-prefix-native)" ;

  # Set `--prefix' option for `configure' script.
  OPTIONS on $(targets) += "--prefix='$(compiler-prefix-native)'" ;

  local libdir = [ get-default-libdir "$(PREFIX)" : $(properties) ] ;
  local libdir-native = [ path.native "$(libdir)" ] ;
  LIBDIR on $(targets) = "$(libdir-native)" ;
  OPTIONS on $(targets) += "--libdir='$(libdir-native)'" ;

  local triplets = [ get-compiler-triplets $(properties) ] ;
  local build-triplet = "$(triplets[1])" ;
  local host-triplet = "$(triplets[2])" ;
  local target-triplet = "$(triplets[3])" ;
  local enabled-targets = "$(triplets[4])" ;
  TRIPLET on $(targets) = "$(host-triplet)" ;

  # Set `--build', `--host' and `--target' options for `configure' script.
  OPTIONS on $(targets) += "--build=$(build-triplet)" ;
  OPTIONS on $(targets) += "--host=$(host-triplet)" ;
  OPTIONS on $(targets) += "--target=$(target-triplet)" ;

  # Set the build variants of runtime libraries.
  OPTIONS on $(targets) += "--enable-shared" ;
  OPTIONS on $(targets) += "--enable-static" ;

  # Set the linker configuration to be used by the installed GCC front-end.
  #
  # gold linker has a bug that ignores `LD_RUN_PATH' environment variable.
  # http://sourceware.org/bugzilla/show_bug.cgi?id=13764
  # If the day comes when this bug is fixed, gold can become the default
  # linker.
  OPTIONS on $(targets) += "--enable-ld=default" ;
  OPTIONS on $(targets) += "--enable-gold" ;

  local multitarget = [ feature.get-values <multitarget> : $(properties) ] ;
  MULTITARGET on $(targets) = "$(multitarget)" ;

  if "$(target-triplet)" = "x86_64-unknown-linux-gnu" && "$(multitarget)" = "yes" {
    if "$(host-triplet)" != "x86_64-unknown-linux-gnu" {
      errors.error "an internal error." ;
    }
    OPTIONS on $(targets) += "--enable-multilib" ;
  }
  else if "$(multitarget)" = "yes" {
    errors.error "an internal error." ;
  }
  else {
    OPTIONS on $(targets) += "--disable-multilib" ;
  }

  if "$(host-triplet)" = "x86_64-w64-mingw32" || "$(host-triplet)" = "i686-w64-mingw32" {
    OPTIONS on $(targets) += "--enable-threads=win32" ;
  }
  else {
    OPTIONS on $(targets) += "--enable-threads=posix" ;
  }

  OPTIONS on $(targets) += "--enable-tls" ;

  if "$(target-triplet)" = "i686-pc-linux-gnu" || "$(target-triplet)" = "i686-w64-mingw32" || "$(target-triplet)" = "i686-pc-cygwin" {
    OPTIONS on $(targets) += "--with-arch=i686" ;
    OPTIONS on $(targets) += "--with-tune=generic" ;
  }
  else if "$(target-triplet)" = "x86_64-unknown-linux-gnu" {
    if "$(multitarget)" = "yes" {
      OPTIONS on $(targets) += "--with-arch-32=i686" ;
    }
    OPTIONS on $(targets) += "--with-tune=generic" ;
  }
  else if "$(target-triplet)" = "x86_64-w64-mingw32" {
    OPTIONS on $(targets) += "--with-tune=generic" ;
  }
  else {
    errors.error "an internal error." ;
  }

  if "$(target-triplet)" = "i686-pc-cygwin" {
    # Follow what the built-in GCC does.
    OPTIONS on $(targets) += "--disable-__cxa_atexit" ;
  }

  # Required explicitly by `--enable-gold' on GCC 4.6.
  # Required by GCC 4.7?
  OPTIONS on $(targets) += "--enable-build-with-cxx" ;

  OPTIONS on $(targets) += "--enable-bootstrap" ;

  OPTIONS on $(targets) += "--enable-languages=c,c++" ;

  OPTIONS on $(targets) += "--enable-libssp" ;

  OPTIONS on $(targets) += "--enable-libquadmath" ;

  if "$(target-triplet)" = "x86_64-w64-mingw32" || "$(target-triplet)" = "i686-w64-mingw32" {
    # The target is `*-w64-mingw32.'
    # `--enable-libgomp' option requires `pthreads-w32' on the target.
    # Currently, just disable this option.
    OPTIONS on $(targets) += "--disable-libgomp" ;
  }
  else {
    OPTIONS on $(targets) += "--enable-libgomp" ;
  }

  if "$(target-triplet)" = "i686-w64-mingw32" || "$(target-triplet)" = "i686-pc-cygwin" {
    OPTIONS on $(targets) += "--with-dwarf2" ;
    OPTIONS on $(targets) += "--disable-sjlj-exceptions" ;
  }
  # `--with-dwarf2' is not supported on `x86_64-w64-mingw32' targets.

  OPTIONS on $(targets) += "--enable-targets=$(enabled-targets)" ;

  if "$(target-triplet)" = "x86_64-w64-mingw32" || "$(target-triplet)" = "i686-w64-mingw32" {
    OPTIONS on $(targets) += "--disable-win32-registry" ;
  }

  #OPTIONS on $(targets) += --enable-checking=all ;

  OPTIONS on $(targets) += "--disable-nls" ;

  if "$(target-triplet)" = "i686-pc-cygwin" {
    # Follow what the built-in GCC does.
    OPTIONS on $(targets) += "--enable-graphite" ;
  }

  local isl = [ feature.get-values <isl-for-gcc> : $(properties) ] ;
  local cloog = [ feature.get-values <cloog-for-gcc> : $(properties) ] ;
  if "$(isl)" != "unspecified" && "$(cloog)" != "unspecified" {
    # Options required to build CLooG alongside during GCC bootstrap.
    OPTIONS on $(targets) += "--enable-cloog-backend=isl" ;
  }

  OPTIONS on $(targets) += "--enable-linker-build-id" ;

  OPTIONS on $(targets) += "--enable-lto" ;

  OPTIONS on $(targets) += "--enable-plugins" ;

  OPTIONS on $(targets) += "--with-system-zlib" ;

  OPTIONS on $(targets) += "--enable-libstdcxx-time=yes" ;

  OPTIONS on $(targets) += "--enable-libstdcxx-debug" ;

  #OPTIONS on $(targets) += "--enable-concept-checks" ;

  INSTALL_SCRIPT on $(targets) = "$(INTRO_ROOT_DIR)/gcc/install-4.8.sh" ;

  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions make-install
{
  $(PROPERTY_DUMP_COMMANDS)

  # Clean up the objdir `$(OBJDIR)'.
  { mkdir -p '$(OBJDIR)' && ( cd '$(OBJDIR)' && rm -rf * ); } || exit 1

  '$(INSTALL_SCRIPT)' '$(INTRO_ROOT_DIR)'       \
                      $(TRIPLET)                \
                      $(MULTITARGET)            \
                      '$(BINUTILS)'             \
                      '$(GMP_FOR_GCC)'          \
                      '$(MPFR_FOR_GCC)'         \
                      '$(MPC_FOR_GCC)'          \
                      '$(ISL_FOR_GCC)'          \
                      '$(CLOOG_FOR_GCC)'        \
                      $(CONCURRENCY)            \
                      '$(AWACS)'                \
                      '$(STREAM)'               \
                      '$(SRCDIR)'               \
                      '$(OBJDIR)'               \
                      '$(COMPILER_PREFIX)'      \
                      '$(COMPILER_DESCRIPTION)' \
                      '$(LIBDIR)'               \
                      $(OPTIONS)
  if [ $? -ne 0 ]; then
    exit 1
  fi

  # Check the creation of `g++-wrapper'.
  [ -x '$(<)' ] || exit 1

  # Clean up the OBJDIR.
  rm -rf '$(OBJDIR)' || exit 1

  echo -n '$(COMPILER_DESCRIPTION) ($(TRIPLET)) was successfully built.' | $(AWACS)
  echo -n 'NOTE: Binutils $(BINUTILS), GMP $(GMP_FOR_GCC), MPFR $(MPFR_FOR_GCC), MPC $(MPC_FOR_GCC), isl $(ISL_FOR_GCC), CLooG $(CLOOG_FOR_GCC) were bootstrapped alongside.' | $(AWACS)
  exit 0
}



alias install : "g++-wrapper/$(DEFAULT_COMPILER_PROPERTIES)" ;
explicit install ;

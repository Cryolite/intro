project binutils ;

import alias ;
import errors ;
import feature ;
import make ;
import regex ;


make binutils.download
  : # No sources.
  : @download-binutils
  ;
explicit binutils.download ;

rule download-binutils ( targets * : sources * : properties * )
{
  local version = [ feature.get-values <binutils-version> : $(properties) ] ;
  URL on $(targets) = http://core.ring.gr.jp/pub/GNU/binutils/binutils-$(version).tar.bz2 ;
  TARBALL_GZ on $(targets) = $(INTRO_ROOT_DIR)/binutils-$(version).tar.gz ;
  TARBALL_BZ2 on $(targets) = $(INTRO_ROOT_DIR)/binutils-$(version).tar.bz2 ;
  STDOUT_ on $(targets) = [ feature.get-values <intro-stdout> : $(properties) ] ;
  STDERR_ on $(targets) = [ feature.get-values <intro-stderr> : $(properties) ] ;
}
actions download-binutils
{
  rm -f "$(<)" || exit $?
  if [ ! -f "$(TARBALL_GZ)" -a ! -f "$(TARBALL_BZ2)" ]; then
    ( cd "$(TARBALL_BZ2:D)" && wget --quiet --timestamping -- '$(URL)' ) \
      || { echo "ERROR: failed to download the Binutils tarball." 2>>"$(STDOUT_)" 1>&2; exit 1; }
    [ ! -f "$(TARBALL_BZ2)" ] && exit 1
  fi
  [ -e "$(<)" ] && exit 1
  touch "$(<)"
}


make binutils.expand
  : binutils.download
  : @expand-binutils
  ;
explicit binutils.expand ;

rule expand-binutils ( targets * : sources * : properties * )
{
  if ! $(sources[1]) {
    errors.error "ERROR: wrong number of sources." ;
  }
  if $(sources[2]) {
    errors.error "ERROR: wrong number of sources." ;
  }
  local version = [ feature.get-values <binutils-version> : $(properties) ] ;
  TARBALL_GZ on $(targets) = $(INTRO_ROOT_DIR)/binutils-$(version).tar.gz ;
  TARBALL_BZ2 on $(targets) =  $(INTRO_ROOT_DIR)/binutils-$(version).tar.bz2 ;
  DEST_DIR on $(targets) = $(INTRO_ROOT_DIR)/binutils-$(version) ;
  STDOUT_ on $(targets) = [ feature.get-values <intro-stdout> : $(properties) ] ;
  STDERR_ on $(targets) = [ feature.get-values <intro-stderr> : $(properties) ] ;
}
actions expand-binutils
{
  rm -f "$(<)" || exit $?
  [ ! -f "$(>[1])" ] && exit 1
  if [ ! -f "$(DEST_DIR)/configure" ]; then
    rm -rf "$(DEST_DIR)" || exit $?
    if [ -f "$(TARBALL_GZ)" ]; then
      tar xzf "$(TARBALL_GZ)" -C "$(TARBALL_GZ:D)" \
        || { echo "ERROR: failed to expand the tarball for the Binutils build." 2>>"$(STDERR_)" 1>&2; exit 1; }
    elif [ -f "$(TARBALL_BZ2)" ]; then
      tar xjf "$(TARBALL_BZ2)" -C "$(TARBALL_BZ2:D)" \
        || { echo "ERROR: failed to expand the tarball for the Binutils build." 2>>"$(STDERR_)" 1>&2; exit 1; }
    else
      exit 1
    fi
    [ ! -f "$(DEST_DIR)/configure" ] && exit 1
  fi
  [ -e "$(<)" ] && exit 1
  touch "$(<)"
}


make binutils.configure
  : binutils.expand/<intro-host>unspecified/<intro-target>unspecified
  : @configure-binutils
  ;
explicit binutils.configure ;

rule configure-binutils ( targets * : sources * : properties * )
{
  OPTIONS on $(targets) = ;

  local version = [ feature.get-values <binutils-version> : $(properties) ] ;

  # Set the path to the 'configure' file.
  local configure = $(INTRO_ROOT_DIR)/binutils-$(version)/configure ;
  CONFIGURE on $(targets) = $(configure) ;

  # Set the 'build' option for the 'configure' script.
  local build = [ feature.get-values <intro-build> : $(properties) ] ;
  OPTIONS on $(targets) += --build=$(build) ;

  # Set the 'host' option for the 'configure' script.
  local host = [ feature.get-values <intro-host> : $(properties) ] ;
  OPTIONS on $(targets) += --host=$(host) ;

  local target = [ feature.get-values <intro-target> : $(properties) ] ;
  OPTIONS on $(targets) += --target=$(target) ;

  # Set the 'prefix' option for the 'configure' script.
  local prefix = [ feature.get-values <intro-prefix> : $(properties) ] ;
  OPTIONS on $(targets) += --prefix=\"$(prefix)\" ;

  if $(host) != $(build) {
    OPTIONS on $(targets) += --program-prefix=$(target)- ;
  }

  if $(target) = x86_64-w64-mingw32 {
    OPTIONS on $(targets) += --enable-targets=x86_64-w64-mingw32,i686-w64-mingw32 ;
  }

  if $(target) != $(build) {
    OPTIONS on $(targets) += --with-sysroot=\"$(prefix)\" ;
  }

  STDOUT_ on $(targets) = [ feature.get-values <intro-stdout> : $(properties) ] ;
  STDERR_ on $(targets) = [ feature.get-values <intro-stderr> : $(properties) ] ;
}
actions configure-binutils
{
  rm -f "$(<)" || exit $?
  [ ! -f "$(CONFIGURE)" ] && exit 1
  ( mkdir -p "$(<:D)/build" && { cd "$(<:D)/build" && rm -rf *; } ) || exit $?
  ( cd "$(<:D)/build" && "$(CONFIGURE)" $(OPTIONS) 1>>"$(STDOUT_)" 2>>"$(STDERR_)" ) \
    || { echo "ERROR: failed to 'configure' for the Binutils build." 2>>"$(STDERR_)" 1>&2; exit 1; }
  [ ! -f "$(<:D)/build/Makefile" ] && exit 1
  [ -e "$(<)" ] && exit 1
  touch "$(<)"
}


make binutils.make
  : binutils.configure
  : @make-binutils
  ;
explicit binutils.make ;

rule make-binutils ( targets * : sources * : properties * )
{
  if ! $(sources[1]) {
    errors.error "ERROR: wrong number of sources." ;
  }
  if $(sources[2]) {
    errors.error "ERROR: wrong number of sources." ;
  }
  CHECK on $(targets) = [ feature.get-values <intro-check> : $(properties) ] ;
  STDOUT_ on $(targets) = [ feature.get-values <intro-stdout> : $(properties) ] ;
  STDERR_ on $(targets) = [ feature.get-values <intro-stderr> : $(properties) ] ;
}
actions make-binutils
{
  rm -f "$(<)" || exit $?
  [ ! -f "$(>[1])" ] && exit 1
  [ ! -f "$(>[1]:D)/build/Makefile" ] && exit 1
  ( cd "$(<:D)/build" && make 1>>"$(STDOUT_)" 2>>"$(STDERR_)" ) \
    || { echo "ERROR: failed to 'make' for the Binutils build." 2>>"$(STDERR_)" 1>&2; exit 1; }
  if [ $(CHECK) = yes ]; then
    ( cd "$(<:D)/build" && make check 1>>"$(STDOUT_)" 2>>"$(STDERR_)" ) \
      || { echo "ERROR: failed to 'make check' for the Binutils build." 2>>"$(STDERR_)" 1>&2; exit 1; }
  fi
  ( cd "$(<:D)/build" && make install 1>>"$(STDOUT_)" 2>>"$(STDERR_)" ) \
    || { echo "ERROR: failed to 'make install' for the Bintuils build." 2>>"$(STDERR_)" 1>&2; exit 1; }
  [ -e "$(<)" ] && exit 1
  touch "$(<)"
}


rule install-req ( properties * )
{
  local result = <source>binutils.make ;

  local tmp = ;

  local version = [ feature.get-values <binutils-version> : $(properties) ] ;
  if $(version) = unspecified {
    version = [ feature.values <binutils-version> ] ;
    version = $(version[2]) ;
  }
  result = $(result)/<binutils-version>$(version) ;

  local build = [ feature.get-values <intro-build> : $(properties) ] ;
  tmp = [ SHELL "\"$(INTRO_ROOT_DIR)/binutils/config.guess\" | tr --delete '\n'" ] ;
  if $(build) = unspecified {
    build = $(tmp) ;
  }
  if $(build) != $(tmp) {
    errors.error "ERROR: the property '<intro-build>$(build)' is not valid." ;
  }
  tmp = [ SHELL "\"$(INTRO_ROOT_DIR)/binutils/config.sub\" $(build) | tr --delete '\n'" ] ;
  if $(tmp) != $(build) {
    errors.error "ERROR: the given property '<intro-build>$(build)' is not canonical." ;
  }
  result = $(result)/<intro-build>$(build) ;

  local host = [ feature.get-values <intro-host> : $(properties) ] ;
  if $(host) = unspecified {
    host = $(build) ;
  }
  tmp = [ SHELL "\"$(INTRO_ROOT_DIR)/binutils/config.sub\" $(host) | tr --delete '\n'" ] ;
  if $(tmp) != $(host) {
    errors.error "ERROR: the property '<intro-host>$(host)' is not canonical." ;
  }
  result = $(result)/<intro-host>$(host) ;

  local target = [ feature.get-values <intro-target> : $(properties) ] ;
  if $(target) = unspecified {
    target = $(host) ;
  }
  tmp = [ SHELL "\"$(INTRO_ROOT_DIR)/binutils/config.sub\" $(target) | tr --delete '\n'" ] ;
  if $(tmp) != $(target) {
    errors.error "ERROR: the property '<intro-target>$(target)' is not canonical." ;
  }
  result = $(result)/<intro-target>$(target) ;

  if $(target) = $(host) && $(host) = $(build) {
    errors.error "ERROR: the self-build for the local system is not necessary." ;
  }

  local abi = [ feature.get-values <intro-abi> : $(properties) ] ;
  if $(abi) != unspecified {
    errors.error "ERROR: the property '<intro-abi>$(abi)' is not valid for the Binutils build." ;
  }

  local link = [ feature.get-values <intro-link> : $(properties) ] ;
  if $(link) != unspecified {
    errors.error "ERROR: the property '<intro-link>$(link)' is not valid for the Binutils build." ;
  }

  local check = [ feature.get-values <intro-check> : $(properties) ] ;
  if $(check) = unspecified {
    if $(host) = $(build) {
      check = yes ;
    }
    else {
      check = no ;
    }
  }
  result = $(result)/<intro-check>$(check) ;

  return $(result) ;
}

alias install
  : # 'binutils.test' is added by the indirect conditional requirements.
  : <conditional>@install-req
  ;
explicit install ;

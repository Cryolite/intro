project intro/binutils ;

import alias ;
import errors ;
import feature ;
import make ;
import path ;
import regex ;
import "$(INTRO_ROOT_DIR)/compilers"
  : is-gcc
    is-clang
    get-compiler-prefix
    get-default-bindir
    get-default-libdir
    get-default-includedir
    get-compiler-triplets
    get-cc
    get-cflags
    get-cxx
    get-cxxflags
    get-environment-commands
    get-property-dump-commands
  ;

.here = [ regex.match "Jamfile<(.*)>" : "$(__name__)" : 1 ] ;
.here = [ path.make "$(.here)" ] ;
.here-relative = [ path.relative "$(.here)" "$(INTRO_ROOT_DIR)" ] ;


rule compiler-dep-req ( properties * )
{
  local compiler = [ feature.get-values <compiler> : $(properties) ] ;
  local result ;
  if [ is-gcc $(compiler) ] {
    result = <source>../gcc//install ;
  }
  else if [ is-clang $(compiler) ] {
    result = <source>../clang//install ;
  }
  else if [ is-icc $(compiler) ] {
    result = <source>../icc//install ;
  }
  else {
    errors.error "an internal error." ;
  }
  return $(result) ;
}

alias compiler-dep : : <conditional>@compiler-dep-req ;
explicit compiler-dep ;


make "$(INTRO_ROOT_DIR)/binutils-$(BINUTILS).tar.bz2" : : @download ;
explicit "$(INTRO_ROOT_DIR)/binutils-$(BINUTILS).tar.bz2" ;

rule download ( targets * : sources * : properties * )
{
  HERE on $(targets) = [ path.native "$(.here)" ] ;
  HERE_RELATIVE on $(targets) = [ path.native "$(.here-relative)" ] ;
  local version = [ feature.get-values <binutils-hidden> : $(properties) ] ;
  URLS on $(targets)  = "'http://ftp.nara.wide.ad.jp/pub/GNU/gnu/binutils/binutils-$(version).tar.bz2'" ;
  URLS on $(targets) += "'http://ftp.tsukuba.wide.ad.jp/software/binutils/binutils-$(version).tar.bz2'" ;
  URLS on $(targets) += "'http://ftp.jaist.ac.jp/pub/GNU/binutils/binutils-$(version).tar.bz2'" ;
  URLS on $(targets) += "'ftp://sourceware.org/pub/binutils/snapshots/binutils-$(version).tar.bz2'" ;
  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions download
{
  bash -s << 'EOS'
  exec >> '$(STDOUT_)' 2>> '$(STDERR_)'
$(PROPERTY_DUMP_COMMANDS)
  LINENO_ADJ=`grep -Fn c3a35fdf-555a-4787-acac-35219af0b4c3 '$(HERE)/jamfile' | grep -Eo '^[[:digit:]]+'`
  LINENO_ADJ=`expr $LINENO_ADJ - $LINENO + 1`
  PS4='+$(HERE_RELATIVE)/jamfile:`expr $LINENO + $LINENO_ADJ`: '
  set -ex
  rm -f '$(<)'
  trap "rm -f '$(<)'" ERR HUP INT QUIT TERM
  for url in $(URLS) ; do
    ( cd '$(<:D)' && wget -- "$url" ) && break
  done
  [ -f '$(<)' ]
EOS
}


# Use `README' file as a target representing the completion of
# decompression action. It is suitable for the purpose because of the
# following reasons;
#
#   - The name of this file is considered stable even if the version
#     changes.
#   - This file won't be modified during the build procedure.
#
make "$(INTRO_ROOT_DIR)/binutils-$(BINUTILS)/README"
  : "$(INTRO_ROOT_DIR)/binutils-$(BINUTILS).tar.bz2"
  : @expand
  ;
explicit "$(INTRO_ROOT_DIR)/binutils-$(BINUTILS)/README" ;

rule expand ( targets * : sources * : properties * )
{
  HERE on $(targets) = [ path.native "$(.here)" ] ;
  HERE_RELATIVE on $(targets) = [ path.native "$(.here-relative)" ] ;
  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions expand
{
  bash -s << 'EOS'
  exec >> '$(STDOUT_)' 2>> '$(STDERR_)'
$(PROPERTY_DUMP_COMMANDS)
  LINENO_ADJ=`grep -Fn 3909aa43-2c54-4244-b8c0-61c59512ca57 '$(HERE)/jamfile' | grep -Eo '^[[:digit:]]+'`
  LINENO_ADJ=`expr $LINENO_ADJ - $LINENO + 1`
  PS4='+$(HERE_RELATIVE)/jamfile:`expr $LINENO + $LINENO_ADJ`: '
  set -ex
  rm -rf '$(<:D)'
  [ -f '$(>)' ]
  trap "rm -rf '$(>)' '$(<:D)'" ERR HUP INT QUIT TERM
  tar xjvf '$(>)' -C '$(INTRO_ROOT_DIR)'
  # If the timestamp of the tarball's contents is restored, the modification
  # time of the source directory could be older than the one of the tarball.
  # Such behavior is not desirable because the decompression always happens.
  # Therefore, `touch' is required.
  touch --no-create '$(<)'
  [ -f '$(<)' ]
EOS
}


rule srcdir-req ( properties * )
{
  local version = [ feature.get-values <binutils-hidden> : $(properties) ] ;
  return "<source>$(INTRO_ROOT_DIR)/binutils-$(version)/README/$(DEFAULT_PROPERTIES)" ;
}

alias srcdir : : <conditional>@srcdir-req ;
explicit srcdir ;



rule location-conditional ( properties * )
{
  local bindir = [ get-default-bindir "$(PREFIX)" : $(properties) ] ;
  return "<location>$(bindir)" ;
}

make ld.gold
  : compiler-dep
    srcdir
  : @make-install
  : <conditional>@location-conditional
    $(USE_COMPILER)
    $(USE_MULTITARGET)
    $(USE_BINUTILS)
  ;
explicit ld.gold ;

rule make-install ( targets * : sources * : properties * )
{
  HERE on $(targets) = [ path.native "$(.here)" ] ;
  HERE_RELATIVE on $(targets) = [ path.native "$(.here-relative)" ] ;

  # Sets the path to the source directory.
  local version = [ feature.get-values <binutils> : $(properties) ] ;
  local srcdir = "$(INTRO_ROOT_DIR)/binutils-$(version)" ;
  SRCDIR on $(targets) = [ path.native "$(srcdir)" ] ;

  local objdir = "$(INTRO_ROOT_DIR)/objdir" ;
  OBJDIR on $(targets) = [ path.native "$(objdir)" ] ;

  OPTIONS on $(targets) = ;

  # Sets `--prefix' option for `configure' script.
  local compiler-prefix = [ get-compiler-prefix "$(PREFIX)" : $(properties) ] ;
  local compiler-prefix-native = [ path.native "$(compiler-prefix)" ] ;
  OPTIONS on $(targets) += "--prefix='$(compiler-prefix-native)'" ;

  local bindir = [ get-default-bindir "$(PREFIX)" : $(properties) ] ;
  local bindir-native = [ path.native "$(bindir)" ] ;
  OPTIONS on $(targets) += "--bindir='$(bindir-native)'" ;

  local libdir = [ get-default-libdir "$(PREFIX)" : $(properties) ] ;
  local libdir-native = [ path.native "$(libdir)" ] ;
  OPTIONS on $(targets) += "--libdir='$(libdir-native)'" ;

  local includedir = [ get-default-includedir "$(PREFIX)" : $(properties) ] ;
  local includedir-native = [ path.native "$(includedir)" ] ;
  OPTIONS on $(targets) += "--includedir='$(includedir-native)'" ;

  # Sets `--build', `--host' and `--target' options for `configure' script.
  local triplets = [ get-compiler-triplets $(properties) ] ;
  local build-triplet = "$(triplets[1])" ;
  local host-triplet = "$(triplets[2])" ;
  local target-triplet = "$(triplets[3])" ;
  local enabeld-targets = "$(triplets[4])" ;
  BUILD_TRIPLET on $(targets) = "$(build-triplet)" ;
  HOST_TRIPLET on $(targets) = "$(host-triplet)" ;
  TARGET_TRIPLET on $(targets) = "$(target-triplet)" ;
  OPTIONS on $(targets) += "--build=$(build-triplet)" ;
  OPTIONS on $(targets) += "--host=$(host-triplet)" ;
  OPTIONS on $(targets) += "--target=$(target-triplet)" ;

  OPTIONS on $(targets) += "--enable-ld=default" ;
  OPTIONS on $(targets) += "--enable-gold" ;

  OPTIONS on $(targets) += "--enable-libquadmath" ;

  OPTIONS on $(targets) += "--enable-libssp" ;

  OPTIONS on $(targets) += "--enable-bootstrap" ;

  OPTIONS on $(targets) += "--enable-build-with-cxx" ;

  OPTIONS on $(targets) += "--enable-targets=$(enabled-targets)" ;

  OPTIONS on $(targets) += "--enable-cloog-backend=isl" ;

  OPTIONS on $(targets) += "--enable-lto" ;
  OPTIONS on $(targets) += "--enable-plugins" ;

  local cc = [ get-cc "$(PREFIX)" : $(properties) ] ;
  local cc-native = [ path.native "$(cc)" ] ;
  OPTIONS on $(targets) += "CC='$(cc-native)'" ;

  local cflags = [ get-cflags $(properties) ] ;
  OPTIONS on $(targets) += "CFLAGS='$(cflags)'" ;

  local cxx = [ get-cxx "$(PREFIX)" : $(properties) ] ;
  local cxx-native = [ path.native "$(cxx)" ] ;
  OPTIONS on $(targets) += "CXX='$(cxx-native)'" ;

  local cxxflags = [ get-cxxflags $(properties) ] ;
  OPTIONS on $(targets) += "CXXFLAGS='$(cxxflags)'" ;

  local environment-commands = [ get-environment-commands "$(PREFIX)" : $(properties) ] ;
  ENVIRONMENT_COMMANDS on $(targets) = $(environment-commands) ;

  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions make-install
{
  bash -s << 'EOS'
  exec >> '$(STDOUT_)' 2>> '$(STDERR_)'
$(ENVIRONMENT_COMMANDS)
$(PROPERTY_DUMP_COMMANDS)
  LINENO_ADJ=`grep -Fn ab2bc87a-0488-4353-be58-863d528d3ea1 '$(HERE)/jamfile' | grep -Eo '^[[:digit:]]+'`
  LINENO_ADJ=`expr $LINENO_ADJ - $LINENO + 1`
  PS4='+$(HERE_RELATIVE)/jamfile:`expr $LINENO + $LINENO_ADJ`: '
  set -ex

  rm -rf '$(OBJDIR)'

  cleanup ()
  {
    if [ -d '$(OBJDIR)' ]; then
      mv -n '$(OBJDIR)' "$(INTRO_ROOT_DIR)/objdir_$$"
    fi
  }
  trap cleanup ERR HUP INT QUIT TERM

  # Creates `objdir`.
  ( cd '$(INTRO_ROOT_DIR)' && mkdir objdir )

  [ -x '$(SRCDIR)/configure' ]
  [ -x '$(SRCDIR)/config.sub' ]
  [ `'$(SRCDIR)/config.sub' $(BUILD_TRIPLET)` = $(BUILD_TRIPLET) ]
  [ `'$(SRCDIR)/config.sub' $(HOST_TRIPLET)` = $(HOST_TRIPLET) ]
  [ `'$(SRCDIR)/config.sub' $(TARGET_TRIPLET)` = $(TARGET_TRIPLET) ]

  ( cd '$(OBJDIR)' && '$(SRCDIR)/configure' $(OPTIONS) )

  # Checks the creation of `Makefile`.
  [ -f '$(OBJDIR)/Makefile' ]

  ( cd '$(OBJDIR)' && make --jobs=$(CONCURRENCY) )

  ( cd '$(OBJDIR)' && make --jobs=$(CONCURRENCY) check )

  ( cd '$(OBJDIR)' && make install )

  # Cleans up `objdir`.
  rm -r '$(OBJDIR)'

  [ -x '$(<)' ]
EOS
}


alias install : "ld.gold/$(DEFAULT_COMPILER_PROPERTIES)" ;
explicit install ;

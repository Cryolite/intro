# Copyright 2003, 2005 Douglas Gregor
# Copyright 2004 John Maddock
# Copyright 2002, 2003, 2004, 2007 Vladimir Prus
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)

#   This file is used to configure your Boost.Build installation. You can modify
# this file in place, or you can place it in a permanent location so that it
# does not get overwritten should you get a new version of Boost.Build. See:
#
#   http://www.boost.org/boost-build2/doc/html/bbv2/overview/configuration.html
#
# for documentation about possible permanent locations.

#   This file specifies which toolsets (C++ compilers), libraries, and other
# tools are available. Often, you should be able to just uncomment existing
# example lines and adjust them to taste. The complete list of supported tools,
# and configuration instructions can be found at:
#
#   http://boost.org/boost-build2/doc/html/bbv2/reference/tools.html
#

#   This file uses Jam language syntax to describe available tools. Mostly,
# there are 'using' lines, that contain the name of the used tools, and
# parameters to pass to those tools -- where paremeters are separated by
# semicolons. Important syntax notes:
#
#   - Both ':' and ';' must be separated from other tokens by whitespace
#   - The '\' symbol is a quote character, so when specifying Windows paths you
#     should use '/' or '\\' instead.
#
# More details about the syntax can be found at:
#
#   http://boost.org/boost-build2/doc/html/bbv2/advanced.html#bbv2.advanced.jam_language
#

import errors ;
import modules ;
import path ;
import regex ;

local home = [ modules.peek : HOME ] ;

# Modify the following lines.
local prefix = "$(home)/local" ;
local boost-version = 1.48 ;


local gcc-builtin = [ SHELL "g++ -dumpversion" ] ;
gcc-builtin = [ regex.match "^([0123456789]+\\.[0123456789]+\\.[0123456789]+)" : $(gcc-builtin) : 1 ] ;

local gcc-vers ;
for local ph in [ path.glob "$(prefix)" : "*.*.*" ] {
  local ver = [ regex.match "^$(prefix)/([0123456789]+\\.[0123456789]+\\.[0123456789]+)$" : "$(ph)" : 1 ] ;
  if $(ver) {
    local result = [ SHELL "which \"$(ph)/bin/g++\" >/dev/null 2>/dev/null; if [ $? -eq 0 ]; then /bin/echo -n \"INUMIMI\"; fi" ] ;
    if [ MATCH ".*(INUMIMI).*" : "$(result)" ] {
      gcc-vers += $(ver) ;
    }
  }
}


# ------------------
# GCC configuration.
# ------------------

# Configure gcc (default version).
ECHO "using gcc   :       : /usr/bin/g++ ;" ;
using gcc : : /usr/bin/g++ ;

# Configure specific gcc version, giving alternative name to use.
for local ver in $(gcc-vers) {
  ECHO "using gcc   : $(ver) : \"$(prefix)/$(ver)/bin/g++-tlimit\" ;" ;
  using gcc : $(ver) : "$(prefix)/$(ver)/bin/g++-tlimit" ;
}


# --------------------
# Clang configuration.
# --------------------

{
  local vers = "" ;
  for local ver in $(gcc-vers) {
    local result = [ SHELL "which \"$(prefix)/$(ver)/bin/clang++-wrapper\" >/dev/null 2>/dev/null; if [ $? -eq 0 ]; then /bin/echo -n \"INUMIMI\"; fi" ] ;
    if [ MATCH ".*(INUMIMI).*" : "$(result)" ] {
      vers = "$(vers)$(ver)\n" ;
    }
  }
  if "$(vers)" {
    local ver = [ SHELL "/bin/echo -n '$(vers)' | sort --version-sort | tail -n 1" ] ;
    ver = [ regex.match "^([0123456789]+\\.[0123456789]+\\.[0123456789]+)" : "$(ver)" : 1 ] ;
    local result = [ SHELL "which \"$(prefix)/$(ver)/bin/clang++-wrapper\" >/dev/null 2>/dev/null; if [ $? -eq 0 ]; then /bin/echo -n \"INUMIMI\"; fi" ] ;
    if ! [ MATCH ".*(INUMIMI).*" : "$(result)" ] {
      errors.error "A logic error." ;
    }
    ECHO "using clang :       : \"$(prefix)/$(ver)/bin/clang++-tlimit\" ;" ;
    using clang : : "$(prefix)/$(ver)/bin/clang++-tlimit" ;
  }
}


# -------------------
# MSVC configuration.
# -------------------

# Configure msvc (default version, searched for in standard locations and PATH).
# using msvc ;

# Configure specific msvc version (searched for in standard locations and PATH).
# using msvc : 8.0 ;


# ----------------------
# Borland configuration.
# ----------------------
# using borland ;


# ----------------------
# STLPort configuration.
# ----------------------

#   Configure specifying location of STLPort headers. Libraries must be either
# not needed or available to the compiler by default.
# using stlport : : /usr/include/stlport ;

# Configure specifying location of both headers and libraries explicitly.
# using stlport : : /usr/include/stlport /usr/lib ;


# -----------------
# QT configuration.
# -----------------

# Configure assuming QTDIR gives the installation prefix.
# using qt ;

# Configure with an explicit installation prefix.
# using qt : /usr/opt/qt ;


# ---------------------
# Python configuration.
# ---------------------

#using python ;

# Configure specific Python version.
# using python : 3.1 : /usr/bin/python3 : /usr/include/python3.1 : /usr/lib ;


# ------------------
# MPI configuration.
# ------------------

local mpi-options ;

{
  local cxxflags = [ SHELL "\"$(prefix)/bin/mpic++\" -showme:compile | tr --delete '\n'" ] ;
  cxxflags = [ regex.split "$(cxxflags)" " +" ] ;
  mpi-options += <toolset-gcc:version>$(gcc-builtin):<cxxflags>$(cxxflags) ;
  local linkflags = [ SHELL "\"$(prefix)/bin/mpic++\" -showme:link | tr --delete '\n'" ] ;
  linkflags = [ regex.split "$(linkflags)" " +" ] ;
  mpi-options += <toolset-gcc:version>$(gcc-builtin):<linkflags>$(linkflags) ;
}

for local ver in $(gcc-vers) {
  local cxxflags = [ SHELL "\"$(prefix)/$(ver)/bin/mpic++\" -showme:compile | tr --delete '\n'" ] ;
  cxxflags = [ regex.split "$(cxxflags)" " +" ] ;
  mpi-options += <toolset-gcc:version>$(ver):<cxxflags>$(cxxflags) ;
  local linkflags = [ SHELL "\"$(prefix)/$(ver)/bin/mpic++\" -showme:link | tr --delete '\n'" ] ;
  linkflags = [ regex.split "$(linkflags)" " +" ] ;
  mpi-options += <toolset-gcc:version>$(ver):<linkflags>$(linkflags) ;
}

using mpi : : $(mpi-options) ;


# --------------------
# Boost configuration.
# --------------------

using boost
  : $(boost-version)
  : <include>"$(prefix)/boost/latest"
    <library>"$(prefix)/boost/latest/stage/lib"
  ;
import boost ;
boost.use-project ;


# -----------------------
# xsltproc configuration.
# -----------------------

using xsltproc ;


# ------------------------
# BoostBook configuration.
# ------------------------

using boostbook
  : "/usr/share/xml/docbook/stylesheet/nwalsh"
  : "/usr/share/xml/docbook/schema/dtd/4.2"
  ;


# ----------------------
# Doxygen configuration.
# ----------------------

using doxygen ;


# ------------------------
# Quickbook configuration.
# ------------------------

using quickbook : "$(prefix)/bin/quickbook" ;

project intro/mpfr ;

import alias ;
import errors ;
import feature ;
import make ;
import path ;
import "$(INTRO_ROOT_DIR)/compilers"
  : is-gcc
    is-clang
    get-compiler-description
    get-compiler-prefix
    get-libdir
    get-includedir
    get-cc
    get-cflags
    get-cxx
    get-cxxflags
    get-environment-commands
  ;


rule assert-specified ( feature : properties * )
{
  local val = [ feature.get-values $(feature) : $(properties) ] ;
  if $(val) = unspecified {
    errors.error $(feature) is not specified for MPFR build. ;
  }
}

rule assert-unspecified ( feature : properties * )
{
  local val = [ feature.get-values $(feature) : $(properties) ] ;
  if $(val) != unspecified {
    errors.error $(feature) is not valid for MPFR build. ;
  }
}



rule compiler-dep-req ( properties * )
{
  assert-specified   <triplet>            : $(properties) ;
  assert-unspecified <multitarget>        : $(properties) ;
  assert-specified   <multitarget-hidden> : $(properties) ;
  assert-unspecified <gmp>                : $(properties) ;
  assert-specified   <gmp-hidden>         : $(properties) ;
  assert-unspecified <mpfr>               : $(properties) ;
  assert-specified   <mpfr-hidden>        : $(properties) ;
  assert-specified   <compiler>           : $(properties) ;
  assert-unspecified <compiler-hidden>    : $(properties) ;

  local multitarget = [ feature.get-values <multitarget-hidden> : $(properties) ] ;
  local compiler = [ feature.get-values <compiler> : $(properties) ] ;
  local result ;
  if [ is-gcc $(compiler) ]
  {
    result = <source>../gcc//install/<multitarget>$(multitarget)/<multitarget-hidden>unspecified ;
  }
  else if [ is-clang $(compiler) ]
  {
    result = <source>../clang//install ;
  }
  else
  {
    errors.error "an internal error." ;
  }
  return $(result) ;
}

alias compiler-dep : : <conditional>@compiler-dep-req ;
explicit compiler-dep ;



for local version in $(MPFR_VERSIONS)
{
  make "$(INTRO_ROOT_DIR)/mpfr-$(version).tar.bz2" : : @download ;
  explicit "$(INTRO_ROOT_DIR)/mpfr-$(version).tar.bz2" ;
}

rule download ( targets * : sources * : properties * )
{
  if $(sources[1])
  {
    errors.error "an internal error." ;
  }
  assert-unspecified <triplet>            : $(properties) ;
  assert-unspecified <multitarget>        : $(properties) ;
  assert-unspecified <multitarget-hidden> : $(properties) ;
  #assert-unspecified <gmp>                : $(properties) ;
  #assert-specified   <gmp-hidden>         : $(properties) ;
  assert-unspecified <mpfr>               : $(properties) ;
  assert-specified   <mpfr-hidden>        : $(properties) ;
  assert-unspecified <compiler>           : $(properties) ;
  assert-unspecified <compiler-hidden>    : $(properties) ;

  local version = [ feature.get-values <mpfr-hidden> : $(properties) ] ;
  VERSION on $(targets) = $(version) ;
  URL on $(targets) = http://ftp.tsukuba.wide.ad.jp/software/mpfr/mpfr-$(version).tar.bz2 ;
  #URL on $(targets) = http://core.ring.gr.jp/pub/GNU/mpfr/mpfr-$(version).tar.bz2 ;
}
actions download
{
  rm -rf '$(<)' || exit 1
  if [ -n '$(STREAM)' ]; then
    ( cd '$(<:D)' && wget -- '$(URL)' >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(<:D)' && wget --quiet -- '$(URL)' )
  fi
  if [ $? -ne 0 ]; then
    echo    'ERROR: failed to download MPFR $(VERSION) tarball.' 1>&2
    echo -n 'ERROR: failed to download MPFR $(VERSION) tarball.' | $(AWACS)
    rm -rf '$(<)'
    exit 1
  fi
  [ -f '$(<)' ] || exit 1
  exit 0
}



for local version in $(MPFR_VERSIONS)
{
  # Use `README' file as a target representing the completion of
  # decompression action. It is suitable for the purpose because of the
  # following reasons;
  #
  #   - The name of this file is considered stable even if the version
  #     changes.
  #   - This file won't be modified during the build procedure.
  #
  make "$(INTRO_ROOT_DIR)/mpfr-$(version)/README"
    : "$(INTRO_ROOT_DIR)/mpfr-$(version).tar.bz2"
    : @expand
    ;
  explicit "$(INTRO_ROOT_DIR)/mpfr-$(version)/README" ;
}

rule expand ( targets * : sources * : properties * )
{
  if ! $(sources[1])
  {
    errors.error "an internal error." ;
  }
  if $(sources[2])
  {
    errors.error "an internal error." ;
  }
  assert-unspecified <triplet>            : $(properties) ;
  assert-unspecified <multitarget>        : $(properties) ;
  assert-unspecified <multitarget-hidden> : $(properties) ;
  #assert-unspecified <gmp>                : $(properties) ;
  #assert-specified   <gmp-hidden>         : $(properties) ;
  assert-unspecified <mpfr>               : $(properties) ;
  assert-specified   <mpfr-hidden>        : $(properties) ;
  assert-unspecified <compiler>           : $(properties) ;
  assert-unspecified <compiler-hidden>    : $(properties) ;

  local version = [ feature.get-values <mpfr-hidden> : $(properties) ] ;
  VERSION on $(targets) = $(version) ;
}
actions expand
{
  rm -rf '$(<:D)' || exit 1
  [ -f '$(>)' ] || exit 1
  if [ -n '$(STREAM)' ]; then
    tar xjvf '$(>)' --directory='$(INTRO_ROOT_DIR)' >> '$(STREAM)' 2>&1
  else
    tar xjf '$(>)' --directory='$(INTRO_ROOT_DIR)'
  fi
  if [ $? -ne 0 ]; then
    echo    'ERROR: failed to expand MPFR $(VERSION) tarball.' 1>&2
    echo -n 'ERROR: failed to expand MPFR $(VERSION) tarball.' | $(AWACS)
    rm -rf '$(<:D)'
    exit 1
  fi
  # If the timestamp of the tarball's contents is restored, the modification
  # time of the source directory could be older than the one of the tarball.
  # Such behavior is not desirable because the decompression always happens.
  # Therefore, `touch' is required.
  touch --no-create '$(<)'
  [ -f '$(<)' ] || exit 1
  exit 0
}



rule srcdir-req ( properties * )
{
  assert-unspecified <triplet>            : $(properties) ;
  assert-unspecified <multitarget>        : $(properties) ;
  assert-unspecified <multitarget-hidden> : $(properties) ;
  #assert-unspecified <gmp>                : $(properties) ;
  #assert-specified   <gmp-hidden>         : $(properties) ;
  assert-unspecified <mpfr>               : $(properties) ;
  assert-specified   <mpfr-hidden>        : $(properties) ;
  assert-unspecified <compiler>           : $(properties) ;
  assert-unspecified <compiler-hidden>    : $(properties) ;

  local version = [ feature.get-values <mpfr-hidden> : $(properties) ] ;
  return <source>"$(INTRO_ROOT_DIR)/mpfr-$(version)/README/$(DEFAULT_PROPERTIES)" ;
}

alias srcdir : : <conditional>@srcdir-req ;
explicit srcdir ;



rule location-conditional ( properties * )
{
  local includedir = [ get-includedir "$(PREFIX)" : $(properties) : $(GCC_FOR_CLANG) ] ;
  return <location>"$(includedir)" ;
}

make mpfr.h
  : compiler-dep
    ../gmp//install
    srcdir/<triplet>unspecified/<multitarget-hidden>unspecified/<compiler>unspecified
  : @make-install
  : $(USE_GMP)
    $(USE_MPFR)
    <conditional>@location-conditional
  ;
explicit mpfr.h ;

rule make-install ( targets * : sources * : properties * )
{
  assert-specified   <triplet>            : $(properties) ;
  assert-unspecified <multitarget>        : $(properties) ;
  assert-specified   <multitarget-hidden> : $(properties) ;
  assert-specified   <gmp>                : $(properties) ;
  assert-specified   <gmp-hidden>         : $(properties) ;
  assert-specified   <mpfr>               : $(properties) ;
  assert-specified   <mpfr-hidden>        : $(properties) ;
  assert-specified   <compiler>           : $(properties) ;
  assert-unspecified <compiler-hidden>    : $(properties) ;

  local compiler = [ feature.get-values <compiler> : $(properties) ] ;
  local compiler-description = [ get-compiler-description $(compiler) ] ;
  COMPILER_DESCRIPTION on $(targets) = "$(compiler-description)" ;

  local version = [ feature.get-values <mpfr> : $(properties) ] ;
  VERSION on $(targets) = $(version) ;

  # Set the path to the source directory.
  local srcdir = "$(INTRO_ROOT_DIR)/mpfr-$(version)" ;
  SRCDIR on $(targets) = [ path.native "$(srcdir)" ] ;

  local objdir = "$(INTRO_ROOT_DIR)/objdir" ;
  OBJDIR on $(targets) = [ path.native "$(objdir)" ] ;

  OPTIONS on $(targets) = ;

  # Set the `--prefix' option for the `configure' script.
  local compiler-prefix = [ get-compiler-prefix "$(PREFIX)" : $(compiler) : $(GCC_FOR_CLANG) ] ;
  local compiler-prefix-native = [ path.native "$(compiler-prefix)" ] ;
  OPTIONS on $(targets) += "--prefix='$(compiler-prefix-native)'" ;

  # Set the `--libdir' option for the `configure' script.
  local libdir = [ get-libdir "$(PREFIX)" : $(properties) : $(GCC_FOR_CLANG) ] ;
  local libdir-native = [ path.native "$(libdir)" ] ;
  OPTIONS on $(targets) += "--libdir='$(libdir-native)'" ;

  # Set the `--includedir' option for the `configure' script.
  local includedir = [ get-includedir "$(PREFIX)" : $(properties) : $(GCC_FOR_CLANG) ] ;
  local includedir-native = [ path.native "$(includedir)" ] ;
  OPTIONS on $(targets) += "--includedir='$(includedir-native)'" ;

  # Set the `--build' and `--host' options for the `configure' script.
  local triplet = [ feature.get-values <triplet> : $(properties) ] ;
  TRIPLET on $(targets) = $(triplet) ;
  OPTIONS on $(targets) += --build=$(triplet) ;
  OPTIONS on $(targets) += --host=$(triplet) ;

  if [ feature.get-values <variant> : $(properties) ] = debug
  {
    OPTIONS on $(targets) += --enable-assert ;
  }

  # Set the link variants for the 'configure' script.
  if $(triplet) = i686-pc-cygwin || $(triplet) = i686-w64-mingw32 || $(triplet) = x86_64-w64-mingw32
  {
    OPTIONS on $(targets) += --enable-shared ;
    OPTIONS on $(targets) += --disable-static ;
  }
  else
  {
    OPTIONS on $(targets) += --enable-shared ;
    OPTIONS on $(targets) += --enable-static ;
  }

  local cc = [ get-cc "$(PREFIX)" : $(properties) : $(GCC_FOR_CLANG) ] ;
  cc = [ path.native "$(cc)" ] ;
  OPTIONS on $(targets) += "CC='$(cc)'" ;

  # Default `CFLAGS' seems `-Wall -Wmissing-prototypes -Wpointer-arith -g -O2'.
  local cflags = [ get-cflags $(properties) ] ;
  if $(cflags)
  {
    if [ feature.get-values <variant> : $(properties) ] = lto
    {
      OPTIONS on $(targets) += "CFLAGS='$(cflags) -Wall -Wmissing-prototypes -Wpointer-arith'" ;
    }
    else
    {
      OPTIONS on $(targets) += "CFLAGS='$(cflags) -Wall -Wmissing-prototypes -Wpointer-arith -g'" ;
    }
  }

  local cxx = [ get-cxx "$(PREFIX)" : $(properties) : $(GCC_FOR_CLANG) ] ;
  cxx = [ path.native "$(cxx)" ] ;
  OPTIONS on $(targets) += "CXX='$(cxx)'" ;

  local cxxflags = [ get-cxxflags $(properties) ] ;
  if $(cxxflags)
  {
    if [ feature.get-values <variant> : $(properties) ] = lto
    {
      OPTIONS on $(targets) += "CXXFLAGS='$(cxxflags) -Wall -Wpointer-arith'" ;
    }
    else
    {
      OPTIONS on $(targets) += "CXXFLAGS='$(cxxflags) -Wall -Wpointer-arith -g'" ;
    }
  }

  local environment-commands = [ get-environment-commands "$(PREFIX)" : $(properties) : $(GCC_FOR_CLANG) ] ;
  ENVIRONMENT_COMMANDS on $(targets) = "$(environment-commands)" ;
}
actions make-install
{
  [ -x '$(SRCDIR)/configure' ] || exit 1
  [ -x '$(SRCDIR)/config.sub' ] || exit 1
  [ `'$(SRCDIR)/config.sub' $(TRIPLET)` = $(TRIPLET) ] || exit 1

  # Clean up objdir `$(OBJDIR)'.
  { mkdir -p '$(OBJDIR)' && ( cd '$(OBJDIR)' && rm -rf * ); } || exit 1

  $(ENVIRONMENT_COMMANDS)

  if [ -n '$(STREAM)' ]; then
    ( cd '$(OBJDIR)' && '$(SRCDIR)/configure' $(OPTIONS) >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(OBJDIR)' && '$(SRCDIR)/configure' $(OPTIONS) )
  fi
  if [ $? -ne 0 ]; then
    echo    "ERROR: failed to \`configure' MPFR $(VERSION) ($(COMPILER_DESCRIPTION), $(TRIPLET))." 1>&2
    echo -n "ERROR: failed to \`configure' MPFR $(VERSION) ($(COMPILER_DESCRIPTION), $(TRIPLET))." | $(AWACS)
    exit 1
  fi

  # Check the creation of `Makefile'.
  [ -f '$(OBJDIR)/Makefile' ] || exit 1

  if [ -n '$(STREAM)' ]; then
    ( cd '$(OBJDIR)' && make --jobs=$(CONCURRENCY) >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(OBJDIR)' && make --jobs=$(CONCURRENCY) )
  fi
  if [ $? -ne 0 ]; then
    echo    "ERROR: failed to \`make' MPFR $(VERSION) ($(COMPILER_DESCRIPTION), $(TRIPLET))." 1>&2
    echo -n "ERROR: failed to \`make' MPFR $(VERSION) ($(COMPILER_DESCRIPTION), $(TRIPLET))." | $(AWACS)
    exit 1
  fi

  if [ -n '$(STREAM)' ]; then
    ( cd '$(OBJDIR)' && make --jobs=$(CONCURRENCY) check >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(OBJDIR)' && make --jobs=$(CONCURRENCY) check )
  fi
  if [ $? -ne 0 ]; then
    echo    "ERROR: failed to \`make check' MPFR $(VERSION) ($(COMPILER_DESCRIPTION), $(TRIPLET))." 1>&2
    echo -n "ERROR: failed to \`make check' MPFR $(VERSION) ($(COMPILER_DESCRIPTION), $(TRIPLET))." | $(AWACS)
    exit 1
  fi

  if [ -n '$(STREAM)' ]; then
    ( cd '$(OBJDIR)' && make install >> '$(STREAM)' 2>&1 )
  else
    ( cd '$(OBJDIR)' && make install )
  fi
  if [ $? -ne 0 ]; then
    echo    "ERROR: failed to \`make install' MPFR $(VERSION) ($(COMPILER_DESCRIPTION), $(TRIPLET))." 1>&2
    echo -n "ERROR: failed to \`make install' MPFR $(VERSION) ($(COMPILER_DESCRIPTION), $(TRIPLET))." | $(AWACS)
    exit 1
  fi

  [ -f '$(<)' ] || exit 1

  # Clean up objdir `$(OBJDIR)'.
  rm -rf '$(OBJDIR)' || exit 1

  echo -n 'MPFR $(VERSION) ($(COMPILER_DESCRIPTION), $(TRIPLET)) was successfully built.' | $(AWACS)
  exit 0
}



alias install : mpfr.h ;
explicit install ;

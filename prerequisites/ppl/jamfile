project intro/prerequisites/ppl ;

import errors ;
import feature ;
import make ;


rule assert-specified ( feature : properties * )
{
  local val = [ feature.get-values $(feature) : $(properties) ] ;
  if $(val) = unspecified {
    errors.error $(feature) is not specified for PPL build. ;
  }
}

rule assert-unspecified ( feature : properties * )
{
  local val = [ feature.get-values $(feature) : $(properties) ] ;
  if $(val) != unspecified {
    errors.error $(feature) is not valid for PPL build. ;
  }
}


make tarball : : @download ;
explicit tarball ;

rule download ( targets * : sources * : properties * )
{
  assert-unspecified <triplet>         : $(properties) ;
  assert-unspecified <multilib>        : $(properties) ;
  assert-unspecified <multilib-hidden> : $(properties) ;
  assert-unspecified <binutils>        : $(properties) ;
  assert-unspecified <binutils-hidden> : $(properties) ;
  assert-unspecified <gmp>             : $(properties) ;
  assert-unspecified <gmp-hidden>      : $(properties) ;
  assert-unspecified <mpfr>            : $(properties) ;
  assert-unspecified <mpfr-hidden>     : $(properties) ;
  assert-unspecified <mpc>             : $(properties) ;
  assert-unspecified <mpc-hidden>      : $(properties) ;
  assert-specified   <ppl>             : $(properties) ;
  assert-unspecified <ppl-hidden>      : $(properties) ;
  assert-unspecified <cloog>           : $(properties) ;
  assert-unspecified <cloog-hidden>    : $(properties) ;
  assert-unspecified <gcc>             : $(properties) ;
  assert-unspecified <gcc-hidden>      : $(properties) ;
  assert-unspecified <icu4c>           : $(properties) ;
  assert-unspecified <icu4c-hidden>    : $(properties) ;
  assert-unspecified <mpi>             : $(properties) ;
  assert-unspecified <mpi-hidden>      : $(properties) ;
  assert-unspecified <openmpi>         : $(properties) ;
  assert-unspecified <openmpi-hidden>  : $(properties) ;
  assert-unspecified <boost>           : $(properties) ;
  assert-unspecified <boost-hidden>    : $(properties) ;
  local version = [ feature.get-values <ppl> : $(properties) ] ;
  URL on $(targets) = http://bugseng.com/products/ppl/download/ftp/releases/$(version)/ppl-$(version).tar.bz2 ;
  TARBALL_GZ on $(targets) = $(INTRO_ROOT_DIR)/ppl-$(version).tar.gz ;
  TARBALL_BZ2 on $(targets) = $(INTRO_ROOT_DIR)/ppl-$(version).tar.bz2 ;
}
actions download
{
  rm -f "$(<)" || exit $?
  if [ ! -f "$(TARBALL_GZ)" -a ! -f "$(TARBALL_BZ2)" ]; then
    if [ -n "$(STREAM)" ]; then
      ( cd "$(TARBALL_BZ2:D)" && wget -- '$(URL)' >> "$(STREAM)" 2>&1 )
    else
      ( cd "$(TARBALL_BZ2:D)" && wget --quiet -- '$(URL)' )
    fi
    if [ $? -ne 0 ]; then
      echo "ERROR: failed to download PPL tarball." 1>&2
      echo -n "ERROR: failed to download PPL tarball." | $(AWACS)
      exit 1
    fi
    [ -f "$(TARBALL_GZ)" -o -f "$(TARBALL_BZ2)" ] || exit 1
  fi
  [ -e "$(<)" ] && exit 1
  touch "$(<)"
}


make srcdir : tarball : @expand ;
explicit srcdir ;

rule expand ( targets * : sources * : properties * )
{
  if ! $(sources[1]) {
    errors.error "ERROR: wrong number of sources." ;
  }
  if $(sources[2]) {
    errors.error "ERROR: wrong number of sources." ;
  }
  assert-unspecified <triplet>         : $(properties) ;
  assert-unspecified <multilib>        : $(properties) ;
  assert-unspecified <multilib-hidden> : $(properties) ;
  assert-unspecified <binutils>        : $(properties) ;
  assert-unspecified <binutils-hidden> : $(properties) ;
  assert-unspecified <gmp>             : $(properties) ;
  assert-unspecified <gmp-hidden>      : $(properties) ;
  assert-unspecified <mpfr>            : $(properties) ;
  assert-unspecified <mpfr-hidden>     : $(properties) ;
  assert-unspecified <mpc>             : $(properties) ;
  assert-unspecified <mpc-hidden>      : $(properties) ;
  assert-specified   <ppl>             : $(properties) ;
  assert-unspecified <ppl-hidden>      : $(properties) ;
  assert-unspecified <cloog>           : $(properties) ;
  assert-unspecified <cloog-hidden>    : $(properties) ;
  assert-unspecified <gcc>             : $(properties) ;
  assert-unspecified <gcc-hidden>      : $(properties) ;
  assert-unspecified <icu4c>           : $(properties) ;
  assert-unspecified <icu4c-hidden>    : $(properties) ;
  assert-unspecified <mpi>             : $(properties) ;
  assert-unspecified <mpi-hidden>      : $(properties) ;
  assert-unspecified <openmpi>         : $(properties) ;
  assert-unspecified <openmpi-hidden>  : $(properties) ;
  assert-unspecified <boost>           : $(properties) ;
  assert-unspecified <boost-hidden>    : $(properties) ;
  local version = [ feature.get-values <ppl> : $(properties) ] ;
  VERSION on $(targets) = $(version) ;
  TARBALL_GZ on $(targets) = $(INTRO_ROOT_DIR)/ppl-$(version).tar.gz ;
  TARBALL_BZ2 on $(targets) = $(INTRO_ROOT_DIR)/ppl-$(version).tar.bz2 ;
  DEST_DIR on $(targets) = $(INTRO_ROOT_DIR)/ppl-$(version) ;
}
actions expand
{
  rm -f "$(<)" || exit $?
  [ -f "$(>)" ] || exit 1
  ( cd "$(INTRO_ROOT_DIR)" && rm -rf ppl-$(VERSION) ) || exit 1
  [ -e "$(INTRO_ROOT_DIR)/ppl-$(VERSION)" ] && exit 1
  if [ -f "$(TARBALL_GZ)" ]; then
    if [ -n "$(STREAM)" ]; then
      tar xzvf "$(TARBALL_GZ)" -C "$(TARBALL_GZ:D)" >> "$(STREAM)" 2>&1
    else
      tar xzf "$(TARBALL_GZ)" -C "$(TARBALL_GZ:D)"
    fi
  elif [ -f "$(TARBALL_BZ2)" ]; then
    if [ -n "$(STREAM)" ]; then
      tar xjvf "$(TARBALL_BZ2)" -C "$(TARBALL_BZ2:D)" >> "$(STREAM)" 2>&1
    else
      tar xjf "$(TARBALL_BZ2)" -C "$(TARBALL_BZ2:D)"
    fi
  else
    exit 1
  fi
  if [ $? -ne 0 ]; then
    echo "ERROR: failed to expand PPL tarball." 1>&2
    echo -n "ERROR: failed to expand PPL tarball." | $(AWACS)
    exit 1
  fi
  [ -d "$(DEST_DIR)" ] || exit 1
  [ -x "$(DEST_DIR)/configure" ] || exit 1
  [ -e "$(<)" ] && exit 1
  touch "$(<)"
}


make install
  : ../../binutils//install/<gmp>unspecified/<ppl>unspecified
    ..//gmp/<ppl>unspecified
    srcdir/<triplet>unspecified/<binutils>unspecified/<gmp>unspecified
  : @make-install
  ;
explicit install ;

rule make-install ( targets * : sources * : properties * )
{
  assert-specified   <triplet>         : $(properties) ;
  assert-unspecified <multilib>        : $(properties) ;
  assert-unspecified <multilib-hidden> : $(properties) ;
  assert-specified   <binutils>        : $(properties) ;
  assert-unspecified <binutils-hidden> : $(properties) ;
  assert-specified   <gmp>             : $(properties) ;
  assert-unspecified <gmp-hidden>      : $(properties) ;
  assert-unspecified <mpfr>            : $(properties) ;
  assert-unspecified <mpfr-hidden>     : $(properties) ;
  assert-unspecified <mpc>             : $(properties) ;
  assert-unspecified <mpc-hidden>      : $(properties) ;
  assert-specified   <ppl>             : $(properties) ;
  assert-unspecified <ppl-hidden>      : $(properties) ;
  assert-unspecified <cloog>           : $(properties) ;
  assert-unspecified <cloog-hidden>    : $(properties) ;
  assert-unspecified <gcc>             : $(properties) ;
  assert-unspecified <gcc-hidden>      : $(properties) ;
  assert-unspecified <icu4c>           : $(properties) ;
  assert-unspecified <icu4c-hidden>    : $(properties) ;
  assert-unspecified <mpi>             : $(properties) ;
  assert-unspecified <mpi-hidden>      : $(properties) ;
  assert-unspecified <openmpi>         : $(properties) ;
  assert-unspecified <openmpi-hidden>  : $(properties) ;
  assert-unspecified <boost>           : $(properties) ;
  assert-unspecified <boost-hidden>    : $(properties) ;

  OPTIONS on $(targets) = ;

  local version = [ feature.get-values <ppl> : $(properties) ] ;
  VERSION on $(targets) = $(version) ;

  # Set the path to the 'configure' file.
  local configure = $(INTRO_ROOT_DIR)/ppl-$(version)/configure ;
  CONFIGURE on $(targets) = $(configure) ;

  # Set the '--build' and '--host' options for the 'configure' script.
  local triplet = [ feature.get-values <triplet> : $(properties) ] ;
  TRIPLET on $(targets) = $(triplet) ;
  OPTIONS on $(targets) += --build=$(triplet) ;
  OPTIONS on $(targets) += --host=$(triplet) ;

  # Set the '--prefix' option for the 'configure' script.
  OPTIONS on $(targets) += --prefix=\"$(PREFIX)\" ;

  # Set the link variants for the 'configure' script.
  OPTIONS on $(targets) += --enable-static ;
  OPTIONS on $(targets) += --enable-shared ;

  OPTIONS on $(targets) += --with-gmp=\"$(PREFIX)\" ;
}
actions make-install
{
  rm -f "$(<)" || exit $?
  [ -x "$(CONFIGURE)" ] || exit 1
  [ `"$(CONFIGURE:D)/config.sub" $(TRIPLET)` = $(TRIPLET) ] || exit 1
  { mkdir -p "$(<:D)/build" && ( cd "$(<:D)/build" && rm -rf * ); } || exit 1
  if [ -n "$(STREAM)" ]; then
    ( cd "$(<:D)/build" && "$(CONFIGURE)" $(OPTIONS) >> "$(STREAM)" 2>&1 )
  else
    ( cd "$(<:D)/build" && "$(CONFIGURE)" $(OPTIONS) )
  fi
  if [ $? -ne 0 ]; then
    echo "ERROR: failed to 'configure' PPL $(VERSION) (as prerequisites)." 1>&2
    echo -n "ERROR: failed to 'configure' PPL $(VERSION) (as prerequisites)." | $(AWACS)
    exit 1
  fi
  [ -f "$(<:D)/build/Makefile" ] || exit 1
  if [ -n "$(STREAM)" ]; then
    ( cd "$(<:D)/build" && make --jobs=$(CONCURRENCY) >> "$(STREAM)" 2>&1 )
  else
    ( cd "$(<:D)/build" && make --jobs=$(CONCURRENCY) )
  fi
  if [ $? -ne 0 ]; then
    echo "ERROR: failed to 'make' PPL $(VERSION) (as prerequisites)." 1>&2
    echo -n "ERROR: failed to 'make' PPL $(VERSION) (as prerequisites)." | $(AWACS)
    exit 1
  fi
  if [ -n "$(STREAM)" ]; then
    # 0.12 can't compile. See https://www.cs.unipr.it/mantis/view.php?id=350.
    if [ $(VERSION) != 0.12 ]; then
      ( cd "$(<:D)/build" && make --jobs=$(CONCURRENCY) check >> "$(STREAM)" 2>&1 )
    fi
  else
    # 0.12 can't compile. See https://www.cs.unipr.it/mantis/view.php?id=350.
    if [ $(VERSION) != 0.12 ]; then
      ( cd "$(<:D)/build" && make --jobs=$(CONCURRENCY) check )
    fi
  fi
  if [ $? -ne 0 ]; then
    echo "ERROR: failed to 'make check' PPL $(VERSION) (as prerequisites)." 1>&2
    echo -n "ERROR: failed to 'make check' PPL $(VERSION) (as prerequisites)." | $(AWACS)
    exit 1
  fi
  if [ -n "$(STREAM)" ]; then
    ( cd "$(<:D)/build" && make install >> "$(STREAM)" 2>&1 )
  else
    ( cd "$(<:D)/build" && make install )
  fi
  if [ $? -ne 0 ]; then
    echo "ERROR: failed to 'make install' PPL $(VERSION) (as prerequisites)." 1>&2
    echo -n "ERROR: failed to 'make install' PPL $(VERSION) (as prerequisites)." | $(AWACS)
    exit 1
  fi
  ( cd "$(<:D)" && rm -rf build )
  echo -n "PPL $(VERSION) (as prerequisites) was successfully built." | $(AWACS)
  [ -e "$(<)" ] && exit 1
  touch "$(<)"
}

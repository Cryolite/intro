project intro/gdb ;

import alias ;
import errors ;
import feature ;
import make ;
import path ;
import regex ;
import "$(INTRO_ROOT_DIR)/compilers"
  : is-gcc
    is-clang
    is-icc
    get-compiler-prefix
    get-compiler-triplets
    get-cc
    get-cxx
    get-ar
    get-ranlib
    get-nm
    get-environment-commands
    get-property-dump-commands
  ;

.here = [ regex.match "Jamfile<(.*)>" : "$(__name__)" : 1 ] ;
.here = [ path.make "$(.here)" ] ;
.here-relative = [ path.relative "$(.here)" "$(INTRO_ROOT_DIR)" ] ;


rule compiler-dep-req ( properties * )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  local result ;
  if [ is-gcc "$(compiler)" ] {
    result += "<source>../gcc//install" ;
  }
  else if [ is-clang "$(compiler)" ] {
    result += "<source>../gcc//install" ;
    result += "<source>../clang//install" ;
  }
  else if [ is-icc "$(compiler)" ] {
    result += "<source>../gcc//install" ;
    result += "<source>../icc//install" ;
  }
  else {
    errors.error "an internal error." ;
  }
  return $(result) ;
}

alias compiler-dep : : <conditional>@compiler-dep-req ;
explicit compiler-dep ;


rule srcdir-timestamp-req ( properties * )
{
  local version = [ feature.get-values <gdb-hidden> : $(properties) ] ;
  return "<source>$(INTRO_ROOT_DIR)/gdb-$(version)/f4f591f6-9a1d-4ac3-ae2f-ba6463d79680" ;
}

alias srcdir-timestamp : : <conditional>@srcdir-timestamp-req ;
explicit srcdir-timestamp ;


rule location-conditional ( properties * )
{
  local compiler-prefix = [ get-compiler-prefix "$(PREFIX)" : $(properties) ] ;
  return "<location>$(compiler-prefix)/bin" ;
}

make gdb
  : compiler-dep
    srcdir-timestamp
  : @make-install
  : $(USE_COMPILER)
    $(USE_MULTITARGET)
    $(USE_GDB)
    <conditional>@location-conditional
  ;
explicit gdb ;

rule make-install ( targets * : sources * : properties * )
{
  HERE on $(targets) = [ path.native "$(.here)" ] ;
  HERE_RELATIVE on $(targets) = [ path.native "$(.here-relative)" ] ;

  # Sets the path to the source directory.
  local version = [ feature.get-values <gdb> : $(properties) ] ;
  local srcdir = "$(INTRO_ROOT_DIR)/gdb-$(version)" ;
  SRCDIR on $(targets) = [ path.native "$(srcdir)" ] ;

  # Sets the path to `objdir`.
  local objdir = "$(INTRO_ROOT_DIR)/objdir" ;
  local objdir-native = [ path.native "$(objdir)" ] ;
  OBJDIR on $(targets) = "$(objdir-native)" ;

  OPTIONS on $(targets) = ;

  # Sets `--prefix' option for `configure' script.
  local compiler-prefix = [ get-compiler-prefix "$(PREFIX)" : $(properties) ] ;
  local compiler-prefix-native = [ path.native "$(compiler-prefix)" ] ;
  OPTIONS on $(targets) += "--prefix='$(compiler-prefix-native)'" ;

  # Sets `--build', `--host' and `--target' options for `configure' script.
  local triplets = [ get-compiler-triplets $(properties) ] ;
  local build-triplet = "$(triplets[1])" ;
  local host-triplet = "$(triplets[2])" ;
  local target-triplet = "$(triplets[3])" ;
  BUILD_TRIPLET on $(targets) = "$(build-triplet)" ;
  HOST_TRIPLET on $(targets) = "$(host-triplet)" ;
  TARGET_TRIPLET on $(targets) = "$(target-triplet)" ;
  OPTIONS on $(targets) += "--build=$(build-triplet)" ;
  OPTIONS on $(targets) += "--host=$(host-triplet)" ;
  OPTIONS on $(targets) += "--target=$(target-triplet)" ;

  local cc = [ get-cc "$(PREFIX)" : $(properties) ] ;
  if "$(cc)" {
    local cc-native = [ path.native "$(cc)" ] ;
    OPTIONS on $(targets) += "CC='$(cc-native)'" ;
  }

  local cxx = [ get-cxx "$(PREFIX)" : $(properties) ] ;
  if "$(cxx)" {
    local cxx-native = [ path.native "$(cxx)" ] ;
    OPTIONS on $(targets) += "CXX='$(cxx-native)'" ;
  }

  local ar = [ get-ar "$(PREFIX)" : $(properties) ] ;
  if "$(ar)" {
    local ar-native = [ path.native "$(ar)" ] ;
    OPTIONS on $(targets) += "AR='$(ar-native)'" ;
  }

  local ranlib = [ get-ranlib "$(PREFIX)" : $(properties) ] ;
  if "$(ranlib)" {
    local ranlib-native = [ path.native "$(ranlib)" ] ;
    OPTIONS on $(targets) += "RANLIB='$(ranlib-native)'" ;
  }

  local nm = [ get-nm "$(PREFIX)" : $(properties) ] ;
  if "$(nm)" {
    local nm-native = [ path.native "$(nm)" ] ;
    OPTIONS on $(targets) += "NM='$(nm-native)'" ;
  }

  local cc-for-target = [ get-cc "$(PREFIX)" : $(properties) ] ;
  if "$(cc-for-target)" {
    local cc-for-target-native = [ path.native "$(cc-for-target)" ] ;
    OPTIONS on $(targets) += "CC_FOR_TARGET='$(cc-for-target-native)'" ;
  }

  local cxx-for-target = [ get-cxx "$(PREFIX)" : $(properties) ] ;
  if "$(cxx-for-target)" {
    local cxx-for-target-native = [ path.native "$(cxx-for-target)" ] ;
    OPTIONS on $(targets) += "CXX_FOR_TARGET='$(cxx-for-target-native)'" ;
  }

  local ar-for-target = [ get-ar "$(PREFIX)" : $(properties) ] ;
  if "$(ar-for-target)" {
    local ar-for-target-native = [ path.native "$(ar-for-target)" ] ;
    OPTIONS on $(targets) += "AR_FOR_TARGET='$(ar-for-target-native)'" ;
  }

  local ranlib-for-target = [ get-ranlib "$(PREFIX)" : $(properties) ] ;
  if "$(ranlib-for-target)" {
    local ranlib-for-target-native = [ path.native "$(ranlib-for-target)" ] ;
    OPTIONS on $(targets) += "RANLIB_FOR_TARGET='$(ranlib-for-target-native)'" ;
  }

  local nm-for-target = [ get-nm "$(PREFIX)" : $(properties) ] ;
  if "$(nm-for-target)" {
    local nm-for-target-native = [ path.native "$(nm-for-target)" ] ;
    OPTIONS on $(targets) += "NM_FOR_TARGET='$(nm-for-target-native)'" ;
  }

  local environment-commands = [ get-environment-commands "$(PREFIX)" : $(properties) ] ;
  ENVIRONMENT_COMMANDS on $(targets) = "$(environment-commands)" ;

  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions make-install
{
  bash -s << 'EOS'
  exec >> '$(STDOUT_)' 2>> '$(STDERR_)'
$(ENVIRONMENT_COMMANDS)
$(PROPERTY_DUMP_COMMANDS)
  LINENO_ADJ=`grep -Fn 2e13f7ca-3ebc-4a81-aa68-bfce2d74ef87 '$(HERE)/jamfile' | grep -Eo '^[[:digit:]]+'`
  LINENO_ADJ=`expr $LINENO_ADJ - $LINENO + 1`
  PS4='+$(HERE_RELATIVE)/jamfile:`expr $LINENO + $LINENO_ADJ`: '
  set -ex

  rm -rf '$(OBJDIR)'

  cleanup ()
  {
    if [ -d '$(OBJDIR)' ]; then
      mv -n '$(OBJDIR)' "$(INTRO_ROOT_DIR)/objdir_$$"
    fi
  }
  trap cleanup ERR HUP INT QUIT TERM

  # Creates `objdir`.
  ( cd '$(INTRO_ROOT_DIR)' && mkdir objdir )

  [ -x '$(SRCDIR)/configure' ]
  [ -x '$(SRCDIR)/config.sub' ]
  [ `'$(SRCDIR)/config.sub' $(BUILD_TRIPLET)` = $(BUILD_TRIPLET) ]
  [ `'$(SRCDIR)/config.sub' $(HOST_TRIPLET)` = $(HOST_TRIPLET) ]
  [ `'$(SRCDIR)/config.sub' $(TARGET_TRIPLET)` = $(TARGET_TRIPLET) ]

  ( cd '$(OBJDIR)' && '$(SRCDIR)/configure' $(OPTIONS) )

  # Checks the creation of `Makefile`.
  [ -f '$(OBJDIR)/Makefile' ]

  ( cd '$(OBJDIR)' && make --jobs=$(CONCURRENCY) )

  if [ $(GDB_CHECK) = yes ]; then
    ( cd '$(OBJDIR)' && make check )
  fi

  ( cd '$(OBJDIR)' && make install )

  # Cleans up `objdir`.
  rm -r '$(OBJDIR)'

  [ -f '$(<)' ]
EOS
}


alias install : "gdb/$(DEFAULT_COMPILER_PROPERTIES)" ;
explicit install ;

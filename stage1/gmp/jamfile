project gmp ;

import alias ;
import errors ;
import feature ;
import make ;
import path ;
import regex ;


rule gcc-dep-req ( properties * )
{
  local result ;
  local stage = [ feature.get-values <intro-stage> : $(properties) ] ;
  local host = [ feature.get-values <intro-host> : $(properties) ] ;
  if $(stage) = 2 || $(stage) = 3 {
    result = <source>../../stage2/gcc//install ;
    result = $(result)/<intro-stage>2 ;
    # `<intro-host>' is automatically propagated.
    result = $(result)/<intro-link>unspecified ;
    local multilib = [ feature.get-values <intro-multilib-hidden> : $(properties) ] ;
    result = $(result)/<intro-multilib>$(multilib) ;
    result = $(result)/<intro-multilib-hidden>unspecified ;
    # `<binutils-version>' is automatically propagated.
    # `<binutils-version-hidden>unspecified' is automatically propagated.
    # `<gmp-version>' is automatically propagated.
    # `<gmp-version-hidden>unspecified' is automatically propagated.
    local mpfr-version = [ feature.get-values <mpfr-version-hidden> : $(properties) ] ;
    result = $(result)/<mpfr-version>$(mpfr-version) ;
    result = $(result)/<mpfr-version-hidden>unspecified ;
    local mpc-version = [ feature.get-values <mpc-version-hidden> : $(properties) ] ;
    result = $(result)/<mpc-version>$(mpc-version) ;
    result = $(result)/<mpc-version-hidden>unspecified ;
    # `<gcc-version>' is automatically propagated.
    # `<enable-cross-crt>' is automatically propagated.
    # `<enable-cross-binutils>' is automatically propagated.
  }
  return $(result) ;
}

alias gcc-dep : : <conditional>@gcc-dep-req ;
explicit gcc-dep ;


rule crt-dep-req ( properties * )
{
  local result ;
  local stage = [ feature.get-values <intro-stage> : $(properties) ] ;
  local host = [ feature.get-values <intro-host> : $(properties) ] ;
  local enable-cross-crt = [ feature.get-values <enable-cross-crt> : $(properties) ] ;
  if $(stage) = 3 && [ regex.match "(-w64-mingw32)$" : $(host) : 1 ] {
    if $(enable-cross-crt) = yes {
      result = <source>../../stage3//mingw-w64-crt//install ;
      # `<intro-stage>3' is automatically propagated.
      # `<intro-host>' is automatically propagated.
      result = $(result)/<intro-link>unspecified ;
      local multilib = [ feature.get-values <intro-multilib-hidden> : $(properties) ] ;
      result = $(result)/<intro-multilib>$(multilib) ;
      result = $(result)/<intro-multilib-hidden>unspecified ;
      # `<binutils-version>' is automatically propagated.
      # `<binutils-version-hidden>unspecified' is automatically propagated.
      local gmp-version = [ feature.get-values <gmp-version> : $(properties) ] ;
      result = $(result)/<gmp-version>unspecified ;
      result = $(result)/<gmp-version-hidden>$(gmp-version) ;
      # `<mpfr-version>unspecified' is automatically propagated.
      # `<mpfr-version-hidden>' is automatically propagated.
      # `<mpc-version>unspecified' is automatically propagated.
      # `<mpc-version-hidden>' is automatically propagated.
      # `<gcc-version>' is automatically propagated.
      # `<enable-cross-crt>yes' is automatically propagated.
      # `<enable-cross-binutils>' is automatically propagated.
    }
  }
  return $(result) ;
}

alias crt-dep : : <conditional>@crt-dep-req ;
explicit crt-dep ;


make download : : @download-gmp ;
explicit download ;

rule download-gmp ( targets * : sources * : properties * )
{
  local version = [ feature.get-values <gmp-version> : $(properties) ] ;
  URL on $(targets) = http://core.ring.gr.jp/pub/GNU/gmp/gmp-$(version).tar.bz2 ;
  TARBALL_GZ on $(targets) = $(INTRO_ROOT_DIR)/gmp-$(version).tar.gz ;
  TARBALL_BZ2 on $(targets) = $(INTRO_ROOT_DIR)/gmp-$(version).tar.bz2 ;
}
actions download-gmp
{
  rm -f "$(<)" || exit $?
  if [ ! -f "$(TARBALL_GZ)" -a ! -f "$(TARBALL_BZ2)" ]; then
    ( cd "$(TARBALL_BZ2:D)" && wget --quiet -- '$(URL)' ) \
      || { echo "ERROR: failed to download the GMP tarball." 2>>"$(STDOUT_)" 1>&2; exit 1; }
    [ -f "$(TARBALL_BZ2)" ] || exit 1
  fi
  [ ! -e "$(<)" ] || exit 1
  touch "$(<)"
}


make expand : download : @expand-gmp ;
explicit expand ;

rule expand-gmp ( targets * : sources * : properties * )
{
  if ! $(sources[1]) {
    errors.error "ERROR: wrong number of sources." ;
  }
  if $(sources[2]) {
    errors.error "ERROR: wrong number of sources." ;
  }

  local version = [ feature.get-values <gmp-version> : $(properties) ] ;
  TARBALL_GZ on $(targets) = $(INTRO_ROOT_DIR)/gmp-$(version).tar.gz ;
  TARBALL_BZ2 on $(targets) = $(INTRO_ROOT_DIR)/gmp-$(version).tar.bz2 ;
  DEST_DIR on $(targets) = $(INTRO_ROOT_DIR)/gmp-$(version) ;

  local stage = [ feature.get-values <intro-stage> : $(properties) ] ;
  if $(stage) != 1 {
    errors.error "ERROR: `<intro-stage>$(stage)' is not valid for the GMP `expand' target." ;
  }

  local host = [ feature.get-values <intro-host> : $(properties) ] ;
  if $(host) != unspecified {
    errors.error "ERROR: `<intro-host>$(host)' is not valid for the GMP `expand' target." ;
  }

  local link = [ feature.get-values <intro-link> : $(properties) ] ;
  if $(link) != unspecified {
    errors.error "ERROR: `<intro-link>$(link)' is not valid for the GMP `expand' target." ;
  }

  local multilib = [ feature.get-values <intro-multilib> : $(properties) ] ;
  if $(multilib) != unspecified {
    errors.error "ERROR: `<intro-multilib>$(multilib)' is not valid for the GMP `expand' target." ;
  }

  local binutils-version = [ feature.get-values <binutils-version> : $(properties) ] ;
  if $(binutils-version) != unspecified {
    errors.error "ERROR: `<binutils-version>$(binutils-version)' is not valid for the GMP `expand' target." ;
  }
  binutils-version = [ feature.get-values <binutils-version-hidden> : $(properties) ] ;
  if $(binutils-version) != unspecified {
    errors.error "ERROR: `<binutils-version-hidden>$(binutils-version)' is not valid for the GMP `expand' target." ;
  }

  local gmp-version = [ feature.get-values <gmp-version-hidden> : $(properties) ] ;
  if $(gmp-version) != unspecified {
    errors.error "ERROR: `<gmp-version-hidden>$(gmp-version)' is not valid for the GMP `expand' target." ;
  }

  local mpfr-version = [ feature.get-values <mpfr-version> : $(properties) ] ;
  if $(mpfr-version) != unspecified {
    errors.error "ERROR: `<mpfr-version>$(mpfr-version)' is not valid for the GMP `expand' target." ;
  }
  mpfr-version = [ feature.get-values <mpfr-version-hidden> : $(properties) ] ;
  if $(mpfr-version) != unspecified {
    errors.error "ERROR: `<mpfr-version-hidden>$(mpfr-version)' is not valid for the GMP `expand' target." ;
  }

  local mpc-version = [ feature.get-values <mpc-version> : $(properties) ] ;
  if $(mpc-version) != unspecified {
    errors.error "ERROR: `<mpc-version>$(mpc-version)' is not valid for the GMP `expand' target." ;
  }
  mpc-version = [ feature.get-values <mpc-version-hidden> : $(properties) ] ;
  if $(mpc-version) != unspecified {
    errors.error "ERROR: `<mpc-version-hidden>$(mpc-version)' is not valid for the GMP `expand' target." ;
  }

  local gcc-version = [ feature.get-values <gcc-version> : $(properties) ] ;
  if $(gcc-version) != unspecified {
    errors.error "ERROR: `<gcc-version>$(gcc-version)' is not valid for the GMP `expand' target." ;
  }

  local enable-cross-binutils = [ feature.get-values <enable-cross-binutils> : $(properties) ] ;
  if $(enable-cross-binutils) != unspecified {
    errors.error "ERROR: `<enable-cross-binutils>$(enable-cross-binutils)' is not valid for the GMP `expand' target." ;
  }

  local enable-cross-crt = [ feature.get-values <enable-cross-crt> : $(properties) ] ;
  if $(enable-cross-crt) != unspecified {
    errors.error "ERROR: `<enable-cross-crt>$(enable-cross-crt)' is not valid for the GMP `expand' target." ;
  }
}
actions expand-gmp
{
  rm -f "$(<)" || exit $?
  [ -f "$(>[1])" ] || exit 1
  if [ ! -x "$(DEST_DIR)/configure" ]; then
    rm -rf "$(DEST_DIR)" || exit $?
    if [ -f "$(TARBALL_GZ)" ]; then
      tar xzf "$(TARBALL_GZ)" -C "$(TARBALL_GZ:D)" \
        || { echo "ERROR: failed to expand the GMP tarball." 2>>"$(STDERR_)" 1>&2; exit 1; }
    elif [ -f "$(TARBALL_BZ2)" ]; then
      tar xjf "$(TARBALL_BZ2)" -C "$(TARBALL_BZ2:D)" \
        || { echo "ERROR: failed to expand the GMP tarball." 2>>"$(STDERR_)" 1>&2; exit 1; }
    else
      exit 1
    fi
    [ -x "$(DEST_DIR)/configure" ] || exit 1
  fi
  [ ! -e "$(<)" ] || exit 1
  touch "$(<)"
}


make make
  : gcc-dep
    crt-dep
    ../../stage1/gmp//expand/<intro-host>unspecified/<intro-link>unspecified/<binutils-version>unspecified/<gcc-version>unspecified
  : @make-gmp
  ;
explicit make ;

rule make-gmp ( targets * : sources * : properties * )
{
  OPTIONS on $(targets) = ;

  local version = [ feature.get-values <gmp-version> : $(properties) ] ;

  # Set the path to the 'configure' file.
  local configure = $(INTRO_ROOT_DIR)/gmp-$(version)/configure ;
  CONFIGURE on $(targets) = $(configure) ;

  # Set the '--build' and '--host' options for the 'configure' script.
  local stage = [ feature.get-values <intro-stage> : $(properties) ] ;
  local build = [ SHELL "\"$(INTRO_ROOT_DIR)/stage1/gmp/config.guess\" | tr --delete '\n'" ] ;
  if $(stage) = 1 {
    OPTIONS on $(targets) += --build=$(build) ;
    OPTIONS on $(targets) += --host=$(build) ;
  }
  else if $(stage) = 2 {
    OPTIONS on $(targets) += --build=$(build) ;
    OPTIONS on $(targets) += --host=$(HOST) ;
  }
  else {
    OPTIONS on $(targets) += --build=$(build) ;
    OPTIONS on $(targets) += --host=$(HOST) ;
  }

  # Set the '--prefix' option for the 'configure' script.
  if $(stage) = 1 {
    OPTIONS on $(targets) += --prefix=\"$(PREFIX)\" ;
  }
  else if $(stage) = 2 {
    OPTIONS on $(targets) += --prefix=\"$(PREFIX)/$(HOST)\" ;
  }
  else {
    OPTIONS on $(targets) += --prefix=\"$(CROSS_PREFIX)\" ;
  }

  # Set the link variants for the 'configure' script.
  local link = [ feature.get-values <intro-link> : $(properties) ] ;
  if $(link) = static || $(link) = both {
    OPTIONS on $(targets) += --enable-static ;
  }
  else {
    OPTIONS on $(targets) += --disable-static ;
  }
  if $(link) = shared || $(link) = both {
    OPTIONS on $(targets) += --enable-shared ;
  }
  else {
    OPTIONS on $(targets) += --disable-shared ;
  }

  SET_RUNTIME_SYMLINK on $(targets) = ;
  UNSET_RUNTIME_SYMLINK on $(targets) = ;
  if $(stage) = 2 || $(stage) = 3 {
    SET_RUNTIME_SYMLINK on $(targets) = "$(STAGE2_SET_RUNTIME_SYMLINK)" ;
    UNSET_RUNTIME_SYMLINK on $(targets) = "$(STAGE2_UNSET_RUNTIME_SYMLINK)" ;
  }

  SET_RUN_VARS on $(targets) = ;
  UNSET_RUN_VARS on $(targets) = ;
  if $(stage) = 1 {
    # Do nothing.
  }
  else {
    if [ regex.match "(-w64-mingw32)$" : $(build) : 1 ] {
      SET_RUN_VARS on $(targets) = "OLD_PATH=$PATH; PATH=\"$(PREFIX)/bin\":$PATH; export PATH" ;
      UNSET_RUN_VARS on $(targets) = "PATH=$OLD_PATH; export PATH" ;
    }
    else {
      SET_RUN_VARS on $(targets) = "OLD_PATH=$PATH; OLD_LD_LIBRARY_PATH=$LD_LIBRARY_PATH; PATH=\"$(PREFIX)/bin\":$PATH; LD_LIBRARY_PATH=\"$(PREFIX)/lib\":$LD_LIBRARY_PATH; export PATH; export LD_LIBRARY_PATH" ;
      UNSET_RUN_VARS on $(targets) = "PATH=$OLD_PATH; LD_LIBRARY_PATH=$OLD_LD_LIBRARY_PATH; export PATH; export LD_LIBRARY_PATH" ;
    }
  }

  CHECK on $(targets) = no ;
  if $(stage) = 1 || $(HOST_RUNNABLE) = yes {
    CHECK on $(targets) = yes ;
  }
}
actions make-gmp
{
  rm -f "$(<)" || exit $?
  [ -x "$(CONFIGURE)" ] || exit 1
  { mkdir -p "$(<:D)/build" && ( cd "$(<:D)/build" && rm -rf * ); } || exit $?
  $(SET_RUNTIME_SYMLINK)
  $(SET_RUN_VARS)
  ( cd "$(<:D)/build" && $(RUN_VAR) "$(CONFIGURE)" $(OPTIONS) 1>>"$(STDOUT_)" 2>>"$(STDERR_)" )
  if [ $? -ne 0 ]; then
    $(UNSET_RUN_VARS)
    $(UNSET_RUNTIME_SYMLINK)
    echo "ERROR: failed to 'configure' for the GMP build." 2>>"$(STDERR_)" 1>&2
    exit 1
  fi
  [ -f "$(<:D)/build/Makefile" ] || { $(UNSET_RUN_VARS); $(UNSET_RUNTIME_SYMLINK); exit 1; }
  ( cd "$(<:D)/build" && make --jobs=$(CONCURRENCY) 1>>"$(STDOUT_)" 2>>"$(STDERR_)" )
  if [ $? -ne 0 ]; then
    $(UNSET_RUN_VARS)
    $(UNSET_RUNTIME_SYMLINK)
    echo "ERROR: failed to 'make' for the GMP build." 2>>"$(STDERR_)" 1>&2
    exit 1
  fi
  if [ $(CHECK) = yes ]; then
    ( cd "$(<:D)/build" && make --jobs=$(CONCURRENCY) check 1>>"$(STDOUT_)" 2>>"$(STDERR_)" )
    if [ $? -ne 0 ]; then
      $(UNSET_RUN_VARS)
      $(UNSET_RUNTIME_SYMLINK)
      echo "ERROR: failed to 'make check' for the GMP build." 2>>"$(STDERR_)" 1>&2
      exit 1
    fi
  fi
  ( cd "$(<:D)/build" && make --jobs=$(CONCURRENCY) install 1>>"$(STDOUT_)" 2>>"$(STDERR_)" )
  if [ $? -ne 0 ]; then
    $(UNSET_RUN_VARS)
    $(UNSET_RUNTIME_SYMLINK)
    echo "ERROR: failed to 'make install' for the GMP build." 2>>"$(STDERR_)" 1>&2
    exit 1
  fi
  $(UNSET_RUN_VARS)
  $(UNSET_RUNTIME_SYMLINK)
  [ ! -e "$(<)" ] || exit 1
  touch "$(<)"
}


local BUILD = [ SHELL "\"$(INTRO_ROOT_DIR)/stage1/gcc/config.guess\" | tr --delete '\n'" ] ;
local BUILD_SHARED_LIB_FILE ;
local BUILD_XDLL_DIR ;
if [ regex.match "(-w64-mingw32)$" : $(BUILD) : 1 ] {
  BUILD_SHARED_LIB_FILE = "libgmp.dll.a" ;
  BUILD_XDLL_DIR = "bin" ;
}
else {
  BUILD_SHARED_LIB_FILE = "libgmp.so" ;
  BUILD_XDLL_DIR = "lib" ;
}

local HOST_SHARED_LIB_FILE ;
local HOST_XDLL_DIR ;
if [ regex.match "(-w64-mingw32)$" : $(HOST) : 1 ] {
  HOST_SHARED_LIB_FILE = "libgmp.dll.a" ;
  HOST_XDLL_DIR = "bin" ;
}
else {
  HOST_SHARED_LIB_FILE = "libgmp.so" ;
  HOST_XDLL_DIR = "lib" ;
}


make "$(PREFIX)/lib/libgmp.a" : make/<link>shared : @exists ;
explicit "$(PREFIX)/lib/libgmp.a" ;

make "$(PREFIX)/lib/$(BUILD_SHARED_LIB_FILE)" : make/<link>shared : @exists ;
explicit "$(PREFIX)/lib$(BUILD_SHARED_LIB_FILE)" ;

make "$(PREFIX)/$(HOST)/lib/libgmp.a" : make/<link>shared : @exists ;
explicit "$(PREFIX)/$(HOST)/lib/libgmp.a" ;

make "$(PREFIX)/$(HOST)/lib/$(HOST_SHARED_LIB_FILE)" : make/<link>shared : @exists ;
explicit "$(PREFIX)/$(HOST)/lib/$(HOST_SHARED_LIB_FILE)" ;

make "$(CROSS_PREFIX)/lib/libgmp.a" : make/<link>shared : @exists ;
explicit "$(CROSS_PREFIX)/lib/libgmp.a" ;

make "$(CROSS_PREFIX)/lib/$(HOST_SHARED_LIB_FILE)" : make/<link>shared : @exists ;
explicit "$(CROSS_PREFIX)/lib/$(HOST_SHARED_LIB_FILE)" ;

actions exists
{
  [ -f "$(<)" ] || exit 1
  touch "$(<)"
}


lib gmp-raw.lib
  :
  : <intro-stage>1:<file>"$(PREFIX)/lib/libgmp.a"
    <intro-stage>2:<file>"$(PREFIX)/$(HOST)/lib/libgmp.a"
    <intro-stage>3:<file>"$(CROSS_PREFIX)/lib/libgmp.a"
    <link>static
  ;
lib gmp-raw.lib
  :
  : <intro-stage>1:<file>"$(PREFIX)/lib/$(BUILD_SHARED_LIB_FILE)"
    <intro-stage>2:<file>"$(PREFIX)/$(HOST)/lib/$(HOST_SHARED_LIB_FILE)"
    <intro-stage>3:<file>"$(CROSS_PREFIX)/lib/$(HOST_SHARED_LIB_FILE)"
    <link>shared
  ;
explicit gmp-raw.lib ;


alias gmp.lib
  : gmp-raw.lib
  :
  :
  : <intro-stage>1:<include>"$(PREFIX)/include"
    <intro-stage>2:<include>"$(PREFIX)/$(HOST)/include"
    <intro-stage>3:<include>"$(CROSS_PREFIX)/include"
    <intro-stage>1,<link>shared:<xdll-path>"$(PREFIX)/$(BUILD_XDLL_DIR)"
    <intro-stage>2,<link>shared:<xdll-path>"$(PREFIX)/$(HOST)/$(HOST_XDLL_DIR)"
    <intro-stage>3,<link>shared:<xdll-path>"$(CROSS_PREFIX)/$(HOST_XDLL_DIR)"
  ;
explicit gmp.lib ;


obj test.obj
  : "$(INTRO_ROOT_DIR)/stage1/gmp/test.c"
  : <dependency>gmp-raw.lib
    <intro-stage>1:<include>"$(PREFIX)/include"
    <intro-stage>2:<include>"$(PREFIX)/$(HOST)/include"
    <intro-stage>3:<include>"$(CROSS_PREFIX)/include"
  ;
explicit test.obj ;


exe test.exe : gmp-raw.lib test.obj ;
explicit test.exe ;


rule test-run-req ( properties * )
{
  local version = [ feature.get-values <gmp-version> : $(properties) ] ;
  return <testing.arg>$(version) ;
}
run test.exe
  :
  :
  : <intro-stage>1,<link>shared:<xdll-path>"$(PREFIX)/$(BUILD_XDLL_DIR)"
    <intro-stage>2,<link>shared:<xdll-path>"$(PREFIX)/$(HOST)/$(HOST_XDLL_DIR)"
    <intro-stage>3,<link>shared:<xdll-path>"$(CROSS_PREFIX)/$(HOST_XDLL_DIR)"
    <conditional>@test-run-req
  : test.run
  ;
explicit test.run ;


rule install-req ( properties * )
{
  local result ;
  # if $(stage) = 1 || $(HOST_RUNNABLE) = yes {
  #   result = <source>test.run ;
  # }
  # else {
  #   result = <source>test.exe ;
  # }
  # if $(link) = static {
  #   result = $(result)/<link>static ;
  # }
  # else if $(link) = shared {
  #   result = $(result)/<link>shared ;
  # }
  # else {
  #   result = $(result)/<link>static $(result)/<link>shared ;
  # }
  result = <source>make ;

  local tmp ;

  local stage = [ feature.get-values <intro-stage> : $(properties) ] ;

  local build = [ SHELL "\"$(INTRO_ROOT_DIR)/stage1/gmp/config.guess\" | tr --delete '\n'" ] ;

  local host = [ feature.get-values <intro-host> : $(properties) ] ;
  if $(stage) = 1 && $(host) != unspecified {
    errors.error "ERROR: '<intro-host>$(host)' is not valid for the GMP stage 1 build." ;
  }
  if ( $(stage) = 2 || $(stage) = 3 ) && $(host) = unspecified {
    errors.error "ERROR: '<intro-host>' is not specified for the GMP stage 2 or 3 build." ;
  }
  if $(host) != unspecified {
    tmp = [ SHELL "\"$(INTRO_ROOT_DIR)/stage1/gmp/config.sub\" $(host) | tr --delete '\n'" ] ;
    if $(tmp) != $(host) {
      errors.error "ERROR: '<intro-host>$(host)' is not canonical for the GMP build." ;
    }
  }

  local link = [ feature.get-values <intro-link> : $(properties) ] ;
  if $(link) = unspecified {
    errors.error "ERROR: '<intro-link>' is not specified for the GMP build" ;
  }

  local multilib = [ feature.get-values <intro-multilib> : $(properties) ] ;
  if $(multilib) != unspecified {
    errors.error "ERROR: '<intro-multilib>$(multilib)' is not valid for the GMP build." ;
  }
  multilib = [ feature.get-values <intro-multilib-hidden> : $(properties) ] ;
  if $(stage) = 1 && $(multilib) != unspecified {
    errors.error "ERROR: '<intro-multilib-hidden>$(multilib)' is not valid for the GMP stage 1 build." ;
  }
  if ( $(stage) = 2 || $(stage) = 3 ) && $(multilib) = unspecified {
    errors.error "ERROR: '<intro-multilib-hidden>' is not specified for the GMP stage 2 or 3 build." ;
  }

  local binutils-version = [ feature.get-values <binutils-version> : $(properties) ] ;
  if $(stage) = 1 && $(binutils-version) != unspecified {
    errors.error "ERROR: '<binutils-version>$(binutils-version)' is not valid for the GMP stage 1 build." ;
  }
  if ( $(stage) = 2 || $(stage) = 3 ) && $(binutils-version) = unspecified {
    errors.error "ERROR: '<binutils-version>' is not specified for the GMP stage 2 or 3 build." ;
  }
  binutils-version = [ feature.get-values <binutils-version-hidden> : $(properties) ] ;
  if $(binutils-version) != unspecified {
    errors.error "ERROR: '<binutils-version-hidden>$(binutils-version)' is not valid for the GMP build." ;
  }

  local gmp-version = [ feature.get-values <gmp-version> : $(properties) ] ;
  if $(gmp-version) = unspecified {
    errors.error "ERROR: '<gmp-version>' is not specified for the GMP build." ;
  }
  gmp-version = [ feature.get-values <gmp-version-hidden> : $(properties) ] ;
  if $(gmp-version) != unspecified {
    errors.error "ERROR: '<gmp-version-hidden>$(gmp-version)' is not valid for the GMP build." ;
  }

  local mpfr-version = [ feature.get-values <mpfr-version> : $(properties) ] ;
  if $(mpfr-version) != unspecified {
    errors.error "ERROR: '<mpfr-version>$(mpfr-version)' is not valid for the GMP build." ;
  }
  mpfr-version = [ feature.get-values <mpfr-version-hidden> : $(properties) ] ;
  if $(stage) = 1 && $(mpfr-version) != unspecified {
    errors.error "ERROR: '<mpfr-version-hidden>$(mpfr-version)' is not valid for the GMP stage 1 build." ;
  }
  if ( $(stage) = 2 || $(stage) = 3 ) && $(mpfr-version) = unspecified {
    errors.error "ERROR: '<mpfr-version-hidden>' is not specified for the GMP stage 2 or 3 build" ;
  }

  local mpc-version = [ feature.get-values <mpc-version> : $(properties) ] ;
  if $(mpc-version) != unspecified {
    errors.error "ERROR: '<mpc-version>$(mpc-version)' is not valid for the GMP build." ;
  }
  mpc-version = [ feature.get-values <mpc-version-hidden> : $(properties) ] ;
  if $(stage) = 1 && $(mpc-version) != unspecified {
    errors.error "ERROR: '<mpc-version-hidden>$(mpc-version)' is not valid for the GMP stage 1 build." ;
  }
  if ( $(stage) = 2 || $(stage) = 3 ) && $(mpc-version) = unspecified {
    errors.error "ERROR: '<mpc-version-hidden>' is not specified for the GMP stage 2 or 3 build." ;
  }

  local gcc-version = [ feature.get-values <gcc-version> : $(properties) ] ;
  if $(stage) = 1 && $(gcc-version) != unspecified {
    errors.error "ERROR: '<gcc-version>$(gcc-version)' is not valid for the GMP stage 1 build." ;
  }
  if ( $(stage) = 2 || $(stage) = 3 ) && $(gcc-version) = unspecified {
    errors.error "ERROR: '<gcc-version>' is not specified for the GMP stage 2 or 3 build." ;
  }

  local enable-cross-crt = [ feature.get-values <enable-cross-crt> : $(properties) ] ;
  if $(stage) = 1 {
    if $(enable-cross-crt) != unspecified {
      errors.error "ERROR: `<enable-cross-crt>$(enable-cross-crt)' is not valid for the GMP stage 1 build." ;
    }
  }
  else {
    if $(enable-cross-crt) = unspecified {
      errors.error "ERROR: `<enable-cross-crt>' is not specified for the GMP stage 2 or 3 build." ;
    }
  }

  local enable-cross-binutils = [ feature.get-values <enable-cross-binutils> : $(properties) ] ;
  if $(stage) = 1 {
    if $(enable-cross-binutils) != unspecified {
      errors.error "ERROR: `<enable-cross-binutils>$(enable-cross-binutils)' is not valid for the GMP stage 1 build." ;
    }
  }
  else {
    if $(enable-cross-binutils) = unspecified {
      errors.error "ERROR: `<enable-cross-binutils>' is not specified for the GMP stage 2 or 3 build." ;
    }
  }

  return $(result) ;
}

alias install : : <conditional>@install-req ;
explicit install ;

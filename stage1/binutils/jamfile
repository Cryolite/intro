project binutils ;

import alias ;
import errors ;
import feature ;
import make ;
import regex ;


rule gcc-dep-req ( properties * )
{
  local result ;
  local stage = [ feature.get-values <intro-stage> : $(properties) ] ;
  if $(stage) = 3 {
    result = <source>../../stage2/gcc//install ;
    result = $(result)/<intro-stage>2 ;
    # `<intro-host>' is automatically propagated.
    # `<intro-link>unspecified' is automatically propagated.
    # `<intro-multilib>' is automatically propagated.
    # `<intro-multilib-hidden>unspecified' is automatically propagated.
    # `<binutils-version>' is automatically propagated.
    # `<binutils-version-hidden>unspecified' is automatically propagated.
    local gmp-version = [ feature.get-values <gmp-version-hidden> : $(properties) ] ;
    result = $(result)/<gmp-version>$(gmp-version) ;
    result = $(result)/<gmp-version-hidden>unspecified ;
    local mpfr-version = [ feature.get-values <mpfr-version-hidden> : $(properties) ] ;
    result = $(result)/<mpfr-version>$(mpfr-version) ;
    result = $(result)/<mpfr-version-hidden>unspecified ;
    local mpc-version = [ feature.get-values <mpc-version-hidden> : $(properties) ] ;
    result = $(result)/<mpc-version>$(mpc-version) ;
    result = $(result)/<mpc-version-hidden>unspecified ;
    # `<gcc-version>' is automatically propagated.
    # `<gcc-default>yes' is automatically propagated. ;
  }
  return $(result) ;
}
alias gcc-dep : : <conditional>@gcc-dep-req ;
explicit gcc-dep ;


make download : : @download-binutils ;
explicit download ;

rule download-binutils ( targets * : sources * : properties * )
{
  local version = [ feature.get-values <binutils-version> : $(properties) ] ;
  URL on $(targets) = http://core.ring.gr.jp/pub/GNU/binutils/binutils-$(version).tar.bz2 ;
  TARBALL_GZ on $(targets) = $(INTRO_ROOT_DIR)/binutils-$(version).tar.gz ;
  TARBALL_BZ2 on $(targets) = $(INTRO_ROOT_DIR)/binutils-$(version).tar.bz2 ;
}
actions download-binutils
{
  rm -f "$(<)" || exit $?
  if [ ! -f "$(TARBALL_GZ)" -a ! -f "$(TARBALL_BZ2)" ]; then
    ( cd "$(TARBALL_BZ2:D)" && wget --quiet -- '$(URL)' ) \
      || { echo "ERROR: failed to download the Binutils tarball." 2>>"$(STDOUT_)" 1>&2; exit 1; }
    [ -f "$(TARBALL_BZ2)" ] || exit 1
  fi
  [ -e "$(<)" ] && exit 1
  touch "$(<)"
}


make expand : download : @expand-binutils ;
explicit expand ;

rule expand-binutils ( targets * : sources * : properties * )
{
  if ! $(sources[1]) {
    errors.error "ERROR: wrong number of sources." ;
  }
  if $(sources[2]) {
    errors.error "ERROR: wrong number of sources." ;
  }
  local version = [ feature.get-values <binutils-version> : $(properties) ] ;
  TARBALL_GZ on $(targets) = $(INTRO_ROOT_DIR)/binutils-$(version).tar.gz ;
  TARBALL_BZ2 on $(targets) =  $(INTRO_ROOT_DIR)/binutils-$(version).tar.bz2 ;
  DEST_DIR on $(targets) = $(INTRO_ROOT_DIR)/binutils-$(version) ;
}
actions expand-binutils
{
  rm -f "$(<)" || exit $?
  [ -f "$(>[1])" ] || exit 1
  if [ ! -x "$(DEST_DIR)/configure" ]; then
    rm -rf "$(DEST_DIR)" || exit $?
    if [ -f "$(TARBALL_GZ)" ]; then
      tar xzf "$(TARBALL_GZ)" -C "$(TARBALL_GZ:D)" \
        || { echo "ERROR: failed to expand the tarball for the Binutils build." 2>>"$(STDERR_)" 1>&2; exit 1; }
    elif [ -f "$(TARBALL_BZ2)" ]; then
      tar xjf "$(TARBALL_BZ2)" -C "$(TARBALL_BZ2:D)" \
        || { echo "ERROR: failed to expand the tarball for the Binutils build." 2>>"$(STDERR_)" 1>&2; exit 1; }
    else
      exit 1
    fi
    [ -x "$(DEST_DIR)/configure" ] || exit 1
  fi
  [ -e "$(<)" ] && exit 1
  touch "$(<)"
}


make make
  : gcc-dep
    ../../stage1/binutils//expand/<intro-host>unspecified/<intro-multilib>unspecified/<gcc-version>unspecified
  : @make-binutils
  ;
explicit make ;

rule make-binutils ( targets * : sources * : properties * )
{
  OPTIONS on $(targets) = ;

  local version = [ feature.get-values <binutils-version> : $(properties) ] ;

  # Set the path to the 'configure' file.
  local configure = $(INTRO_ROOT_DIR)/binutils-$(version)/configure ;
  CONFIGURE on $(targets) = $(configure) ;

  # Set the '--build', '--host' and '--target' options for the 'configure' script.
  local stage = [ feature.get-values <intro-stage> : $(properties) ] ;
  local build = [ SHELL "\"$(INTRO_ROOT_DIR)/stage1/binutils/config.guess\" | tr --delete '\n'" ] ;
  if $(stage) = 1 {
    errors.error "ERROR: an internal error." ;
  }
  else if $(stage) = 2 {
    OPTIONS on $(targets) += --build=$(build) ;
    OPTIONS on $(targets) += --host=$(build) ;
    OPTIONS on $(targets) += --target=$(HOST) ;
  }
  else {
    # For stage 3.
    OPTIONS on $(targets) += --build=$(build) ;
    OPTIONS on $(targets) += --host=$(HOST) ;
    OPTIONS on $(targets) += --target=$(HOST) ;
  }

  # Set the '--prefix' option for the 'configure' script.
  if $(stage) = 1 {
    errors.error "ERROR:an iinternal error." ;
  }
  else if $(stage) = 2 {
    OPTIONS on $(targets) += --prefix=\"$(PREFIX)\" ;
  }
  else {
    # For stage 3.
    OPTIONS on $(targets) += --prefix=\"$(CROSS_PREFIX)\" ;
  }

  if $(stage) = 2 {
    OPTIONS on $(targets) += --program-prefix=$(HOST)- ;
  }

  local multilib = [ feature.get-values <intro-multilib> : $(properties) ] ;
  if $(multilib) = yes {
    if $(stage) = 1 {
      errors.error "ERROR: an internal error." ;
    }
    else {
      # For stage 2 or 3.
      local tmp = [ regex.match "^x86_64-(.+)" : $(HOST) : 1 ] ;
      if $(tmp) {
        OPTIONS on $(targets) += --enable-targets=x86_64-$(tmp),i686-$(tmp) ;
      }
      else {
        errors.error "ERROR: `multilib' is not supported on `$(HOST)'." ;
      }
    }
  }

  if $(stage) = 1 {
    errors.error "ERROR: an internal error." ;
  }
  else if $(stage) = 2 {
    OPTIONS on $(targets) += --with-sysroot=\"$(PREFIX)\" ;
  }
  else {
    # For stage 3.
    OPTIONS on $(targets) += --with-sysroot=\"$(CROSS_PREFIX)\" ;
  }

  SET_RUN_VARS on $(targets) = ;
  UNSET_RUN_VARS on $(targets) = ;
  if $(stage) = 1 {
    errors.error "ERROR: an internal error." ;
  }
  else if $(stage) = 2 {
    # Do nothing.
  }
  else {
    if [ regex.match "(-w64-mingw32)$" : $(build) : 1 ] {
      SET_RUN_VARS on $(targets) = "OLD_PATH=$PATH; PATH=\"$(PREFIX)/bin\":$PATH; export PATH" ;
      UNSET_RUN_VARS on $(targets) = "PATH=$OLD_PATH; export PATH" ;
    }
    else {
      SET_RUN_VARS on $(targets) = "OLD_PATH=$PATH; OLD_LD_LIBRARY_PATH=$LD_LIBRARY_PATH; PATH=\"$(PREFIX)/bin\":$PATH; LD_LIBRARY_PATH=\"$(PREFIX)/lib\":$LD_LIBRARY_PATH; export PATH; export LD_LIBRARY_PATH" ;
      UNSET_RUN_VARS on $(targets) = "PATH=$OLD_PATH; LD_LIBRARY_PATH=$OLD_LD_LIBRARY_PATH; export PATH; export LD_LIBRARY_PATH" ;
    }
  }

  CHECK on $(targets) = no ;
  if $(stage) = 2 || $(HOST_RUNNABLE) = yes {
    CHECK on $(targets) = yes ;
  }
}
actions make-binutils
{
  rm -f "$(<)" || exit $?
  [ -x "$(CONFIGURE)" ] || exit 1
  { mkdir -p "$(<:D)/build" && ( cd "$(<:D)/build" && rm -rf * ); } || exit $?
  $(SET_RUN_VARS)
  ( cd "$(<:D)/build" && "$(CONFIGURE)" $(OPTIONS) 1>>"$(STDOUT_)" 2>>"$(STDERR_)" )
  if [ $? -ne 0 ]; then
    $(UNSET_RUN_VARS)
    echo "ERROR: failed to 'configure' for the Binutils build." 2>>"$(STDERR_)" 1>&2
    exit 1
  fi
  [ -f "$(<:D)/build/Makefile" ] || { $(UNSET_RUN_VARS); exit 1; }
  ( cd "$(<:D)/build" && make --jobs=$(CONCURRENCY) 1>>"$(STDOUT_)" 2>>"$(STDERR_)" )
  if [ $? -ne 0 ]; then
    $(UNSET_RUN_VARS)
    echo "ERROR: failed to 'make' for the Binutils build." 2>>"$(STDERR_)" 1>&2
    exit 1
  fi
  if [ $(CHECK) = yes ]; then
    ( cd "$(<:D)/build" && make --jobs=$(CONCURRENCY) check 1>>"$(STDOUT_)" 2>>"$(STDERR_)" )
    if [ $? -ne 0 ]; then
      $(UNSET_RUN_VARS)
      echo "ERROR: failed to 'make check' for the Binutils build." 2>>"$(STDERR_)" 1>&2
      exit 1
    fi
  fi
  ( cd "$(<:D)/build" && make --jobs=$(CONCURRENCY) install 1>>"$(STDOUT_)" 2>>"$(STDERR_)" )
  if [ $? -ne 0 ]; then
    $(UNSET_RUN_VARS)
    echo "ERROR: failed to 'make install' for the Bintuils build." 2>>"$(STDERR_)" 1>&2
    exit 1
  fi
  $(UNSET_RUN_VARS)
  [ -e "$(<)" ] && exit 1
  touch "$(<)"
}


rule install-req ( properties * )
{
  local result = <source>make ;

  local tmp ;

  local stage = [ feature.get-values <intro-stage> : $(properties) ] ;
  if $(stage) = 1 {
    errors.error "ERROR: `<intro-stage>1' is not valid for the Binutils build." ;
  }

  local build = [ SHELL "\"$(INTRO_ROOT_DIR)/stage1/binutils/config.guess\" | tr --delete '\n'" ] ;

  local host = [ feature.get-values <intro-host> : $(properties) ] ;
  if $(host) = unspecified {
    errors.error "ERROR: `<intro-host>' is not specified for the Binutils build." ;
  }
  if $(host) != unspecified {
    tmp = [ SHELL "\"$(INTRO_ROOT_DIR)/stage1/binutils/config.sub\" $(host) | tr --delete '\n'" ] ;
    if $(tmp) != $(host) {
      errors.error "ERROR: `<intro-host>$(host)' is not canonical for the Binutils build." ;
    }
  }

  local link = [ feature.get-values <intro-link> : $(properties) ] ;
  if $(link) != unspecified {
    errors.error "ERROR: `<intro-link>$(link)' is not valid for the Binutils build." ;
  }

  local multilib = [ feature.get-values <intro-multilib> : $(properties) ] ;
  if $(multilib) = unspecified {
    errors.error "ERROR: `<intro-multilib>' is not specified for the Binutils build." ;
  }
  if $(multilib) = yes {
    if [ regex.match "^(x86_64-)" : $(HOST) : 1 ] {
      # Do nothing.
    }
    else {
      errors.error "ERROR: `multilib' is not supported on `$(HOST)'." ;
    }
  }
  multilib = [ feature.get-values <intro-multilib-hidden> : $(properties) ] ;
  if $(multilib) != unspecified {
    errors.error "ERROR: `<intro-multilib-hidden>$(multilib)' is not valid for the Binutils build." ;
  }

  local binutils-version = [ feature.get-values <binutils-version> : $(properties) ] ;
  if $(binutils-version) = unspecified {
    errors.error "ERROR: `<binutils-version>' is not specified for the Binutils build" ;
  }
  binutils-version = [ feature.get-values <binutils-version-hidden> : $(properties) ] ;
  if $(binutils-version) != unspecified {
    errors.error "ERROR: `<binutils-version-hidden>$(binutils-version)' is not valid for the Binutils build." ;
  }

  local gmp-version = [ feature.get-values <gmp-version> : $(properties) ] ;
  if $(gmp-version) != unspecified {
    errors.error "ERROR: `<gmp-version>$(gmp-version)' is not valid for the Binutils build." ;
  }
  gmp-version = [ feature.get-values <gmp-version-hidden> : $(properties) ] ;
  if $(stage) = 2 && $(gmp-version) != unspecified {
    errors.error "ERROR: `<gmp-version-hidden>$(gmp-version)' is not valid for the Binutils stage 2 build." ;
  }
  if $(stage) = 3 && $(gmp-version) = unspecified {
    errors.error "ERROR: `<gmp-version-hidden>' is not specified for the Binutils stage 3 build." ;
  }

  local mpfr-version = [ feature.get-values <mpfr-version> : $(properties) ] ;
  if $(mpfr-version) != unspecified {
    errors.error "ERROR: `<mpfr-version>$(mpfr-version)' is not valid for the Binutils build." ;
  }
  mpfr-version = [ feature.get-values <mpfr-version-hidden> : $(properties) ] ;
  if $(stage) = 2 && $(mpfr-version) != unspecified {
    errors.error "ERROR: `<mpfr-version-hidden>$(mpfr-version)' is not valid for the Binutils stage 2 build." ;
  }
  if $(stage) = 3 && $(mpfr-version) = unspecified {
    errors.error "ERROR: `<mpfr-version-hidden>' is not specified for the Binutils stage 3 build." ;
  }

  local mpc-version = [ feature.get-values <mpc-version> : $(properties) ] ;
  if $(mpc-version) != unspecified {
    errors.error "ERROR: `<mpc-version>$(mpc-version)' is not valid for the Binutils build." ;
  }
  mpc-version = [ feature.get-values <mpc-version-hidden> : $(properties) ] ;
  if $(stage) = 2 && $(mpc-version) != unspecified {
    errors.error "ERROR: `<mpc-version-hidden>$(mpc-version)' is not valid for the Binutils stage 2 build." ;
  }
  if $(stage) = 3 && $(mpc-version) = unspecified {
    errors.error "ERROR: `<mpc-version-hidden>' is not specified for the Binutils stage 3 build." ;
  }

  local gcc-version = [ feature.get-values <gcc-version> : $(properties) ] ;
  if $(stage) = 2 && $(gcc-version) != unspecified {
    errors.error "ERROR: `<gcc-version>$(gcc-version)' is not valid for the Binutils stage 2 build." ;
  }
  if $(stage) = 3 && $(gcc-version) = unspecified {
    errors.error "ERROR: `<gcc-version>' is not specified for the Binutils stage 3 build." ;
  }

  local gcc-default = [ feature.get-values <gcc-default> : $(properties) ] ;
  if $(stage) = 2 && $(gcc-default) != unspecified {
    errors.error "ERROR: `<gcc-default>$(gcc-default)' is not valid for the Binutils stage 2 build." ;
  }
  if $(stage) = 3 && $(gcc-default) != yes {
    errors.error "ERROR: `<gcc-default>no' is not valid for the Binutils stage 3 build." ;
  }

  return $(result) ;
}

alias install : : <conditional>@install-req ;
explicit install ;

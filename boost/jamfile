project intro/boost ;

import alias ;
import errors ;
import feature ;
import make ;
import path ;
import regex ;
import "$(INTRO_ROOT_DIR)/compilers"
  : is-gcc
    is-clang
    is-icc
    get-compiler-description
    get-compiler-prefix
    get-libdir
    get-includedir
    get-environment-commands
    get-property-dump-commands
  ;


rule compiler-dep-req ( properties * )
{
  local compiler = [ feature.get-values <compiler-hidden> : $(properties) ] ;
  local results ;
  if [ is-gcc "$(compiler)" ] {
    results += "<source>../gcc//install" ;
  }
  else if [ is-clang "$(compiler)" ] {
    results += "<source>../gcc//install" ;
    results += "<source>../clang//install" ;
  }
  else if [ is-icc "$(compiler)" ] {
    results += "<source>../gcc//install" ;
    results += "<source>../icc//install" ;
  }
  else {
    errors.error "an internal error." ;
  }
  return $(results) ;
}

alias compiler-dep : : <conditional>@compiler-dep-req ;
explicit compiler-dep ;



rule openmpi-conditional ( properties * )
{
  local mpi-backend = [ feature.get-values <mpi-backend> : $(properties) ] ;
  local results ;
  if "$(mpi-backend)" = "openmpi" {
    local openmpi = [ feature.get-values <openmpi-hidden> : $(properties) ] ;
    if "$(openmpi)" = "unspecified"
    {
      errors.error "an internal error." ;
    }
    results += "<source>../openmpi//install" ;
  }
  return $(results) ;
}

alias openmpi-dep : : <conditional>@openmpi-conditional ;
explicit openmpi-dep ;



rule location-conditional ( properties * )
{
  local includedir = [ get-includedir "$(PREFIX)" : $(properties) ] ;
  local version = [ feature.get-values <boost-hidden> : $(properties) ] ;
  version = [ regex.match "([0-9]+\\.[0-9]+)\\.[0-9]+" : "$(version)" : 1 ] ;
  if ! "$(version)" {
    errors.error "an internal error." ;
  }
  version = [ regex.replace "$(version)" "\\." "_" ] ;
  return "<location>$(includedir)/boost-$(version)/boost" ;
}

make version.hpp
  : compiler-dep
    ../icu4c//install
    openmpi-dep
  : @install
  : $(USE_COMPILER)
    $(USE_MULTITARGET)
    $(USE_ICU4C)
    $(USE_MPI_BACKEND)
    $(USE_OPENMPI)
    $(USE_BOOST)
    $(USE_ADDRESS_MODEL)
    $(USE_INSTRUCTION_SET)
    <conditional>@location-conditional
  ;
explicit version.hpp ;

rule install ( targets * : sources * : properties * )
{
  local compiler = [ feature.get-values <compiler> : $(properties) ] ;
  local compiler-description = [ get-compiler-description "$(compiler)" ] ;
  COMPILER_DESCRIPTION on $(targets) = "$(compiler-description)" ;

  # Set 'BOOST_ROOT'.
  local version = [ feature.get-values <boost> : $(properties) ] ;
  VERSION on $(targets) = "$(version)" ;
  local boost-root = "$(PREFIX)/boost/$(version)" ;
  BOOST_ROOT on $(targets) = [ path.native "$(boost-root)" ] ;

  local compiler-prefix = [ get-compiler-prefix "$(PREFIX)" : $(properties) ] ;

  OPTIONS on $(targets) = ;

  #OPTIONS on $(targets) += -sICU_PATH=\"$(compiler-prefix)\" ;

  OPTIONS on $(targets) += "--prefix='$(compiler-prefix)'" ;

  local libdir = [ get-libdir "$(PREFIX)" : $(properties) ] ;
  local libdir-native = [ path.native "$(libdir)" ] ;
  OPTIONS on $(targets) += "--libdir='$(libdir-native)'" ;

  local includedir = [ get-includedir "$(PREFIX)" : $(properties) ] ;
  local includedir-native = [ path.native "$(includedir)" ] ;
  OPTIONS on $(targets) += "--includedir='$(includedir-native)'" ;

  OPTIONS on $(targets) += --build-type=complete ;
  OPTIONS on $(targets) += --layout=versioned ;
  OPTIONS on $(targets) += --without-locale ;
  OPTIONS on $(targets) += --without-mpi ;

  if [ is-gcc "$(compiler)" ] {
    OPTIONS on $(targets) += "toolset=`'$(INTRO_ROOT_DIR)/boost/toolset.sh' '$(compiler-prefix)/bin/g++-wrapper'`" ;
  }
  else if [ is-clang "$(compiler)" ] {
    OPTIONS on $(targets) += "toolset=`'$(INTRO_ROOT_DIR)/boost/toolset.sh' '$(compiler-prefix)/bin/clang++-wrapper'`" ;
  }
  else {
    errors.error "an internal error." ;
  }

  local variant = [ feature.get-values <variant> : $(properties) ] ;
  OPTIONS on $(targets) += "variant=$(variant)" ;

  OPTIONS on $(targets) += "runtime-link=shared" ;

  local threading = [ feature.get-values <threading> : $(properties) ] ;
  OPTIONS on $(targets) += "threading=$(threading)" ;

  local std = [ feature.get-values <std> : $(properties) ] ;
  OPTIONS on $(targets) += "std=$(std)" ;

  local instruction-set = [ feature.get-values <intro-instruction-set> : $(properties) ] ;
  if "$(instruction-set)" != "unspecified" {
    OPTIONS on $(targets) += "instruction-set=$(instruction-set)" ;
  }

  local lto = [ feature.get-values <lto> : $(properties) ] ;
  OPTIONS on $(targets) += "lto=$(lto)" ;
  if "$(lto)" = "on" {
    errors.error "TODO: unimplemented. `linkflags=...'" ;
  }

  local memory-checker = [ feature.get-values <memory-checker> : $(properties) ] ;
  OPTIONS on $(targets) += "memory-checker=$(memory-checker)" ;
  if "$(memory-checker)" = "on" {
    errors.error "TODO: unimplemented. `cflags=... linkflags=...'" ;
  }

  local libstdcxx-debug-mode = [ feature.get-values <libstdc++-debug-mode> : $(properties) ] ;
  OPTIONS on $(targets) += "libstdc++-debug-mode=$(libstdcxx-debug-mode)" ;

  # The following options are necessary for Boost.Regex to guess ICU4C location.
  OPTIONS on $(targets) += "include='$(includedir-native)'" ;
  OPTIONS on $(targets) += "library-path='$(libdir-native)'" ;

  OPTIONS on $(targets) += "dll-path='$(libdir-native)'" ;

  OPTIONS on $(targets) += "install" ;

  # FIXME: Are `CPATH' and `LIBRARY_PATH' necessary despite explicitly specified `include' and `library-path'?
  local environment-commands = [ get-environment-commands "$(PREFIX)" : $(properties) ] ;
  ENVIRONMENT_COMMANDS on $(targets) = "$(environment-commands)" ;

  PROPERTY_DUMP_COMMANDS on $(targets) = [ get-property-dump-commands $(properties) ] ;
}
actions install
{
  $(PROPERTY_DUMP_COMMANDS)

  if [ ! -x '$(BOOST_ROOT)/b2' ]; then
    echo    "ERROR: Boost $(VERSION) not found ($(COMPILER_DESCRIPTION))." 1>&2
    echo -n "ERROR: Boost $(VERSION) not found ($(COMPILER_DESCRIPTION))." | $(AWACS)
    exit 1
  fi

  $(ENVIRONMENT_COMMANDS)

  if [ -n '$(STREAM)' ]; then
    ( cd "$(BOOST_ROOT)" && ./b2 -d+2 -j$(CONCURRENCY) $(OPTIONS) >> '$(STREAM)' 2>&1 )
  else
    ( cd "$(BOOST_ROOT)" && ./b2 -d+2 -j$(CONCURRENCY) $(OPTIONS) )
  fi
  if [ $? -ne 0 ]; then
    echo    "ERROR: failed to build Boost $(VERSION) ($(COMPILER_DESCRIPTION))." 1>&2
    echo -n "ERROR: failed to build Boost $(VERSION) ($(COMPILER_DESCRIPTION))." | $(AWACS)
    exit 1
  fi

  [ -f '$(<)' ] || exit 1

  echo -n "Boost $(VERSION) ($(COMPILER_DESCRIPTION)) was successfully built." | $(AWACS)
  exit 0
}



alias install : version.hpp ;
explicit install ;

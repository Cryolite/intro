project intro/boost ;

import alias ;
import errors ;
import feature ;
import make ;
import regex ;
import "$(INTRO_ROOT_DIR)/compilers" ;


rule assert-specified ( feature : properties * )
{
  local val = [ feature.get-values $(feature) : $(properties) ] ;
  if $(val) = unspecified {
    errors.error $(feature) is not specified for the Boost build. ;
  }
}

rule assert-unspecified ( feature : properties * )
{
  local val = [ feature.get-values $(feature) : $(properties) ] ;
  if $(val) != unspecified {
    errors.error $(feature) is not valid for the Boost build. ;
  }
}


rule compiler-dep-req ( properties * )
{
  assert-specified   <triplet>         : $(properties) ;
  assert-unspecified <multilib>        : $(properties) ;
  assert-specified   <multilib-hidden> : $(properties) ;
  assert-unspecified <binutils>        : $(properties) ;
  assert-unspecified <binutils-hidden> : $(properties) ;
  assert-unspecified <gmp>             : $(properties) ;
  assert-unspecified <gmp-hidden>      : $(properties) ;
  assert-unspecified <mpfr>            : $(properties) ;
  assert-unspecified <mpfr-hidden>     : $(properties) ;
  assert-unspecified <mpc>             : $(properties) ;
  assert-unspecified <mpc-hidden>      : $(properties) ;
  assert-unspecified <ppl>             : $(properties) ;
  assert-unspecified <ppl-hidden>      : $(properties) ;
  assert-unspecified <cloog>           : $(properties) ;
  assert-unspecified <cloog-hidden>    : $(properties) ;
  assert-specified   <compiler>        : $(properties) ;
  assert-unspecified <compiler-hidden> : $(properties) ;
  assert-unspecified <icu4c>           : $(properties) ;
  assert-unspecified <icu4c-hidden>    : $(properties) ;
  assert-unspecified <mpi>             : $(properties) ;
  assert-unspecified <mpi-hidden>      : $(properties) ;
  assert-unspecified <openmpi>         : $(properties) ;
  assert-unspecified <openmpi-hidden>  : $(properties) ;
  assert-unspecified <boost>           : $(properties) ;
  assert-unspecified <boost-hidden>    : $(properties) ;
  assert-unspecified <valgrind>        : $(properties) ;
  assert-unspecified <valgrind-hidden> : $(properties) ;

  local multilib = [ feature.get-values <multilib-hidden> : $(properties) ] ;
  local compiler = [ feature.get-values <compiler> : $(properties) ] ;
  if [ "$(INTRO_ROOT_DIR)/compilers.is-gcc" $(compiler) ]
  {
    result = <source>../gcc//install/<multilib>$(multilib)/<multilib-hidden>unspecified ;
  }
  else if [ "$(INTRO_ROOT_DIR)/compilers.is-clang" $(compiler) ]
  {
    result = <source>../clang//install ;
  }
  else
  {
    errors.error "an internal error." ;
  }
  return $(result) ;
}

alias compiler-dep : : <conditional>@compiler-dep-req ;
explicit compiler-dep ;


for local compiler in $(COMPILERS)
{
  for local boost in $(BOOST_VERSIONS)
  {
    local prefix-leaf = [ "$(INTRO_ROOT_DIR)/compilers.get-prefix-leaf" $(compiler) : $(GCC_FOR_CLANG) ] ;
    local compiler-prefix = "$(PREFIX)/$(prefix-leaf)" ;
    local compiler-abi-tag = [ "$(INTRO_ROOT_DIR)/compilers.get-abi-tag" $(compiler) : $(GCC_FOR_CLANG) ] ;
    local boost-abi-version = [ regex.match "^([0-9]+\\.[0-9]+)\\.[0-9]+$" : $(boost) : 1 ] ;
    if ! $(boost-abi-version)
    {
      errors.error "an internal error." ;
    }
    local boost-abi-tag = [ regex.replace $(boost-abi-version) "\\." "_" ] ;
    if $(OPENMPI)
    {
      make "$(compiler-prefix)/lib/libboost_regex-$(compiler-abi-tag)-$(boost-abi-tag).so.$(boost)"
        : compiler-dep/<icu4c>unspecified/<mpi>unspecified/<openmpi>unspecified/<boost>unspecified
          ../icu4c//install/<mpi>unspecified/<openmpi>unspecified/<boost>unspecified
          ../openmpi//install/<icu4c>unspecified/<boost>unspecified
        : @install
        ;
    }
    else
    {
      make "$(compiler-prefix)/lib/libboost_regex-$(compiler-abi-tag)-$(boost-abi-tag).so.$(boost)"
        : compiler-dep/<icu4c>unspecified/<mpi>unspecified/<openmpi>unspecified/<boost>unspecified
          ../icu4c//install/<mpi>unspecified/<openmpi>unspecified/<boost>unspecified
        : @install
        ;
    }
    explicit "$(compiler-prefix)/lib/libboost_regex-$(compiler-abi-tag)-$(boost-abi-tag).so.$(boost)" ;
  }
}

rule install ( targets * : sources * : properties * )
{
  assert-specified   <triplet>         : $(properties) ;
  assert-unspecified <multilib>        : $(properties) ;
  assert-specified   <multilib-hidden> : $(properties) ;
  assert-unspecified <binutils>        : $(properties) ;
  assert-unspecified <binutils-hidden> : $(properties) ;
  assert-unspecified <gmp>             : $(properties) ;
  assert-unspecified <gmp-hidden>      : $(properties) ;
  assert-unspecified <mpfr>            : $(properties) ;
  assert-unspecified <mpfr-hidden>     : $(properties) ;
  assert-unspecified <mpc>             : $(properties) ;
  assert-unspecified <mpc-hidden>      : $(properties) ;
  assert-unspecified <ppl>             : $(properties) ;
  assert-unspecified <ppl-hidden>      : $(properties) ;
  assert-unspecified <cloog>           : $(properties) ;
  assert-unspecified <cloog-hidden>    : $(properties) ;
  assert-specified   <compiler>        : $(properties) ;
  assert-unspecified <compiler-hidden> : $(properties) ;
  assert-specified   <icu4c>           : $(properties) ;
  assert-unspecified <icu4c-hidden>    : $(properties) ;
  assert-specified   <mpi>             : $(properties) ;
  assert-unspecified <mpi-hidden>      : $(properties) ;
  #assert-specified   <openmpi>         : $(properties) ;
  assert-unspecified <openmpi-hidden>  : $(properties) ;
  assert-specified   <boost>           : $(properties) ;
  assert-unspecified <boost-hidden>    : $(properties) ;
  assert-unspecified <valgrind>        : $(properties) ;
  assert-unspecified <valgrind-hidden> : $(properties) ;

  local triplet = [ feature.get-values <triplet> : $(properties) ] ;
  TRIPLET on $(targets) = $(triplet) ;

  local compiler = [ feature.get-values <compiler> : $(properties) ] ;
  local compiler-description = [ "$(INTRO_ROOT_DIR)/compilers.get-compiler-description" $(compiler) ] ;
  COMPILER_DESCRIPTION on $(targets) = "$(compiler-description)" ;

  IS_GCC on $(targets) = 0 ;
  if [ "$(INTRO_ROOT_DIR)/compilers.is-gcc" $(compiler) ]
  {
    IS_GCC on $(targets) = 1 ;
  }

  IS_CLANG on $(targets) = 0 ;
  if [ "$(INTRO_ROOT_DIR)/compilers.is-clang" $(compiler) ]
  {
    IS_CLANG on $(targets) = 1 ;
  }

  # Set 'BOOST_ROOT'.
  local version = [ feature.get-values <boost> : $(properties) ] ;
  VERSION on $(targets) = $(version) ;
  local boost-root = $(PREFIX)/boost/$(version) ;
  BOOST_ROOT on $(targets) = $(boost-root) ;

  local prefix-leaf = [ "$(INTRO_ROOT_DIR)/compilers.get-prefix-leaf" $(compiler) : $(GCC_FOR_CLANG) ] ;
  local compiler-prefix = "$(PREFIX)/$(prefix-leaf)" ;

  OPTIONS on $(targets) = ;

  OPTIONS on $(targets) += -sICU_PATH=\"$(compiler-prefix)\" ;

  OPTIONS on $(targets) += "--stagedir=\"$(compiler-prefix)\"" ;
  OPTIONS on $(targets) += --build-type=complete ;
  OPTIONS on $(targets) += --layout=versioned ;
  OPTIONS on $(targets) += --without-locale ;
  OPTIONS on $(targets) += --without-mpi ;

  if [ "$(INTRO_ROOT_DIR)/compilers.is-gcc" $(compiler) ]
  {
    OPTIONS on $(targets) += "toolset=`\"$(INTRO_ROOT_DIR)/boost/toolset.sh\" \"$(compiler-prefix)/bin/g++-wrapper\"`" ;
  }
  else if [ "$(INTRO_ROOT_DIR)/compilers.is-clang" $(compiler) ]
  {
    OPTIONS on $(targets) += "toolset=`\"$(INTRO_ROOT_DIR)/boost/toolset.sh\" \"$(compiler-prefix)/bin/clang++-wrapper\"`" ;
  }
  else
  {
    errors.error "an internal error." ;
  }

  OPTIONS on $(targets) += stage ;

  CLEANUP_COMMAND on $(targets) = "rm -rf \"$(boost-root)/bin.v2/libs/*/build/`\"$(INTRO_ROOT_DIR)/boost/toolset.sh\" \"$(compiler-prefix)/bin/g++-wrapper\"`\"" ;
}
actions install
{
  if [ ! -x "$(BOOST_ROOT)/b2" ]; then
    echo "ERROR: Boost $(VERSION) not found ($(COMPILER_DESCRIPTION), $(TRIPLET))." 1>&2
    echo -n "ERROR: Boost $(VERSION) not found ($(COMPILER_DESCRIPTION), $(TRIPLET))." | $(AWACS)
    exit 1
  fi

  '$(INTRO_ROOT_DIR)/boost/install.sh' $(TRIPLET) '$(COMPILER_DESCRIPTION)' $(IS_GCC) $(IS_CLANG) $(VERSION) $(CONCURRENCY) '$(AWACS)' '$(STREAM)' '$(BOOST_ROOT)' $(OPTIONS)
  if [ $? -ne 0 ]; then
    touch --no-create --date='2000/1/1' "$(<)"
    exit 1
  fi

  [ -x "$(<)" ] || exit 1

  # Clean up the build directory.
  $(CLEANUP_COMMAND)

  echo -n "Boost $(VERSION) ($(COMPILER_DESCRIPTION), $(TRIPLET)) was successfully built." | $(AWACS)
  exit 0
}


rule install-req ( properties * )
{
  assert-specified   <triplet>         : $(properties) ;
  assert-unspecified <multilib>        : $(properties) ;
  assert-specified   <multilib-hidden> : $(properties) ;
  assert-unspecified <binutils>        : $(properties) ;
  assert-unspecified <binutils-hidden> : $(properties) ;
  assert-unspecified <gmp>             : $(properties) ;
  assert-unspecified <gmp-hidden>      : $(properties) ;
  assert-unspecified <mpfr>            : $(properties) ;
  assert-unspecified <mpfr-hidden>     : $(properties) ;
  assert-unspecified <mpc>             : $(properties) ;
  assert-unspecified <mpc-hidden>      : $(properties) ;
  assert-unspecified <ppl>             : $(properties) ;
  assert-unspecified <ppl-hidden>      : $(properties) ;
  assert-unspecified <cloog>           : $(properties) ;
  assert-unspecified <cloog-hidden>    : $(properties) ;
  assert-specified   <compiler>        : $(properties) ;
  assert-unspecified <compiler-hidden> : $(properties) ;
  assert-specified   <icu4c>           : $(properties) ;
  assert-unspecified <icu4c-hidden>    : $(properties) ;
  assert-specified   <mpi>             : $(properties) ;
  assert-unspecified <mpi-hidden>      : $(properties) ;
  #assert-specified   <openmpi>         : $(properties) ;
  assert-unspecified <openmpi-hidden>  : $(properties) ;
  assert-specified   <boost>           : $(properties) ;
  assert-unspecified <boost-hidden>    : $(properties) ;
  assert-unspecified <valgrind>        : $(properties) ;
  assert-unspecified <valgrind-hidden> : $(properties) ;

  local version = [ feature.get-values <boost> : $(properties) ] ;
  local compiler = [ feature.get-values <compiler> : $(properties) ] ;
  local prefix-leaf = [ "$(INTRO_ROOT_DIR)/compilers.get-prefix-leaf" $(compiler) : $(GCC_FOR_CLANG) ] ;
  local compiler-prefix = "$(PREFIX)/$(prefix-leaf)" ;
  local compiler-abi-tag = [ "$(INTRO_ROOT_DIR)/compilers.get-abi-tag" $(compiler) : $(GCC_FOR_CLANG) ] ;
  local boost-abi-version = [ regex.match "^([0-9]+\\.[0-9]+)\\.[0-9]+$" : $(version) : 1 ] ;
  if ! $(boost-abi-version)
  {
    errors.error "an internal error." ;
  }
  local boost-abi-tag = [ regex.replace $(boost-abi-version) "\\." "_" ] ;
  return <source>"$(compiler-prefix)/lib/libboost_regex-$(compiler-abi-tag)-$(boost-abi-tag).so.$(version)" ;
}

alias install : : <conditional>@install-req ;
explicit install ;

project intro/boost ;

import alias ;
import errors ;
import feature ;
import make ;
import regex ;


rule assert-specified ( feature : properties * )
{
  local val = [ feature.get-values $(feature) : $(properties) ] ;
  if $(val) = unspecified {
    errors.error $(feature) is not specified for the Boost build. ;
  }
}

rule assert-unspecified ( feature : properties * )
{
  local val = [ feature.get-values $(feature) : $(properties) ] ;
  if $(val) != unspecified {
    errors.error $(feature) is not valid for the Boost build. ;
  }
}


rule gcc-dep-req ( properties * )
{
  assert-specified   <triplet>         : $(properties) ;
  assert-unspecified <multilib>        : $(properties) ;
  assert-specified   <multilib-hidden> : $(properties) ;
  assert-unspecified <binutils>        : $(properties) ;
  assert-unspecified <binutils-hidden> : $(properties) ;
  assert-unspecified <gmp>             : $(properties) ;
  assert-unspecified <gmp-hidden>      : $(properties) ;
  assert-unspecified <mpfr>            : $(properties) ;
  assert-unspecified <mpfr-hidden>     : $(properties) ;
  assert-unspecified <mpc>             : $(properties) ;
  assert-unspecified <mpc-hidden>      : $(properties) ;
  assert-unspecified <ppl>             : $(properties) ;
  assert-unspecified <ppl-hidden>      : $(properties) ;
  assert-unspecified <cloog>           : $(properties) ;
  assert-unspecified <cloog-hidden>    : $(properties) ;
  assert-specified   <gcc>             : $(properties) ;
  assert-unspecified <gcc-hidden>      : $(properties) ;
  assert-unspecified <icu4c>           : $(properties) ;
  assert-unspecified <icu4c-hidden>    : $(properties) ;
  assert-unspecified <mpi>             : $(properties) ;
  assert-unspecified <mpi-hidden>      : $(properties) ;
  assert-unspecified <openmpi>         : $(properties) ;
  assert-unspecified <openmpi-hidden>  : $(properties) ;
  assert-unspecified <boost>           : $(properties) ;
  assert-unspecified <boost-hidden>    : $(properties) ;
  local multilib = [ feature.get-values <multilib-hidden> : $(properties) ] ;
  return <source>../gcc//install/<multilib>$(multilib)/<multilib-hidden>unspecified ;
}

alias gcc-dep : : <conditional>@gcc-dep-req ;
explicit gcc-dep ;


make make
  : gcc-dep/<icu4c>unspecified/<mpi>unspecified/<openmpi>unspecified/<boost>unspecified
    ../icu4c//install/<mpi>unspecified/<openmpi>unspecified/<boost>unspecified
    ../openmpi//install/<icu4c>unspecified/<boost>unspecified
  : @make-boost
  ;
explicit make ;

rule make-boost ( targets * : sources * : properties * )
{
  assert-specified   <triplet>         : $(properties) ;
  assert-unspecified <multilib>        : $(properties) ;
  assert-specified   <multilib-hidden> : $(properties) ;
  assert-unspecified <binutils>        : $(properties) ;
  assert-unspecified <binutils-hidden> : $(properties) ;
  assert-unspecified <gmp>             : $(properties) ;
  assert-unspecified <gmp-hidden>      : $(properties) ;
  assert-unspecified <mpfr>            : $(properties) ;
  assert-unspecified <mpfr-hidden>     : $(properties) ;
  assert-unspecified <mpc>             : $(properties) ;
  assert-unspecified <mpc-hidden>      : $(properties) ;
  assert-unspecified <ppl>             : $(properties) ;
  assert-unspecified <ppl-hidden>      : $(properties) ;
  assert-unspecified <cloog>           : $(properties) ;
  assert-unspecified <cloog-hidden>    : $(properties) ;
  assert-specified   <gcc>             : $(properties) ;
  assert-unspecified <gcc-hidden>      : $(properties) ;
  assert-specified   <icu4c>           : $(properties) ;
  assert-unspecified <icu4c-hidden>    : $(properties) ;
  assert-specified   <mpi>             : $(properties) ;
  assert-unspecified <mpi-hidden>      : $(properties) ;
  #assert-specified   <openmpi>         : $(properties) ;
  assert-unspecified <openmpi-hidden>  : $(properties) ;
  assert-specified   <boost>           : $(properties) ;
  assert-unspecified <boost-hidden>    : $(properties) ;

  local triplet = [ feature.get-values <triplet> : $(properties) ] ;

  OPTIONS on $(targets) = ;

  # Set 'BOOST_ROOT'.
  local version = [ feature.get-values <boost> : $(properties) ] ;
  VERSION on $(targets) = $(version) ;
  local boost-root = $(PREFIX)/boost/$(version) ;
  BOOST_ROOT on $(targets) = $(boost-root) ;

  local gcc = [ feature.get-values <gcc> : $(properties) ] ;
  GCC on $(targets) = $(gcc) ;

  OPTIONS on $(targets) += -sICU_PATH=\"$(PREFIX)/gcc-$(gcc)\" ;

  OPTIONS on $(targets) += --stagedir=\"$(PREFIX)/gcc-$(gcc)\" ;
  OPTIONS on $(targets) += --build-type=complete ;
  OPTIONS on $(targets) += --layout=versioned ;
  OPTIONS on $(targets) += --without-mpi ;

  local toolset-version = [ regex.replace $(gcc) "-" "_" ] ;
  TOOLSET on $(targets) = gcc-$(toolset-version) ;

  OPTIONS on $(targets) += toolset=gcc-$(toolset-version) ;

  OPTIONS on $(targets) += stage ;
}
actions make-boost
{
  rm -f "$(<)" || exit $?
  if [ ! -x "$(BOOST_ROOT)/b2" ]; then
    echo "ERROR: Boost $(VERSION) not found (GCC $(GCC), $(TRIPLET))." 1>&2
    echo -n "ERROR: Boost $(VERSION) not found (GCC $(GCC), $(TRIPLET))." | $(AWACS)
    exit 1
  fi
  if [ -n "$(STREAM)" ]; then
    ( cd "$(BOOST_ROOT)" && ./b2 -d+2 -j$(CONCURRENCY) variant=debug cxxflags="-std=c++0x" $(OPTIONS) >> "$(STREAM)" 2>&1 )
    ( cd "$(BOOST_ROOT)" && ./b2 -d+2 -j$(CONCURRENCY) variant=release cflags=-flto cxxflags="-std=c++0x" linkflags="-O3 -flto" $(OPTIONS) >> "$(STREAM)" 2>&1 )
  else
    ( cd "$(BOOST_ROOT)" && ./b2 -d+2 -j$(CONCURRENCY) variant=debug cxxflags="-std=c++0x" $(OPTIONS) )
    ( cd "$(BOOST_ROOT)" && ./b2 -d+2 -j$(CONCURRENCY) variant=release cflags=-flto cxxflags="-std=c++0x" linkflags="-O3 -flto" $(OPTIONS) )
  fi
  if [ $? -ne 0 ]; then
    echo "ERROR: failed to build Boost $(VERSION) (GCC $(GCC), $(TRIPLET))." 1>&2
    echo -n "ERROR: failed to build Boost $(VERSION) (GCC $(GCC), $(TRIPLET))." | $(AWACS)
    exit 1
  fi
  ( cd "$(BOOST_ROOT)/bin.v2" && rm -rf libs/*/build/$(TOOLSET) )
  echo -n "Boost $(VERSION) (GCC $(GCC), $(TRIPLET)) was successfully built." | $(AWACS)
  [ -e "$(<)" ] && exit 1
  touch "$(<)"
}


rule install-req ( properties * )
{
  assert-specified   <triplet>         : $(properties) ;
  assert-unspecified <multilib>        : $(properties) ;
  assert-specified   <multilib-hidden> : $(properties) ;
  assert-unspecified <binutils>        : $(properties) ;
  assert-unspecified <binutils-hidden> : $(properties) ;
  assert-unspecified <gmp>             : $(properties) ;
  assert-unspecified <gmp-hidden>      : $(properties) ;
  assert-unspecified <mpfr>            : $(properties) ;
  assert-unspecified <mpfr-hidden>     : $(properties) ;
  assert-unspecified <mpc>             : $(properties) ;
  assert-unspecified <mpc-hidden>      : $(properties) ;
  assert-unspecified <ppl>             : $(properties) ;
  assert-unspecified <ppl-hidden>      : $(properties) ;
  assert-unspecified <cloog>           : $(properties) ;
  assert-unspecified <cloog-hidden>    : $(properties) ;
  assert-specified   <gcc>             : $(properties) ;
  assert-unspecified <gcc-hidden>      : $(properties) ;
  assert-specified   <icu4c>           : $(properties) ;
  assert-unspecified <icu4c-hidden>    : $(properties) ;
  assert-specified   <mpi>             : $(properties) ;
  assert-unspecified <mpi-hidden>      : $(properties) ;
  #assert-specified   <openmpi>         : $(properties) ;
  assert-unspecified <openmpi-hidden>  : $(properties) ;
  assert-specified   <boost>           : $(properties) ;
  assert-unspecified <boost-hidden>    : $(properties) ;
}

alias install : make : <conditional>@install-req ;
explicit install ;

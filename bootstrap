#!/usr/bin/env bash

intro_root=`(cd \`dirname "$0"\`; pwd)`
grep -Fq 434daa2b-b9b0-498c-bd86-18404f1c3464 "$intro_root/jamroot"

# Test if `optget' is an enhanced version or an old version.
if getopt --test 2>&1 | grep -Fq -- '--'; then
  echo "bootstrap: requires an enhanced version of \`getopt'" >&2
  exit 1
fi
getopt --test
if [ $? -ne 4 ]; then
  echo "bootstrap: requires an enhanced version of \`getopt'" >&2
  exit 1
fi

PS4='+$0:$LINENO: '
set -ex

args=`getopt                       \
      -n bootstrap                 \
      -l prefix:                   \
      -l with-binutils:            \
      -l with-gmp-for-gcc:         \
      -l with-mpfr-for-gcc:        \
      -l with-mpc-for-gcc:         \
      -l with-isl-for-gcc:         \
      -l with-cloog-for-gcc:       \
      -l enable-compilers:         \
      -l enable-multitarget::      \
      -l disable-multitarget       \
      -l with-gold::               \
      -l without-gold              \
      -l with-gcc-check::          \
      -l without-gcc-check         \
      -l enable-lcov::             \
      -l enable-gcovr::            \
      -l enable-gdb::              \
      -l with-gdb-check::          \
      -l without-gdb-check         \
      -l enable-opencv::           \
      -l enable-gmp::              \
      -l enable-mpfr::             \
      -l enable-mpc::              \
      -l enable-isl::              \
      -l enable-cloog::            \
      -l enable-ppl::              \
      -l enable-icu4c::            \
      -l enable-openmpi::          \
      -l with-mpi-backend:         \
      -l enable-boost::            \
      -l with-boost-check::        \
      -l without-boost-check       \
      -l enable-clang::            \
      -l enable-valgrind::         \
      -l enable-valgrind-regtest:: \
      -l disable-valgrind-regtest  \
      -l enable-cradle::           \
      -l concurrency:              \
      -o 'an' -- "$@"`
eval "args=($args)"

prev_arg=
prefix=
binutils=system
gmp_for_gcc=system
mpfr_for_gcc=system
mpc_for_gcc=system
isl_for_gcc=system
cloog_for_gcc=system
compilers=
multitarget=no
gold=no
gcc_check=yes
lcov=
gcovr=
gdb=
gdb_check=yes
opencv=
gmp=
mpfr=
mpc=
isl=
cloog=
ppl=
icu4c=
openmpi=
mpi_backend=
boost=
boost_check=yes
clang=
valgrind=
valgrind_regtest=
cradle=
concurrency=1
declare -a delegated_opts
declare -a delegated_args
for arg in "${args[@]}"; do
  if [ -z "$prev_arg" ]; then
    case "$arg" in
    --prefix)
      prev_arg=--prefix
      ;;
    -a)
      delegated_opts=("${delegated_opts[@]}" -a)
      ;;
    -n)
      delegated_opts=("${delegated_opts[@]}" -n)
      ;;
    --with-binutils)
      prev_arg=--with-binutils
      ;;
    --with-gmp-for-gcc)
      prev_arg=--with-gmp-for-gcc
      ;;
    --with-mpfr-for-gcc)
      prev_arg=--with-mpfr-for-gcc
      ;;
    --with-mpc-for-gcc)
      prev_arg=--with-mpc-for-gcc
      ;;
    --with-isl-for-gcc)
      prev_arg=--with-isl-for-gcc
      ;;
    --with-cloog-for-gcc)
      prev_arg=--with-cloog-for-gcc
      ;;
    --enable-compilers)
      prev_arg=--enable-compilers
      ;;
    --enable-multitarget)
      prev_arg=--enable-multitarget
      ;;
    --disable-multitarget)
      multitarget=no
      ;;
    --with-gold)
      prev_arg=--with-gold
      ;;
    --without-gold)
      gold=no
      ;;
    --with-gcc-check)
      prev_arg=--with-gcc-check
      ;;
    --without-gcc-check)
      gcc_check=no
      ;;
    --enable-lcov)
      prev_arg=--enable-lcov
      ;;
    --enable-gcovr)
      prev_arg=--enable-gcovr
      ;;
    --enable-gdb)
      prev_arg=--enable-gdb
      ;;
    --with-gdb-check)
      prev_arg=--with-gdb-check
      ;;
    --without-gdb-check)
      gdb_check=no
      ;;
    --enable-opencv)
      prev_arg=--enable-opencv
      ;;
    --enable-gmp)
      prev_arg=--enable-gmp
      ;;
    --enable-mpfr)
      prev_arg=--enable-mpfr
      ;;
    --enable-mpc)
      prev_arg=--enable-mpc
      ;;
    --enable-isl)
      prev_arg=--enable-isl
      ;;
    --enable-cloog)
      prev_arg=--enable-cloog
      ;;
    --enable-ppl)
      prev_arg=--enable-ppl
      ;;
    --enable-icu4c)
      prev_arg=--enable-icu4c
      ;;
    --enable-openmpi)
      prev_arg=--enable-openmpi
      ;;
    --with-mpi-backend)
      prev_arg=--with-mpi-backend
      ;;
    --enable-boost)
      prev_arg=--enable-boost
      ;;
    --with-boost-check)
      prev_arg=--with-boost-check
      ;;
    --without-boost-check)
      boost_check=no
      ;;
    --enable-clang)
      prev_arg=--enable-clang
      ;;
    --enable-valgrind)
      prev_arg=--enable-valgrind
      ;;
    --enable-valgrind-regtest)
      prev_arg=--enable-valgrind-regtest
      ;;
    --disable-valgrind-regtest)
      valgrind_regtest=no
      ;;
    --enable-cradle)
      prev_arg=--enable-cradle
      ;;
    --concurrency)
      prev_arg=--concurrency
      ;;
    --)
      ;;
    *)
      delegated_args=("${delegated_args[@]}" "$arg")
      ;;
    esac
  else
    # `$prev_arg' is not empty.
    case "$prev_arg" in
    --prefix)
      prefix="$arg"
      ;;
    --with-binutils)
      binutils="$arg"
      ;;
    --with-gmp-for-gcc)
      gmp_for_gcc="$arg"
      ;;
    --with-mpfr-for-gcc)
      mpfr_for_gcc="$arg"
      ;;
    --with-mpc-for-gcc)
      mpc_for_gcc="$arg"
      ;;
    --with-isl-for-gcc)
      isl_for_gcc="$arg"
      ;;
    --with-cloog-for-gcc)
      cloog_for_gcc="$arg"
      ;;
    --enable-compilers)
      compilers="$arg"
      ;;
    --enable-multitarget)
      case "$arg" in
      '')
        multitarget=yes
        ;;
      yes)
        multitarget=yes
        ;;
      no)
        multitarget=no
        ;;
      *)
        echo "bootstrap: option \`--enable-multitarget' doesn't allow argument \`$arg'" >&2
        exit 1
        ;;
      esac
      ;;
    --disable-multitarget)
      echo "bootstrap: an internal error" >&2
      exit 1
      ;;
    --with-gold)
      case "$arg" in
      '')
        gold=yes
        ;;
      yes)
        gold=yes
        ;;
      no)
        gold=no
        ;;
      *)
        echo "bootstrap: option \`--with-gold' doesn't allow argument \`$arg'" >&2
        exit 1
        ;;
      esac
      ;;
    --without-gold)
      echo "bootstrap: an internal error" >&2
      exit 1
      ;;
    --with-gcc-check)
      case "$arg" in
      '')
        gcc_check=yes
        ;;
      yes)
        gcc_check=yes
        ;;
      no)
        gcc_check=no
        ;;
      *)
        echo "bootstrap: option \`--with-gcc-check' doesn't allow argument \`$arg'" >&2
        exit 1
        ;;
      esac
      ;;
    --without-gcc-check)
      echo "bootstrap: an internal error" >&2
      exit 1
      ;;
    --enable-lcov)
      if [ -z "$arg" ]; then
        lcov=latest
      else
        lcov="$arg"
      fi
      ;;
    --enable-gcovr)
      if [ -z "$arg" ]; then
        gcovr=latest
      else
        gcovr="$arg"
      fi
      ;;
    --enable-gdb)
      if [ -z "$arg" ]; then
        gdb=latest
      else
        gdb="$arg"
      fi
      ;;
    --with-gdb-check)
      case "$arg" in
      '')
        gdb_check=yes
        ;;
      yes)
        gdb_check=yes
        ;;
      no)
        gdb_check=no
        ;;
      *)
        echo "bootstrap: option \`--with-gdb-check' doesn't allow argument \`$arg'" >&2
        exit 1
        ;;
      esac
      ;;
    --enable-opencv)
      if [ -z "$arg" ]; then
        opencv=latest
      else
        opencv="$arg"
      fi
      ;;
    --enable-gmp)
      if [ -z "$arg" ]; then
        gmp=latest
      else
        gmp="$arg"
      fi
      ;;
    --enable-mpfr)
      if [ -z "$arg" ]; then
        mpfr=latest
      else
        mpfr="$arg"
      fi
      ;;
    --enable-mpc)
      if [ -z "$arg" ]; then
        mpc=latest
      else
        mpc="$arg"
      fi
      ;;
    --enable-isl)
      if [ -z "$arg" ]; then
        isl=latest
      else
        isl="$arg"
      fi
      ;;
    --enable-cloog)
      if [ -z "$arg" ]; then
        cloog=latest
      else
        cloog="$arg"
      fi
      ;;
    --enable-ppl)
      if [ -z "$arg" ]; then
        ppl=latest
      else
        ppl="$arg"
      fi
      ;;
    --enable-icu4c)
      if [ -z "$arg" ]; then
        icu4c=latest
      else
        icu4c="$arg"
      fi
      ;;
    --enable-openmpi)
      if [ -z "$arg" ]; then
        openmpi=latest
      else
        openmpi="$arg"
      fi
      ;;
    --with-mpi-backend)
      if [ -z "$arg" ]; then
        echo "bootstrap: option \`--with-mpi-backend' requires an argument" >&2
        exit 1
      fi
      mpi_backend="$arg"
      ;;
    --enable-boost)
      if [ -z "$arg" ]; then
        boost=latest
      else
        boost="$arg"
      fi
      ;;
    --with-boost-check)
      case "$arg" in
      '')
        boost_check=yes
        ;;
      yes)
        boost_check=yes
        ;;
      no)
        boost_check=no
        ;;
      *)
        echo "bootstrap: option \`--with-boost-check' doesn't allow argument \`$arg'" >&2
        exit 1
        ;;
      esac
      ;;
    --without-boost-check)
      echo "bootstrap: an internal error" >&2
      exit 1
      ;;
    --enable-clang)
      if [ -z "$arg" ]; then
        clang=latest
      else
        clang="$arg"
      fi
      ;;
    --enable-valgrind)
      if [ -z "$arg" ]; then
        valgrind=latest
      else
        valgrind="$arg"
      fi
      ;;
    --enable-valgrind-regtest)
      case "$arg" in
      '')
        valgrind_regtest=yes
        ;;
      yes)
        valgrind_regtest=yes
        ;;
      no)
        valgrind_regtest=no
        ;;
      *)
        echo "bootstrap: option \`--enable-valgrind-regtest' doesn't allow argument \`$arg'" >&2
        exit 1
        ;;
      esac
      ;;
    --enable-cradle)
      if [ -z "$arg" ]; then
        cradle=trunk
      else
        cradle="$arg"
      fi
      ;;
    --concurrency)
      if echo "$arg" | grep -Eq '[[:digit:]]+'; then
        concurrency=$arg
      else
        echo "bootstrap: option \`--concurrency' doesn't allow value \`$arg'"
        exit 1
      fi
      ;;
    *)
      echo "bootstrap: an internal error" >&2
      exit 1
      ;;
    esac
    prev_arg=
  fi
done


delegated_opts=("${delegated_opts[@]}" --prefix="$prefix")

if [ "$binutils" = latest ]; then
  binutils=`"$intro_root/binutils/latest.sh"`
fi
if echo "$binutils" | grep -Eq '^[[:digit:]]+(\.[[:digit:]]+(\.[[:digit:]]+)?)?$'; then
  "$intro_root/binutils/download.sh" "$binutils"
elif [ "$binutils" = trunk ]; then
  "$intro_root/binutils/checkout.sh"
elif [ "$binutils" = system ]; then
  :
else
  echo "error: an invalid value \`$binutils' for \`--with-binutils'" >&2
  exit 1
fi
delegated_opts=("${delegated_opts[@]}" --with-binutils="$binutils")

if [ "$gmp_for_gcc" = latest ]; then
  gmp_for_gcc="$("$intro_root/gmp/latest.sh")"
fi
# GMP version strings might include non-digit suffixes like `6.0.0a`.
if echo "$gmp_for_gcc" | grep -Eq '^[[:digit:]]+(\.[[:digit:]]+){0,2}a?$'; then
  "$intro_root/gmp/download.sh" "$gmp_for_gcc"
elif [ "$gmp_for_gcc" = system ]; then
  :
else
  echo "error: an invalid value \`$gmp_for_gcc' of \`--with-gmp-for-gcc' option" >&2
  exit 1
fi
delegated_opts=("${delegated_opts[@]}" --with-gmp-for-gcc="$gmp_for_gcc")

delegated_opts=("${delegated_opts[@]}" --with-mpfr-for-gcc="$mpfr_for_gcc")

delegated_opts=("${delegated_opts[@]}" --with-mpc-for-gcc="$mpc_for_gcc")

delegated_opts=("${delegated_opts[@]}" --with-isl-for-gcc="$isl_for_gcc")

if [ "$cloog_for_gcc" = latest ]; then
  cloog_for_gcc=`"$intro_root/cloog/latest.sh"`
fi
if echo "$cloog_for_gcc" | grep -Eq '^[[:digit:]]+(\.[[:digit:]]+(\.[[:digit:]]+)?)?$'; then
  "$intro_root/cloog/download.sh" "$cloog_for_gcc"
elif [ "$cloog_for_gcc" = trunk ]; then
  "$intro_root/cloog/checkout.sh"
elif [ "$cloog_for_gcc" = system ]; then
  :
else
  echo "error: an invalid value \`$cloog_for_gcc' for \`--with-cloog-for-gcc'" >&2
  exit 1
fi
delegated_opts=("${delegated_opts[@]}" --with-cloog-for-gcc="$cloog_for_gcc")

delegated_opts=("${delegated_opts[@]}" --enable-compilers="$compilers")

if [ -z "$compilers" ]; then
  echo "bootstrap: requires \`--enable-compilers' option" >&2
  exit 1
fi

case "$multitarget" in
yes)
  delegated_opts=("${delegated_opts[@]}" --enable-multitarget)
  ;;
no)
  delegated_opts=("${delegated_opts[@]}" --disable-multitarget)
  ;;
*)
  echo "bootstrap: an internal error" >&2
  exit 1
  ;;
esac

case "$gold" in
yes)
  delegated_opts=("${delegated_opts[@]}" --with-gold)
  ;;
no)
  delegated_opts=("${delegated_opts[@]}" --without-gold)
  ;;
*)
  echo "bootstrap: an internal error" >&2
  exit 1
  ;;
esac

case "$gcc_check" in
yes)
  delegated_opts=("${delegated_opts[@]}" --with-gcc-check)
  ;;
no)
  delegated_opts=("${delegated_opts[@]}" --without-gcc-check)
  ;;
*)
  echo "bootstrap: an internal error" >&2
  exit 1
  ;;
esac

if [ -n "$lcov" ]; then
    if [ "$lcov" = latest ]; then
        lcov="$("$intro_root/lcov/latest.sh")"
    fi
    if echo "$lcov" | grep -Eq '^[[:digit:]]+\.[[:digit:]]+$'; then
        "$intro_root/lcov/download.sh" "$lcov"
    else
        echo "error: an invalid value \`$lcov' for \`--enable-lcov'" >&2
        exit 1
    fi
    delegated_opts=("${delegated_opts[@]}" --enable-lcov="$lcov")
fi

if [ -n "$gcovr" ]; then
    if [ "$gcovr" = latest ]; then
        gcovr="$("$intro_root/gcovr/latest.sh")"
    fi
    if echo "$gcovr" | grep -Eq '^[[:digit:]]+\.[[:digit:]]+$'; then
        "$intro_root/gcovr/download.sh" "$gcovr"
    else
        echo "error: an invalid value \`$gcovr' for \`--enable-gcovr'" >&2
        exit 1
    fi
    delegated_opts=("${delegated_opts[@]}" --enable-gcovr="$gcovr")
fi

if [ -n "$gdb" ]; then
    if [ "$gdb" = latest ]; then
        gdb="$("$intro_root/gdb/latest.sh")"
    fi
    # GDB version strings might include non-digit suffixes like `7.3a`.
    if echo "$gdb" | grep -Eq '^[[:digit:]]+(\.[[:digit:]]+){1,2}a?$'; then
        "$intro_root/gdb/download.sh" "$gdb"
    else
        echo "error: an invalid value \`$gdb' for \`--enable-gdb'" >&2
        exit 1
    fi
    delegated_opts=("${delegated_opts[@]}" --enable-gdb="$gdb")
fi

case "$gdb_check" in
yes)
  delegated_opts=("${delegated_opts[@]}" --with-gdb-check)
  ;;
no)
  delegated_opts=("${delegated_opts[@]}" --without-gdb-check)
  ;;
*)
  echo 'bootstrap: an internal error' >&2
  exit 1
  ;;
esac

if [ -n "$opencv" ]; then
  delegated_opts=("${delegated_opts[@]}" --enable-opencv="$opencv")
fi

if [ -n "$gmp" ]; then
  if [ "$gmp" = latest ]; then
    gmp="$("$intro_root/gmp/latest.sh")"
  fi
  # GMP version strings might include non-digit suffixes like `6.0.0a`.
  if echo "$gmp" | grep -Eq '^[[:digit:]]+(\.[[:digit:]]+){0,2}a?$'; then
    "$intro_root/gmp/download.sh" "$gmp"
  else
    echo "error: an invalid value \`$gmp' of \`--enable-gmp' option" >&2
    exit 1
  fi
  delegated_opts=("${delegated_opts[@]}" --enable-gmp="$gmp")
fi

if [ -n "$mpfr" ]; then
  delegated_opts=("${delegated_opts[@]}" --enable-mpfr="$mpfr")
fi

if [ -n "$mpc" ]; then
  delegated_opts=("${delegated_opts[@]}" --enable-mpc="$mpc")
fi

if [ -n "$isl" ]; then
  delegated_opts=("${delegated_opts[@]}" --enable-isl="$isl")
fi

if [ -n "$cloog" ]; then
  if [ "$cloog" = latest ]; then
    cloog=`"$intro_root/cloog/latest.sh"`
  fi
  if echo "$cloog" | grep -Eq '^[[:digit:]]+(\.[[:digit:]]+(\.[[:digit:]]+)?)?$'; then
    "$intro_root/cloog/download.sh" "$cloog"
  elif [ "$cloog" = trunk ]; then
    "$intro_root/cloog/checkout.sh"
  else
    echo "error: an invalid value \`$cloog' for \`--enable-cloog'" >&2
    exit 1
  fi
  delegated_opts=("${delegated_opts[@]}" --enable-cloog="$cloog")
fi

if [ -n "$ppl" ]; then
  delegated_opts=("${delegated_opts[@]}" --enable-ppl="$ppl")
fi

if [ -n "$icu4c" ]; then
  delegated_opts=("${delegated_opts[@]}" --enable-icu4c="$icu4c")
fi

if [ -n "$openmpi" ]; then
  delegated_opts=("${delegated_opts[@]}" --enable-openmpi="$openmpi")
fi

if [ -n "$mpi_backend" ]; then
  delegated_opts=("${delegated_opts[@]}" --with-mpi-backend="$mpi_backend")
fi

if [ -n "$boost" ]; then
  delegated_opts=("${delegated_opts[@]}" --enable-boost="$boost")
fi

case "$boost_check" in
yes)
  delegated_opts=("${delegated_opts[@]}" --with-boost-check)
  ;;
no)
  delegated_opts=("${delegated_opts[@]}" --without-boost-check)
  ;;
*)
  echo "bootstrap: an internal error" >&2
  exit 1
  ;;
esac

if [ -n "$clang" ]; then
  delegated_opts=("${delegated_opts[@]}" --enable-clang="$clang")
fi

if [ -n "$valgrind" ]; then
  delegated_opts=("${delegated_opts[@]}" --enable-valgrind="$valgrind")
fi

if [ -z "$valgrind_regtest" ]; then
  if [ -n "$valgrind" ]; then
    valgrind_regtest=yes
  else
    valgrind_regtest=no
  fi
fi
case "$valgrind_regtest" in
yes)
  [ -z "$valgrind" ] && {
    echo "bootstrap: \`--enable-valgrind-regtest' without \`--enable-valgrind'" >&2
    exit 1
  }
  delegated_opts=("${delegated_opts[@]}" --enable-valgrind-regtest)
  ;;
no)
  delegated_opts=("${delegated_opts[@]}" --disable-valgrind-regtest)
  ;;
*)
  echo 'bootstrap: an internal error' >&2
  exit 1
  ;;
esac

if [ -n "$cradle" ]; then
  if [ "$cradle" = trunk ]; then
    "$intro_root/cradle/checkout.sh"
  else
    echo "error: an invalid value \`$cradle' for \`--enable-cradle'" >&2
    exit 1
  fi
  delegated_opts=("${delegated_opts[@]}" --enable-cradle="$cradle")
fi

if [ -n "$concurrency" ]; then
  delegated_opts=("${delegated_opts[@]}" --concurrency=$concurrency)
fi


boost_latest=`"$intro_root/boost/latest.sh"`

if [ ! -d "$prefix/boost/$boost_latest" ]; then
  boost_tag=`echo $boost_latest | sed -e 's/\./_/g'`
  mkdir -p "$prefix/boost"
  pushd "$prefix/boost"
  wget -q -t 3 --no-clobber -- "http://downloads.sourceforge.net/project/boost/boost/$boost_latest/boost_${boost_tag}.tar.bz2"
  tar xjf boost_${boost_tag}.tar.bz2
  rm boost_${boost_tag}.tar.bz2
  mv boost_$boost_tag $boost_latest
  if [ -f "$intro_root/boost/$boost_latest.patch" ]; then
    pushd "$boost_latest"
    patch -p1 <"$intro_root/boost/$boost_latest.patch"
    popd
  fi
  ln -sfT $boost_latest latest
  popd
  if [ -x "$prefix/bin/bjam" ]; then
    rm "$prefix/bin/bjam"
  fi
fi

if [ ! -x "$prefix/bin/bjam" ]; then
  pushd "$prefix/boost/latest"
  ./bootstrap.sh
  mkdir -p "$prefix/bin"
  cp bjam "$prefix/bin"
  popd
fi

cp "$intro_root/template/x86_64-unknown-linux-gnu/site-config.jam" "$HOME"
sed -i "s@^local prefix = \"\$(home)/local\" ;@local prefix = \"$prefix\" ;@" "$HOME/site-config.jam"

cp "$intro_root/template/x86_64-unknown-linux-gnu/user-config.jam" "$HOME"
sed -i "s@^local prefix = \"\$(home)/local\" ;@local prefix = \"$prefix\" ;@" "$HOME/user-config.jam"
if [ -f '/usr/share/xml/docbook/stylesheet/docbook-xsl/VERSION' ]; then
  sed -i 's@^local docbook-xsl-path ;$@local docbook-xsl-path = "/usr/share/xml/docbook/stylesheet/docbook-xsl" ;@' "$HOME/user-config.jam"
elif [ -f '/usr/share/sgml/docbook/xsl-stylesheets/VERSION' ]; then
  sed -i 's@^local docbook-xsl-path ;$@local docbook-xsl-path = "/usr/share/sgml/docbook/xsl-stylesheets" ;@' "$HOME/user-config.jam"
fi
if [ -f '/usr/share/xml/docbook/schema/dtd/4.2/docbookx.dtd' ]; then
  sed -i 's@^local docbook-dtd-path ;$@local docbook-dtd-path = "/usr/share/xml/docbook/schema/dtd/4.2" ;@' "$HOME/user-config.jam"
elif [ -f '/usr/share/sgml/docbook/sgml-dtd-4.2-1.0-51.el6/docbookx.dtd' ]; then
  sed -i 's@^local docbook-dtd-path ;$@local docbook-dtd-path = "/usr/share/sgml/docbook/sgml-dtd-4.2-1.0-51.el6" ;@' "$HOME/user-config.jam"
fi

install --mode=755 "$intro_root/boost/toolset.sh" "$prefix/bin/get-toolset.sh"
install --mode=755 "$intro_root/template/x86_64-unknown-linux-gnu/asan2line" "$prefix/bin"

export BOOST_ROOT="$prefix/boost/latest"
export BOOST_BUILD_PATH="$BOOST_ROOT/tools/build/v2"

tmpdir=`mktemp -d`

stdout="$tmpdir/stdout"
touch "$stdout"
tail -s 0.1 -F "$stdout" &
stdout_tail_pid=$!

stderr="$tmpdir/stderr"
touch "$stderr"
tail -s 0.1 -F "$stderr" >&2 &
stderr_tail_pid=$!

trap 'kill -TERM $stdout_tail_pid $stderr_tail_pid; wait; rm -rf "$tmpdir"' EXIT HUP INT QUIT TERM

"$prefix/bin/bjam" "${delegated_opts[@]}" --stdout="$stdout" --stderr="$stderr" "${delegated_args[@]}"

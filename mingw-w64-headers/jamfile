project mingw-w64-headers ;

import alias ;
import errors ;
import feature ;
import make ;
import regex ;

path-constant THIS_DIR : . ;


make mingw-w64.download
  : # No sources.
  : @download-mingw-w64
  ;
explicit mingw-w64.download ;

rule download-mingw-w64 ( targets * : sources * : properties * )
{
  URL on $(targets) = http://downloads.sourceforge.net/project/mingw-w64/mingw-w64/mingw-w64-snapshot/mingw-w64-v1.0-snapshot-20101003.tar.bz2 ;
  TARBALL on $(targets) = $(THIS_DIR)/../mingw-w64-v1.0-snapshot-20101003.tar.bz2 ;
  STDOUT_ on $(targets) = [ feature.get-values <intro-stdout> : $(properties) ] ;
  STDERR_ on $(targets) = [ feature.get-values <intro-stderr> : $(properties) ] ;
}
actions download-mingw-w64
{
  rm -f "$(<)" || exit $?
  if [ ! -f "$(TARBALL)" ]; then
    ( cd "$(TARBALL:D)" && wget --quiet --timestamping -- '$(URL)' ) \
      || { echo "ERROR: failed to download the MinGW-w64 tarball." 2>>"$(STDOUT_)" 1>&2; exit 1; }
    [ ! -f "$(TARBALL)" ] && exit 1
  fi
  [ -e "$(<)" ] && exit 1
  touch "$(<)"
}


make mingw-w64.expand
  : mingw-w64.download
  : @expand-mingw-w64
  ;
explicit mingw-w64.expand ;

rule expand-mingw-w64 ( targets * : sources * : properties * )
{
  if ! $(sources[1]) {
    errors.error "ERROR: wrong number of sources." ;
  }
  if $(sources[2]) {
    errors.error "ERROR: wrong number of sources." ;
  }
  TARBALL on $(targets) = $(THIS_DIR)/../mingw-w64-v1.0-snapshot-20101003.tar.bz2 ;
  DEST_DIR on $(targets) = $(THIS_DIR)/../mingw-w64-v1.0-20101003 ;
  STDOUT_ on $(targets) = [ feature.get-values <intro-stdout> : $(properties) ] ;
  STDERR_ on $(targets) = [ feature.get-values <intro-stderr> : $(properties) ] ;
}
actions expand-mingw-w64
{
  rm -f "$(<)" || exit $?
  [ ! -f "$(>[1])" ] && exit 1
  [ ! -f "$(TARBALL)" ] && exit 1
  if [ ! -f "$(DEST_DIR)/mingw-w64-headers/configure" ]; then
    rm -rf "$(DEST_DIR)" || exit $?
    tar xjf "$(TARBALL)" -C "$(TARBALL:D)" \
      || { echo "ERROR: failed to expand the tarball for the MinGW-w64 build." 2>>"$(STDERR_)" 1>&2; exit 1; }
    [ ! -f "$(DEST_DIR)/mingw-w64-headers/configure" ] && exit 1
  fi
  [ -e "$(<)" ] && exit 1
  touch "$(<)"
}


make mingw-w64-headers.configure
  : mingw-w64.expand/<intro-host>unspecified
  : @configure-mingw-w64-headers
  ;
explicit mingw-w64-headers.configure ;

rule configure-mingw-w64-headers ( targets * : sources * : properties * )
{
  OPTIONS on $(targets) = ;

  # Set the path to the 'configure' file.
  local configure = $(THIS_DIR)/../mingw-w64-v1.0-20101003/mingw-w64-headers/configure ;
  CONFIGURE on $(targets) = $(configure) ;

  # Set the 'build' option for the 'configure' script.
  local build = [ feature.get-values <intro-build> : $(properties) ] ;
  OPTIONS on $(targets) += --build=$(build) ;

  # Set the 'host' option for the 'configure' script.
  local host = [ feature.get-values <intro-host> : $(properties) ] ;
  OPTIONS on $(targets) += --host=$(host) ;

  # Set the 'prefix' option for the 'configure' script.
  local prefix = [ feature.get-values <intro-prefix> : $(properties) ] ;
  OPTIONS on $(targets) += --prefix=\"$(prefix)\" ;

  STDOUT_ on $(targets) = [ feature.get-values <intro-stdout> : $(properties) ] ;
  STDERR_ on $(targets) = [ feature.get-values <intro-stderr> : $(properties) ] ;
}
actions configure-mingw-w64-headers
{
  rm -f "$(<)" || exit $?
  ( mkdir -p "$(<:D)/build" && { cd "$(<:D)/build" && rm -rf *; } ) || exit $?
  [ ! -f "$(CONFIGURE)" ] && exit 1
  ( cd "$(<:D)/build" && "$(CONFIGURE)" $(OPTIONS) 1>>"$(STDOUT_)" 2>>"$(STDERR_)" ) \
    || { echo "ERROR: failed to 'configure' for the mingw-w64-headers build." 2>>"$(STDERR_)" 1>&2; exit 1; }
  [ ! -f "$(<:D)/build/Makefile" ] && exit 1
  [ -e "$(<)" ] && exit 1
  touch "$(<)"
}


make mingw-w64-headers.make
  : mingw-w64-headers.configure
  : @make-mingw-w64-headers
  ;
explicit mingw-w64-headers.make ;

rule make-mingw-w64-headers ( targets * : sources * : properties * )
{
  if ! $(sources[1]) {
    errors.error "ERROR: wrong number of sources." ;
  }
  if $(sources[2]) {
    errors.error "ERROR: wrong number of sources." ;
  }
  local host = [ feature.get-values <intro-host> : $(properties) ] ;
  HOST on $(targets) = $(host) ;
  local prefix = [ feature.get-values <intro-prefix> : $(properties) ] ;
  PREFIX on $(targets) = $(prefix) ;
  STDOUT_ on $(targets) = [ feature.get-values <intro-stdout> : $(properties) ] ;
  STDERR_ on $(targets) = [ feature.get-values <intro-stderr> : $(properties) ] ;
}
actions make-mingw-w64-headers
{
  rm -f "$(<)" || exit $?
  [ ! -f "$(>[1])" ] && exit 1
  [ ! -f "$(>[1]:D)/build/Makefile" ] && exit 1
  ( cd "$(<:D)/build" && make install 1>>"$(STDOUT_)" 2>>"$(STDERR_)" ) \
    || { echo "ERROR: failed to 'make install' for the mingw-w64-headers build." 2>>"$(STDERR_)" 1>&2; exit 1; }
  mkdir -p "$(PREFIX)/$(HOST)/lib" || exit 1
  ln -fs "$(PREFIX)/$(HOST)/lib" "$(PREFIX)/$(HOST)/lib64" || exit 1
  [ -e "$(<)" ] && exit 1
  touch "$(<)"
}


rule install-req ( properties * )
{
  local result = <source>mingw-w64-headers.make ;

  local build = [ feature.get-values <intro-build> : $(properties) ] ;
  if $(build) = unspecified {
    errors.error "ERROR: the property '<intro-build>' is not specified for the mingw-w64-headers build." ;
  }

  local host = [ feature.get-values <intro-host> : $(properties) ] ;
  if $(host) = unspecified {
    errors.error "ERROR: the property '<intro-host>' is not specified for the mingw-w64-headers build." ;
  }

  local target = [ feature.get-values <intro-target> : $(properties) ] ;
  if $(target) != unspecified {
    errors.error "ERROR: the property '<intro-target>$(target)' is not valid for the mingw-w64-headers build." ;
  }

  local link = [ feature.get-values <intro-link> : $(properties) ] ;
  if $(link) != unspecified {
    errors.error "ERROR: the property '<intro-link>$(link)' is not valid for the mingw-w64-headers build." ;
  }

  local check = [ feature.get-values <intro-check> : $(properties) ] ;
  if $(check) = unspecified {
    if $(build) = $(host) {
      check = yes ;
    }
    else {
      check = no ;
    }
  }
  result = $(result)/<intro-check>$(check) ;

  #errors.error $(result) ;

  return $(result) ;
}

alias install
  : # 'mingw-w64-headers.make' is added by the indirect conditional requirements.
  : <conditional>@install-req
  ;
explicit install ;
